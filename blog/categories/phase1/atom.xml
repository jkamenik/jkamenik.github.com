<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: phase1 | Random Software Inklings]]></title>
  <link href="http://jkamenik.github.com/blog/categories/phase1/atom.xml" rel="self"/>
  <link href="http://jkamenik.github.com/"/>
  <updated>2014-02-07T14:39:28-05:00</updated>
  <id>http://jkamenik.github.com/</id>
  <author>
    <name><![CDATA[John T. Kamenik]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bunco Phase 1.2]]></title>
    <link href="http://jkamenik.github.com/blog/2012/11/22/bunco-phase-1-dot-2/"/>
    <updated>2012-11-22T21:55:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2012/11/22/bunco-phase-1-dot-2</id>
    <content type="html"><![CDATA[<p>This is just a slight addendum to the <a href="{%%20post_url%202012-11-21-bunco-phase-1%20%}">Bunco Phase 1</a> Post.  After having used the score card in several games there are a few issues that arise with the existing layout.</p>

<ol>
<li>Input is cumbersome</li>
<li>The interface is SLOW!</li>
<li>Cannot correct screw ups</li>
</ol>


<!-- more -->


<h2>Cumbersome input</h2>

<p>It is hard to tell how well a design is going to work without actually using it.  When we actually started to use it we noticed that it was too difficult to keep track of whose turn it was and it really slowed down the game.  This is exactly the opposite of what using the phone as a scorecard should be.</p>

<p>The major reason for the slow down is that we maintain the player turn state in the app.  More specifically I <em>force</em> the management of whose turn it is.  I had done this as a way of saving space, but when implemented it sucked.</p>

<p>I redesigned things a bit to include score buttons for each player.  But in order to fix the buttons I had to lose the header and refresh button.</p>

<p>{% img /images/bunco/ScoreBoard_2.png %}</p>

<h2>Slow!</h2>

<p>Between clicking a score button and seeing the score applied and being able to click the button again was at least 1 second.  Not huge if you only need to enter a small number of inputs.  But a long game can take up to 246 inputs ((21 + 20)*6).  So in just the inputs it takes more then 4 minutes!  The problem is that rolling the dice is very quick with a long game being less then 2 minutes.</p>

<p>I used the Safari profiler and it was very clear that 99% of the total time was in repainting the view.  I use Backbone to get the events and a simple MVC, and as such you would expect it to refresh the view using the new data.  Specifically <em>all</em> the time was taken after triggering the "create" event.</p>

<p>The template that repeats for each round is:</p>

<p>```html</p>

<pre><code>&lt;script type="text/template" id="round"&gt;
    &lt;div data-role="collapsible" data-collapsed="&lt;%= !active %&gt;"&gt;
        &lt;%
        var person = "";
        if(active){
            person = "(P"+player+"'s turn)";
        }
        if(complete){
            person = "(P"+player+" wins)";
        }
        %&gt;
        &lt;h3&gt;Round &lt;%= round_number %&gt; &lt;%= person %&gt;&lt;/h3&gt;
        &lt;div class="ui-grid-a"&gt;
            &lt;div class="ui-block-a"&gt;
                &lt;%= p1_score %&gt;
            &lt;/div&gt;
            &lt;div class="ui-block-b"&gt;
                &lt;%= p2_score %&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/script&gt;
</code></pre>

<p>```</p>

<p>The view is:</p>

<p>```javascript
  score_card.RoundListView = Backbone.View.extend({</p>

<pre><code>initialize: function(){
  this.template = _.template($("#round").html());
},

render: function(){
  var dom      = this.$el;
  var template = this.template;
  dom.empty();

  this.collection.each(function(round){
    dom.append(template(round.toJSON()));
  });

  // needed for jquery to rerender dom
  dom.trigger('create');  // Massive time sink, 99% of rendering time

  return this;
}
</code></pre>

<p>  });
```</p>

<p>When any record is changed I rerender the entire page.</p>

<p><code>javascript
rounds.on('change',function(model){view.render()});
</code></p>

<h3>Find and replace, instead of rerender</h3>

<p>Rerendering shouldn't really be an issue, but it turns out that jQuery Mobile does a huge amount of DOM pollution, which is hugely expensive.  It would be much faster if we could just find and replace single items and regenerating the entire page.</p>

<p>I changed the template to include more IDs to making finding items faster and easier:</p>

<p>```html</p>

<pre><code>&lt;script type="text/template" id="round"&gt;
    &lt;div data-role="collapsible" id="round&lt;%=round_number%&gt;" data-collapsed="&lt;%= !active %&gt;"&gt;
        &lt;%
        var person = "";
        if(complete){
            person = "(P"+player+" wins)";
        }
        var p1_score_id = "p1_r"+round_number;
        var p2_score_id = "p2_r"+round_number;
        %&gt;
        &lt;h3&gt;Round &lt;%= round_number %&gt; &lt;%= person %&gt;&lt;/h3&gt;
        &lt;div class="ui-grid-a"&gt;
            &lt;div class="ui-block-a"&gt;
                &lt;span id="&lt;%= p1_score_id %&gt;"&gt;
                    &lt;%= p1_score %&gt;
                &lt;/span&gt;
            &lt;/div&gt;
            &lt;div class="ui-block-b"&gt;
                &lt;span id="&lt;%= p2_score_id %&gt;"&gt;
                    &lt;%= p2_score %&gt;
                &lt;/span&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/script&gt;
</code></pre>

<p>```</p>

<p>I added a find and replace method to the view:</p>

<p>```ruby
  score_card.RoundListView = Backbone.View.extend({</p>

<pre><code>//same as before

findAndReplace: function(round){
  var player   = round.get('player');
  var complete = round.get('complete');
  var number   = round.get('round_number');
  var p1_score = round.get('p1_score');
  var p2_score = round.get('p2_score');

  this.$el.find("#p1_r"+number).html(p1_score);
  this.$el.find("#p2_r"+number).html(p2_score);

  if(complete){
    this.$el.find('#round'+number+' h3 .ui-btn-text').html("Round "+number+" (P"+player+" wins)").trigger('collapse');

    // when chaging a header and mark the winner we have to repaint the entire page.
    this.$el.trigger('create');
  } else {
    // if not complete just make sure the item is expanded
    this.$el.find('#round'+number+' h3').trigger('expand');
  }
}
</code></pre>

<p>  });
```</p>

<p>Then I just need to change the on change event to find:</p>

<p><code>javascript
rounds.on('change',function(model){view.findAndReplace(model)});
</code></p>

<h2>Screw ups</h2>

<p>Adding points to the wrong user happens, and for the time being I still don't have a good answer.  But then again there are a lot of design changes to be tested before we try to tackle this.  It is hard to tell if this will even be an issue now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bunco Phase 1]]></title>
    <link href="http://jkamenik.github.com/blog/2012/11/21/bunco-phase-1/"/>
    <updated>2012-11-21T08:21:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2012/11/21/bunco-phase-1</id>
    <content type="html"><![CDATA[<p>Phase 1 is always a learning experience.  Often very little work is done, but a lot of research is done.  I generally do not like that approach.  Instead I like to start out simple and let that guide me.  And it has guided me to a initial working version at <a href="http://jkamenik.github.com/Bunco">http://jkamenik.github.com/Bunco</a>.</p>

<!-- more -->


<h2>The Target</h2>

<p>Before any design could start I first had to decide what language, what library, what device, and how it will be accessed.</p>

<h3>Device</h3>

<p>I have my phone with me everywhere I go.  So it is a clear choice as the scorecard and input device.  The only question then becomes: do I host it from the web, or create a native app?</p>

<p>I don't know native iPhone, but I know that PhoneGap can be used to generate a native app from a hosted one.  So I can still go native if I want, but I don't have to start with an all or nothing approach.</p>

<h3>Hosting</h3>

<p>Now that I have decided on using the phone and hosting I have to figure out where to host and let that inform what else is available to me.</p>

<p>I could use a standard LAMP install on a hosting provider, but those can get expensive.</p>

<p>I could use a home server with DDNS to reverse port through my firewall, but I don't like maintaining my own infrastructure.</p>

<p>I could use a Micro Amazon EC2 instance (free for the first year), but again I have to do a lot of setup.</p>

<p>I could use Heroku and either spin-up a simple Node.js or Ruby on Rails app.  Actually I started doing this, but then decided that in this stage with the need to message between phones it was overkill to even setup a server.</p>

<p>That is where Github Pages comes in.  I already use them to serve my blog, and a few other things.  And I am pretty much serving a static site.  All I have to do is work out of a git branch called gh_pages and everything will just work.</p>

<h3>Lanuage and Libraries</h3>

<p>Knowing that I am serving a static site from GitHub I open to using the web, but limited into things that are pre-compiled and static.  And since it going to be for the iPhone jQuery Mobile is a natural fit because it just uses HTML5's Semantic markup features.</p>

<p>I could use CoffeeScript - in fact if it gets any bigger I will - which compile to Javascript, but has a lot of niceties I am used to when working on Rails.  But since this isn't a full blown Rails 3.2 app - with the full asset pipeline and compiling, minifying, and cache busting that goes along with it - the boon of CoffeeScript is slightly diminished.  Also, since I am starting with a library I haven't used before it might be more complicated debugging a CoffeeScript bug vs a jQuery Mobile bug.  I will leave CoffeeScript on the back burner for now.</p>

<h4>Aside (Backbone.js)</h4>

<p>As an aside, when I started I was writing raw JS hashes, but was having trouble keeping things sorted.  I remember my days of using ExtJS, which is great for managing complex GUIs, but very large.  Then I remembered Backbone.js which is what I use now.  Much smaller, and less cumbersome.</p>

<h2>Design</h2>

<p>Once all the limitation are know (or at least most of them) everything starts with a design.  And I am not graphic designer, so I usually just go at the problem using rails.  Not really an option here.</p>

<p>But since I plan on using jQuery Mobile, right on their website they have a embedded designer.  The output is HTML5 markup with the "data" flash that jQuery Mobile uses.  Here is my initial design:</p>

<!-- image here -->


<ol>
<li>Header - Refresh button and title</li>
<li>Footer - Scoring buttons: 0, 1, 5, 21</li>
<li>Body - The score board.  Players across, Rounds down.</li>
</ol>


<h3>The score board</h3>

<p>Very quickly I figured out that I really didn't have the room for the scoreboard.  Not without shrinking the size of the text to unreadable levels.  So I had to switch to another style.</p>

<p>Enter the accordion.  Instead of a grid where I see all scores I use an accordion showing the round number of the scores for both players.  Sure only really get to the see the score of current round, but I can just add the winner of the round to the visible title and that solves the problem.  Plus it takes up less room total, which is a win.</p>

<p>{% img /images/bunco/ScoreBoard_1.png %}</p>

<!-- image here -->

]]></content>
  </entry>
  
</feed>
