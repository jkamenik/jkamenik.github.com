<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rant | Random Software Inklings]]></title>
  <link href="http://jkamenik.github.com/blog/categories/rant/atom.xml" rel="self"/>
  <link href="http://jkamenik.github.com/"/>
  <updated>2014-02-28T22:17:25-05:00</updated>
  <id>http://jkamenik.github.com/</id>
  <author>
    <name><![CDATA[John T. Kamenik]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Comcast Fail]]></title>
    <link href="http://jkamenik.github.com/blog/2013/06/12/comcast-fail/"/>
    <updated>2013-06-12T20:20:00-04:00</updated>
    <id>http://jkamenik.github.com/blog/2013/06/12/comcast-fail</id>
    <content type="html"><![CDATA[<p>The Comcast 30 day challenge fails, except in challenging my nerves!</p>

<p>I feel angry and scammed, but instead of ranting I am just going to give the timeline with some commentaries.</p>

<!-- more -->


<p>Everything below is factually accurate, but for libel reasons I will be leaving out the name of persons involved, as well as specific locations.  The place where initial contact was made will be known as "the mall", the sales agent as "A", the installation tech as "the tech", Comcast support will be known as "S1" and "S2", and the equipment recovery support will be known as "R1" and "R2".</p>

<p><code>My commentary will have this format.</code></p>

<h3>Final Outcome</h3>

<p>Lets start with the final outcome, which was effectively a 3 hour no-op.  There is a lot of anger because we feel duped, but no money changed hands, and I was able to reset my previous service provider without incident.  There is loss of recorded programs on the DVR, but that is the only loss I have suffered.</p>

<p>I suffered 2 days (of the free 30) with the wrong services and a constant set of "we can't help you.  Talk to some one else" answers.  During that time the internet (though not the correct server) had several outages.</p>

<h3>Timeline</h3>

<h4>November - June - Worry sets in</h4>

<p>Worrying about money and the cost all subscription services.  Verizon isn't horrible at $116 / month for very stable internet and some HD channels, but other then mortgage and utilities it our single greatest monthly expense.  We don't have movie channels because we have both NetFlix and Amazon Prime.</p>

<p>I am out of contract with Verizon so my cost could jump at any time, but at least I am not locked into a 2 year contract.  Doing online research has not yielded any options that are better.</p>

<h4>Early June - Small changes</h4>

<p>Cancel NetFlix since we barely watch it and have amazon which offers streaming video as well.</p>

<h4>June 5th, 2013 - Sign up</h4>

<p>Wednesday was a rough day and we decided to go to the mall to eat dinner.  After dinner we walked the mall and ended up in a Big Box store.  We were looking at the $199 Chromebook when <strong>A</strong> approached us.</p>

<p><code>Yes we are a emotional eaters.</code></p>

<p><strong>A</strong> was quite nice and we have been looking for a cheaper service anyway.  He tells us about the "$400 per year challenge" where comcast can save you over $400 a year with the same or better service.  After discussing what we have, he tells us about the package he has for $72 / month for 1 year.  The package is:</p>

<ul>
<li>Digital Preferred Plus TV</li>
<li>50mb / s Internet</li>
<li>HBO, Showtime and Max</li>
</ul>


<p><code>Sounds too good to be true.  We are sceptical.</code></p>

<p><strong>A</strong> then says that we don't have to pay for anything now and we get to try it for 30 days for free.  We sign up for installation Tuesday afternoon.  He takes the form and returns with the brochure which he writes on.</p>

<p><code>What the hell.  If it works, great.  If not it isn't going to cost us anything.</code></p>

<p>On the drive home we get a text from <strong>A</strong> asking when we wanted the installation.</p>

<p><code>Now I am on guard.  This seems like all the old problems I have had with Comcast.  Memories of bad service, and bad support come flooding back.</code></p>

<h4>June 10th, 2013 - Red flags</h4>

<p>We get a welcome package from Comcast and it has nothing in it that remotely looks like what we were told about.  The advertised packages were triple play and much more then we are willing to pay.</p>

<p><code>Red flag 1.</code></p>

<p>Later that night I get my confirmation call.  The call says that the install will "arrive between 8am and 10am".</p>

<p><code>Red flag 2.</code></p>

<h4>June 11th, 2013 - The install</h4>

<p><code>I work from home.  So I am always there during the day.  I rearrange things so that I won't need the internet.</code></p>

<p>Around 8:30am the tech arrives.  He walks around the yard examining things then comes to the door.  He asks if I have ever had Comcast.  "Not at this address".  He tells me that there is no line to the house so he going to have to check some things.  He comes back a few minutes later and says that the only option is to run a cable over the driveway, and across the yard and later they will run an underground line.  I have to sign a waiver because it is a tripping hazard.</p>

<p><code>I figured he was going to try to take the cable directly through a wall like happened at another house.  So I am happy to sign the waiver.</code></p>

<p><code>Remember that they schedule an appointment to bury the line.  It comes up later.</code></p>

<p>Tech runs the outside line and connects it to the line that already goes into the house.  Then comes in saying "I have a DVR, digital receiver, and cable modem where do you want them".  I say "The DVR in the living room, the modem in the laundry room."  He asks "where is the other TV?"</p>

<p><code>Red flag 3.  I anly have 1 TV, and **A** knew that.</code></p>

<p>Tech says "You should call your sales guy.  Service order says I have to install 2 TVs."  <strong>A</strong> warned me to txt him before calling in case he was with a client.  So that is that what I do.  Meanwhile the tech installs the cable box, which has to update.  Then he goes about installing the modem.</p>

<p><code>Awesome, soon I get my internet back.  I have been working without it, using my phone for email and other things that require me to be connected.  Soon I will be able to push what I have done to github.</code></p>

<p>Tech installs the cable modem and needs a computer to activate it.  He uses a spare machine I have.  It installs a bunch of packages like always, which I can't risk infecting my work computer.</p>

<p><code>I hate that Comcast has this as a requirement, but at least I have a work around.  Verizon had a similar policy, but I was in the middle of moving and didn't have a computer so their tech used a verizon laptop to complete the installation.  No such luck with Comcast so it was a good thing I had a spare laptop.</code></p>

<p>Immediately after configuring internet I check my work machine.  It is able to connect, but can't get online.  After 5 min of debugging it suddenly works.</p>

<p><code>Checking the modem logs the next day I found that the DHCP server kept crashing, which explains why machine was on Wifi but couldn't talk to anything.</code></p>

<p>Checking speedtest.net I find that I am only getting 20mb /s down.  I tell the tech it should be 50mb.  He says "you need to call your sales guy."</p>

<p>He then heads back to check the cable box.  Asks "what service do you have"?  "Digital Perferred Plus".  His response "Oh well that's not what is enabled on this box.  You should call your sales man and get this correct.  There is nothing I can do.  I could call support but they might not be able to help, but it would cost you."</p>

<p><code>Wait what!?!  Support at comcast costs money now, and they can't help you with problems?</code></p>

<p>I haven't gotten a response back from <strong>A</strong> so I give him an actual call.  The phone goes to voice mail and the voice says "the user has not setup their voicemail, goodbye".</p>

<p><code>Red flag 4.  Holy hell!  A salesman that can't be reach and Comcast unable to help.  F'</code></p>

<p>About 10 minutes later I get a call back and explain the situation.  The tech is doing cleanup so he is still here.  <strong>A</strong> tells me to have him take back the spare tuner and he will correct service tomorrow.</p>

<p><code>Not what I want to hear, but at least things will be corrected soon.</code></p>

<h4>June 12th, 2013 - The fail</h4>

<p><strong>7:30ish</strong> - I start work and try speedtest.net again.  Still 20mb.  <strong>A</strong> must not be at work yet.</p>

<p><strong>10:50ish</strong> - The internet goes out for about 10 minutes.  Great.  <strong>A</strong> corrected my account.  <code>or so I thought</code></p>

<p><strong>11am</strong> - Internet comes back so I check speedtest.net.  Still 20mb.  <code>WTF?!? Less then one day in and I am already have network outages?</code></p>

<p><strong>11:03am</strong> - I txt <strong>A</strong> "Any word on getting my package corrected?".  I then go about figuring out why the Internet went out.  From the modem logs it appears the DHCP (needed for computer to talk to the internet) crashed.  The time wasn't exactly right, but modem timestamp might not be accurate so that is my best guess.</p>

<p><strong>4:10pm</strong> - I txt <strong>A</strong> "4pm and still word nor is the service working correctly".  Then realize my mistaken and txt "Still no word*"</p>

<p><strong>6:50pm</strong> - I call Comcast back on a number they called me from after the appointment.  Turns out that is just the survey line and they can't transfer me.  They give me an alternate number, but that is the best they can do.</p>

<p><strong>6:52pm</strong> - I Comcast at the number provided.  A few menus later and a short wait I am talking to retainment agent <strong>S1</strong> about canceling service.  I explain the situation and she wants to see if she can correct my service before canceling.  I am on hold for about 10minutes when she comes back to tell me that I have to talk to my sales person.</p>

<p><code>Now I am thinking that I need to talk to the sales person to cancel.  Crap!</code></p>

<p>"I can't get ahold of him.  Just cancel the service."  <strong>S1</strong> says "sorry for all the problem we can certainly cancel your account.  Since you are in the 30day window there will be no charge."</p>

<p>A short wait later <strong>S1</strong> says "You service is now canceled.  Do you have any questions at this time?"  "Are you going to send me a box so that I can return the equipment."  She says "No, but I can redirect you to a recovery agent."</p>

<p><code>Crap.  I have been on the phone for more then an hour and now I have to talk to someone else.</code></p>

<p>Another short wait and now I am talking to <strong>R1</strong>.  For verification reasons I have tell her all my account details.  Then she says "I am sorry, but we cannot collect your equipment Comcast has you down for a service call in 2 weeks so until that is finished there is nothing I can do"</p>

<p>"What?" I say.  "I literally just got done canceling and was redirected here."</p>

<p><strong>R1</strong> says "I am sorry sir, but we are not Comcast.  We are a 3rd party.  You need to call Comcast."</p>

<p>"Fine, please transfer me back."</p>

<p>"I am sorry sir I cannot do that.  You have to call them back yourself."  So I hung up.</p>

<p><code>Now I question if Comcast is a company or a loose collection of people whose job it is to bounce you around like ping pong balls.  Have I even been talking to Comcast?</code></p>

<p><strong>7:15pm</strong> - I call Comcast back, wait again, and go through the same verification as before.  Now I am with <strong>S2</strong> who just like <strong>S1</strong> attempts correct my service and will not help until she does.  I give her all the details.  She says "Sir that is not a package that we offer.  What I can do is waive the DVR for a year and give you HBO and your cost is only $89.99 / month".</p>

<p><code>Oh hell no.  I was sold $72 all in, no contract, including 3 movie channels.  Now I am being switched to a waived DRV (read contract required) and less for more?</code></p>

<p>I say "No that is worse then I was sold.  But I already canceled the service and at recovery they told me they could collect because I had an outstanding appointment."</p>

<p><strong>S2</strong> says "Let me check...  I see they have an appointment in 2 weeks to bury a line, but"  I cut her off "but since I canceled there isn't a need to bury a line.  Can you please cancel that appointment so I can have my equipment collected?"</p>

<p><code>I shouldn't have cut her off, but it has been almost 2 hours of being bounced around and no one can help me completely and accurately.  I need to start being clear and not giving openings because I still have to make dinner.</code></p>

<p><strong>S2</strong> says "Ok sir.  We can cancel that appointment.  If that is all I can transfer you back to recovery.  Have a nice day."</p>

<p>A short wait, and re-verification of my account later I am talking to <strong>R2</strong>.  She ask when I would like someone to pickup the stuff.  So I schedule it and hang up.</p>

<p><strong>7:30pm</strong> - I disconnect the Comcast line to the house and reconnect the Verizon line.  I then pull out all the Comcast parts and replace them with my Verizon equipment.  I leave the Comcast DVR because we taped a several things yesterday that we want to watch and collections isn't for several days.</p>

<p><code>When we tried the DVR later it was bricked by corporate.  Nothing worked.  So those shows are lost to us now.  Thank god for online streaming.</code></p>

<p><strong>7:42pm</strong> - I text <strong>A</strong> "No worries.  Several calls to support later.  Comcast is canceled".  I then start writing this blog.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The problem with Best Practices]]></title>
    <link href="http://jkamenik.github.com/blog/2012/05/20/the-problem-with-best-practices/"/>
    <updated>2012-05-20T00:00:00-04:00</updated>
    <id>http://jkamenik.github.com/blog/2012/05/20/the-problem-with-best-practices</id>
    <content type="html"><![CDATA[<p>I hate the term "Best Practices" for two important reasons.  First, in an attempt to be concise the eliminate the most import information: the reasoning.  They are often just the call-to-action statement. and they are often passed down as policy.  Some best practices are good practices (for example pre-flight checklist) when applied to the correct situation.  But without the reasoning statement, it is hard to tell if the practice can be applied to other situations.  If I had to apply a pre-flight checklist before starting to code then I would waste a huge amount of time.</p>

<!-- more -->


<p>Second, best practices eliminate critical thinking.  With a misnomer like "Best Practices" it is not surprising that they are not questions.  And in most situation questioning a "Best Practice" is taken as an affront to the person/department that introduced the Best Practice.  I am not sure why this is, because very rarely is a Best Practice the best practice for every situation.  But since they defy questioning once instituted they become technical dept when they outlive their usefulness.</p>

<p>Instead of "Best Practices" I prefer "Pro Tips."  But the name itself is not as important as to how it is presented.  In order for me to consider a "Pro Tip" it must have three parts: a list of benefits, a list of drawbacks, and description of behavior.</p>

<h2>A best practice: Always backup your work using git</h2>

<p>I do not think that any software engineer is going to argue that backing up work is a good thing.  But by phasing it this way the problem because that "git" becomes an afterthought and therefore an annoyance.</p>

<h2>A Pro Tip: Use git as a journal</h2>

<p>Using git as a backup mechanism is a good thing.  But it is better to use git to journal what you are doing.  So instead of work for an entire day, committing everything at a single time, and then pushing everything at once you should do a single complete thing, and commit that.  Usually commits happend every 5 to 10 minutes, but they are generally self contained.</p>

<p>Benefits:</p>

<ol>
<li>Your work is backed up</li>
<li>You and others can see your train of thought</li>
<li>You can return of any point and attempt other options</li>
<li>You eliminate the fear of trying new things</li>
<li>Focused work</li>
</ol>


<p>Drawbacks:</p>

<ol>
<li>You have to know git to make the most of it</li>
<li>You have to take the time to make smaller commits</li>
<li>You have to push more often</li>
<li>You might have to start branching in order to keep organized</li>
<li>Difficult for messy thinkers (tinkerers)</li>
</ol>


<p>See: a pro tip is a bit longer, and more detailed, but at the same time it is more convincing.  The reader can then choose when and how to try the tip, and also is free to adapt the tip to their given situation.  For example: a developer is going to use git differently then a designer; but git could be useful for both.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The "Everyone else's job is easy" paradox]]></title>
    <link href="http://jkamenik.github.com/blog/2012/05/19/the-everyone-else-s-job-is-easy-paradox/"/>
    <updated>2012-05-19T00:00:00-04:00</updated>
    <id>http://jkamenik.github.com/blog/2012/05/19/the-everyone-else-s-job-is-easy-paradox</id>
    <content type="html"><![CDATA[<p>The "Everyone else's job is easy" is a easy trap to fall into and an almost impossible trap to get out of.  My point is best illustrated using the stereotypical Employee/IT relationship.</p>

<p>The stereotype from the Employee's perspective is this "I hate dealing with IT.  They are a bunch of asses, and never do things right, and my computer is alway worse after they leave then it was with the problem that I called them for.  What is their problem?  It is their f'n job to keep these computers working so that I can do my job.  I have no interest in working this weekend because IT was not able to get my computer fixed in a reasonable amount of time.  When ever I walk by their desk they are always goofing off, if they only did their job I could do mine, how hard could it be."</p>

<!-- more -->


<p>The stereotype from the IT's perspective is this "I have to fix everyone's stupid computer.  If only they would read that Wiki article I emailed about the proper way to do this thing then I wouldn't have to keep fixing things.  I tried to prevent these kind of issues by not giving admin rights to users, but they always need to install some piece of crap software, and they won't take the time to learn to take responsibility.  After all with great power comes great responsibility, and I see none of it.  In addition to keeping everyone's computer working all the damn time I also have to keep all the internal and external services running.  Besides most of the time these people are on the phone chit-chatting, or standing around the water cooler; clearly their job easy enough for a monkey, so why should I rush."</p>

<h2>The problem</h2>

<p>It was a pretty extreme example, but I bet that everyone has acted this way to another individual at least one.  How could you not, after all when tentions are high and emotions are frayed devaluation of other is a natural defense.  And though it is a natural defense it is certainly not an acceptable one.</p>

<p>I am certainly no Psychologist, but here are some ways I have found to prevent the escalation.</p>

<h2>1. Understand how hard everyone's job actually is</h2>

<p>I term if difficultly, both mentally and physically here are the jobs in order from most difficult to least.</p>

<ol>
<li>Bering Straight Fishermen</li>
<li>Any other Fishermen</li>
<li>Logger</li>
<li>Political leader/Dictator</li>
<li>Fugitive</li>
<li>Mangers (above you in the company)</li>
<li>Everyone else's Job</li>
<li>Your job</li>
</ol>


<p>Yep, once you understand that more then likely the person that you are dealing with has a more difficult job then you do then it is easier to compromise.</p>

<h2>2. Humanize</h2>

<p>This is hands down the hardest thing to do when nerves are frayed, but remember the other person in the argument is also a human.</p>

<h2>3. Eliminate Cognitive load</h2>

<p>Cognitive load is simply an amount of mental work that must be processed before learning can be accomplished.  For example, it is not uncommon for requests between departments to have to be done in a formal way, like though a task tracking system.  This is completely unacceptable.</p>

<p>If communication between departments has to be done in a formal way then it department HAS to consider every other depart as a customer.  Would you as a customer of Comcast think that it is acceptable to have to login into a Comcast support portal in order to request them to fix your TV?  No, you would call them, or email them, or do something else that is convient to you, and your would let Comcast deal with formalizing the request in a way useful to them.</p>

<p>The same has to be true between departments.  If you are in IT and you have to formally use Autotask, or Zendesk, or anything else then YOU MUST also find a way to get the requests into that system.  Other departments have to be able to call, email, or walk over to YOU and make requests.</p>

<p>But at the same time, other departments are as busy as you, so you have to remember that once asked turnaround can take a while.</p>

<h2>4. Detail the difficulty</h2>

<p>If the other person doesn't know a lot about all your responsibilities then they are more likely to thing of things as easy.  And most of the time everything that is being asked of you is easy, because it is your job and you are good at your job; right?</p>

<p>The problem is usually more likely the amount of stuff you have to do before you can do this one other "easy" thing.  At one company I worked for we liked to call these type of situation marketing fire drills.  Marketing would have a client that promised to buy 200 hundred widgets every year if only the widget has some feature.  But we have 20 other features that have to be implemented before we can start on the new feature is started.</p>

<p>So in this case the difficulty is prioritizing all the "easy" features.  Especially since each market person was responsible for their own projects and did not have a company wide view of things.</p>

<h2>5. Be concise, but be human</h2>

<p>Often times people see conciseness as talking about work and nothing else.  But in my experience more time is wasted talking about work topics then for any other reason.  I don't mean that work topics are a waste of time, but how many time have there been several hours of talk when 15 minutes of actual investigation would have eliminated the need for talk.</p>

<p>What I mean about being concise is only add information if it is relevant.  "Because it is always done this way" is not relevant, no matter what you might think.  So unless you have specific experience keep it to yourself.  Also, raise any relevant questions, and take any relevant advice.</p>

<p>By eliminating the work conversation waste you can and should spend time talking about personal things.  I have always been a huge fan of eating lunch away from the office with co-workers.  It is the best to respect people and be respected.  And by humanizing, barriers can be eliminated.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Problems with Agile Implementation]]></title>
    <link href="http://jkamenik.github.com/blog/2011/01/10/problems-with-agile-implementation/"/>
    <updated>2011-01-10T00:00:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2011/01/10/problems-with-agile-implementation</id>
    <content type="html"><![CDATA[<p>I really like agile programming. It keeps me close to the action, and makes me have to think about my next moves. It also keeps me informed as to what is going on around me. But in my many years of using agile I realize that, though the process itself is very nice, its implementations can tend not to be.</p>

<!--more-->


<p>Problem don't arise from agile itself, but who and how it was implemented. If the implementer's goals do not match the <a href="http://en.wikipedia.org/wiki/Agile_software_development">Agile Manifesto</a> there is little chance of success. I have used <a href="http://en.wikipedia.org/wiki/Scrum_(development)">scrum</a> many times and the most common problems I see are:</p>

<ol>
<li>Agile as Micromanagement</li>
<li>Agile as a Whip</li>
<li>Agile as an Excuse</li>
</ol>


<h3>Agile as Micromanagement</h3>

<h4>It looks like:</h4>

<ol>
<li>Having to break task down into hourly segments of work</li>
<li>Having to break task that logically have to be done by a single person</li>
<li>Having to account for ALL time taken, even time not related to code like attending meetings</li>
</ol>


<h4>Agile tenet misused:</h4>

<ol>
<li>Individuals and interactions over process and tools</li>
<li>Working software over comprehensive documentation</li>
</ol>


<p>This happens when a manager (<a href="http://en.wikipedia.org/wiki/Scrum_(development)#.E2.80.9CChicken.E2.80.9D_roles">chicken role</a>) is the Scrum Master or when the Product Owner has say over implementation specifics. It is a confusion of roles, which in turn leads to a confusion of goals, which in turn leads to over documentation.</p>

<h3>Agile as a Whip</h3>

<h4>It looks like:</h4>

<ol>
<li>Filtering a burn-down on an individual basis</li>
<li>Placing more in the sprint then can be done (but still requiring it all to be done)</li>
<li>Associating points with people (publicly)</li>
<li>Associating number of tasks done with effort</li>
<li>Associating points with hours</li>
<li>Basically anything where measured output is more important then people</li>
</ol>


<h4>Agile tenet misused:</h4>

<ol>
<li>Individuals and interactions over process and tools</li>
</ol>


<p>Anytime you associate numbers with people you have created a <a href="http://en.wikipedia.org/wiki/Crab_mentality">crab mentality</a>. Their focus will stop being on software, but on making their numbers better. Those that are better at number games will succeed, those that are better at software will fail.</p>

<p>Anytime you put your people under undo pressure then simple mistakes are made. This is going to later erode confidence in the team. It is going to happen like this: "you missed a comma in a Javascript file which causes it not to work in IE. That was such a simple mistake to have tested for that I am not sure you are testing any of your code." The problem was caused by 4 hours of sleep in 72 hours of coding at the end of an over-extended sprint. The programmer was nearly delirious. It is shocking it was the only mistake, not that it was a simple mistake!</p>

<p>Unfortunately I have seen this situation start innocent enough, with comments like "we don't want to over work the staff" or "we want to make sure they always have something to do" or "we want them working on the correct things". If the "we" in question is management (<a href="http://en.wikipedia.org/wiki/Scrum_(development)#.E2.80.9CChicken.E2.80.9D_roles">chicken role</a>) then there is probably already micromanagement going on, and Agile is being used as whip to solve the problems created by the bad implementation.</p>

<h3>Agile as an Excuse.</h3>

<h4>It looks like:</h4>

<ol>
<li>"You said it would take XXX. It took YYY. You need to make up the difference out of your own time"</li>
<li>"We cannot slip these date, and you have already pared back the release N sprints ago. You need to put in extra effort"</li>
<li>"Agile is about being agile. Even though we are mid sprint we are radically changing direction, but we are not canceling the sprint or doing sprint planning. We are just swapping out some tasks for others."</li>
<li>"You picked the language. It is now your problem to bring this project to conclusion and under budget."</li>
</ol>


<h4>Agile tenet misused:</h4>

<ol>
<li>Individuals and interactions over process and tools</li>
<li>Responding to change over following a plan</li>
</ol>


<p>These are all excuses I have heard. Each time given by a person in <a href="http://en.wikipedia.org/wiki/Scrum_(development)#.E2.80.9CChicken.E2.80.9D_roles">chicken role</a> (managers) because they are ignoring changes in the field (military term). Every choice has a set of outcomes: some good, some bad. The attempt with agile is not to mitigate bad outcomes, but to allow those outcomes to contribute to the overall direction.</p>

<p>Sometimes the bad outcome will be that something took to long, or that one language/tool was not the correct choice given the problem set. If for every problem that happens the developer has to take their own time, or face embarrassment, to solve the problem then they will stop making choices. Not just choices that might have bad outcomes, but choices altogether. At which point someone in a <a href="http://en.wikipedia.org/wiki/Scrum_(development)#.E2.80.9CChicken.E2.80.9D_roles">chicken role</a> will start making more choices then they should.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to be a bad boss]]></title>
    <link href="http://jkamenik.github.com/blog/2010/12/05/how-to-be-bad-boss/"/>
    <updated>2010-12-05T00:00:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2010/12/05/how-to-be-bad-boss</id>
    <content type="html"><![CDATA[<p>Being a boss is a complicated thing. It is your job to get people to do things, sometimes things they do not want to do. And it is especially complicated in the software industry, where it is like herding cats.</p>

<p>I see a lot of posts on how to be a good boss, but the problem there is that they often forget to mention the things that can and will immediately erode any success you might have had. I am going to assume that as a reader you strive to be a person who others are willing to follow.</p>

<p>Nobody is perfect, so you will probably have done at least one of these things in the past. Or you do then without even knowing. Now is your chance to stop, and be a constructive boss who people want to work for.</p>

<!--more-->


<h2>Be smarmy</h2>

<p>Yep, this is number one.Smarmy people are falsely friendly (think used car dealers). Notice I did not say do not "be mean." As a boss sometimes you will need to be mean, or at least not very nice.  And even that should be kept to a minimum, but it is never OK to be smarmy.  All it does is make people uncomfortable confiding in you, which means they will either find better employment (if they can) or they will sabotage you.</p>

<p>Here are some examples of what I mean by smarmy:</p>

<ul>
<li>Suggest that a problem can be solved by the employee working overtime</li>
<li>Using scrum (or any general meeting) to point out an employee's failure</li>
<li>Joke about firing an employee</li>
<li>Make any sarcastic comment about an employee in the presence of others</li>
<li>Only talking to an employee when you need them to do something (i.e., I am only talking to you because I want something)</li>
</ul>


<p>Some ways to tell that you have already failed at this:</p>

<ul>
<li>All laughter stops when you enter the room</li>
<li>Conversations between you and an employee die quickly</li>
<li>Employees no longer tell you about issues they are having</li>
</ul>


<h2>Be a hypocrite</h2>

<p>A hypocrite is someone who says one thing and thinks or does another. It can be as overt as being prejudiced (racist, sexist, etc...) or as covert as being passive aggressive. Being a hypocrite is risky because when other people find out, you are just being deceitful, and no one wants to deal with that.</p>

<p>One example is saying that code needs to be high quality but not leaving time for testing. Overtly this often resembles explicitly adding a testing phase at the end of coding and then cutting it if coding goes long. Covertly this is often assuming that testing is done as part of coding, but scoffing at longer estimates. Speed and quality have a tenuous relationship. Something done slowly may or may not be of quality, but something quickly is almost never of quality.</p>

<p>The best way not to be a hypocrite is not to bring your values and prejudices into the equation. To do this though you have to understand what your values and prejudices are. In the case of the no testing, quality is explicitly stated as the important part, but speed is implicitly stated as the important factor. More specifically speed at the cost of quality is stated as the import factor. To avoid this, it is important to explicitly state the importance of all three tenets of the project triangle: that way you avoid the embarrassing case where one tenet goes to 0 unintentionally. See: <a href="http://en.wikipedia.org/wiki/Project_triangle">Project Triangle</a>.</p>

<h2>Be arrogant</h2>

<p>I am not talking about being hard headed or stubborn. I am talking about being truly arrogant. Stubborn people will listen to reason, assuming the opposing argument is good enough; arrogant people cannot be directly convinced. There are two forms of arrogance to watch out for: arrogance of idea, and arrogance of presenter. Arrogance of idea is simply dismissing an idea because it is in direct conflict with your internal ideas or values. Arrogance of presenter is rejecting an idea because of who presented it.</p>

<p>Two engineers approach you with different solutions to the problem of releasing on time: one says to keep the feature set and stop doing unit testing, and the other says reduce the feature set but keep the unit testing. Which do you choose? If you choose "keep the feature set" then you wrong. If you choose "keep the unit testing" you are also wrong. If you chose either (based on only the information provided) then the choice you made was based on you internal values only and not based on the problem being presented.</p>

<p>In the context of work the truth is that new hires probably know more about a given framework than you, and certainly will have a different perspective on how things should be done. They are probably offering you this knowledge, because they have already encountered the problem you are now seeing and have found an appropriate solution. It is tempting to dismiss this simply because a new hire presented it and they don't know the full business impact of their suggestion. But ask yourself: if the system architect presented you with this idea would you accept it? If yes, then you are suffering from arrogance of presenter and should tread lightly.</p>

<p>I suggest instead that you judge an idea (never a presenter) on its merits in the context of only the problem (never on facts you assume to be true). And make sure you are consciously and actively judging the idea, and you are not adding your own problem or values.</p>

<h2>Offer post hoc rewards</h2>

<p>A post hoc reward is a reward given after work is complete. In physical work the effects of post hoc rewards are well known and lead to better results, but in knowledge work offering post hoc rewards has a distracting effect. Work will take longer and be of lower quality. It will make employees very good at performing work that maximizes their incentives, and not at developing a quality product. Be aware that offering reward for work done defines a tangible value for that work, which may demoralize an employee who feels under compensated as a result.</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/u6XAPnuFjJc" frameborder="0" allowfullscreen></iframe>


<p>Intrinsic rewards can and should be used. These are things that are given universally and without reservation. Basic examples would be vacation, and health benefits. Other examples would be a free day to work on any project the employee wanted, or free soda/tea/coffee. These intrinsic benefits help endear you and the company to the employee.</p>

<h2>Accept estimates less than 4 hours</h2>

<p>This may only be true in software, but tasks never take less than 4 hours. A task is really an atomic complete chunk of work, so to be considered complete it must be coded, tested, reviewed, and committed. However, some employees will claim they finish tasks sooner. Often these people are cutting corners (not testing, or not getting a review) or they are doing a bunch of tasks that should have logically been considered one task.</p>

<p>Either way they are playing a game with the numbers to get their counts higher, which means that you are probably rewarding over aggressive estimates, and have a huge defect backlog. Well done!</p>

<h2>Assume research is intrinsic</h2>

<p>I have seen this bite so many bosses, where they say something like "tasks cannot take longer then 4 days." The problem is that now you have employees trying to split tasks that have little or no real research done. So when it comes time to implement you have a bunch of small tasks that are too small to warrant research, but no real clear direction because no real research was done.</p>

<p>Estimates of several weeks or months are fine early in the process. But enough time needs to be given to investigate feasibility prior to high level scoping. Prior to implementation, time should be given to research an implementation and split the tasks out. All of this time should have been blocked in as a single unit during high level scoping.</p>

<h2>Require meetings</h2>

<p>Meetings cost time and money. And in addition to the meeting itself there is time before the meeting where people ramp down, and time after the meeting when people need to ramp back up again. Both ramping phases are about 10 minutes each.</p>

<p>To monetize this for you, let's say you have 12 employees going to a meeting, and on average they make $24 an hour, and the meeting is 15 minutes (a scrum). The total chunk of wasted time is 35 minutes or about $14 per employee. For the company that means you wasted $168. And that does not include any prep time employees had to take.</p>

<p>In general, meetings need to be kept to a minimum and kept on track because they will end up being the single most costly event both in terms of money and productivity.</p>

<h2>Watch your employees work</h2>

<p>Nobody is comfortable being scrutinized. Do not set up your office so that you are looking into your employees' cubes, and don't wonder around aimlessly, and never under any circumstances hover. By doing this you are showing your employees that the most important thing is to look busy (a function of the keyboard and finger), not to solve problems (a function of the brain). At the point where your employees feel scrutinized they will work just hard enough to not get fired, and will partake in CYA games.</p>

<p>The best example is Office Space the movie. Little more needs to be said.</p>
]]></content>
  </entry>
  
</feed>
