<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: octopress | Random Software Inklings]]></title>
  <link href="http://jkamenik.github.com/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://jkamenik.github.com/"/>
  <updated>2014-02-17T20:04:13-05:00</updated>
  <id>http://jkamenik.github.com/</id>
  <author>
    <name><![CDATA[John T. Kamenik]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Drafts]]></title>
    <link href="http://jkamenik.github.com/blog/2014/01/21/drafts/"/>
    <updated>2014-01-21T11:38:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2014/01/21/drafts</id>
    <content type="html"><![CDATA[<p>Jekyll supports unpublished posts, but Octopress does not make it clear.  This is how I fixed that for my own blog.</p>

<!-- more -->


<p>Octopress actually does support "published: false" in the front matter.  And because it based on Jekyll it means that those posts will be available in "preview" but will be ignored when the site is generated/published.</p>

<p>My main care is that I know what I can do with a post in 3 to 4 months.  So I added the the published flag to the generated frontmatter of every new post.</p>

<p>```ruby Rakefile</p>

<h1>around line 93, for me</h1>

<p>task :new_post, :title do |t, args|
  # code omitted
  open(filename, 'w') do |post|</p>

<pre><code>post.puts "---"
post.puts "layout: post"
post.puts "title: \"#{title.gsub(/&amp;/,'&amp;amp;')}\""
post.puts "date: #{Time.now.strftime('%Y-%m-%d %H:%M')}"
post.puts "comments: true"
post.puts "toc: false"
# add published flag to the template
post.puts "published: false"
post.puts "categories: "
post.puts "  - cat1"
post.puts "---"
post.puts
post.puts "Summary"
post.puts
post.puts "&lt;!-- more --&gt;"
post.puts
post.puts "Post text"
</code></pre>

<p>  end
end
```</p>

<p>I also had to update <code>rake push</code> to regenerate the full site before deployment.  This is because preview works on the same directly that is copied to production.  And since you can preview unpublished posts they will be visible in production, unless you run <code>rake generate</code> first.</p>

<p>```ruby Rakefile</p>

<h1>around line 254</h1>

<p>multitask :push do
  # add the generate rake task first
  Rake::Task[:generate].invoke
  # code omitted
end
```</p>

<p>Additionally I want to know visually when a page is a draft.  For that I add "Draft: " to the title.</p>

<p>```html _includes/article.html
</p>

<h1>in the <header> tag</h1>

<p>{% if index %}
  # add {% if post.published == false %}Draft: {% endif %}
  <h1 class="entry-title"><a href="{{ root_url }}{{ post.url }}">{% if post.published == false %}Draft: {% endif %}{% if site.titlecase %}{{ post.title | titlecase }}{% else %}{{ post.title }}{% endif %}</a></h1>
{% else %}
  # add {% if page.published == false %}Draft: {% endif %}
  <h1 class="entry-title">{% if page.published == false %}Draft: {% endif %}{% if site.titlecase %}{{ page.title | titlecase }}{% else %}{{ page.title }}{% endif %}</h1>
{% endif %}

```</p>

<p>Now you will see "Draft: " in front of any unpublished posts.</p>

<h2>Manual management</h2>

<p>A few additional things I like to do, but I haven't automated yet are:</p>

<ol>
<li>Add "-draft" to the file name.</li>
<li>Change the publish date to the day I publish the article

<ol>
<li>This involves changing the file name as well as the front matter</li>
</ol>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress TOC]]></title>
    <link href="http://jkamenik.github.com/blog/2013/07/07/octopress-toc/"/>
    <updated>2013-07-07T14:35:00-04:00</updated>
    <id>http://jkamenik.github.com/blog/2013/07/07/octopress-toc</id>
    <content type="html"><![CDATA[<p>I wanted to add a Table Of Contents (TOC) to some of my longer blog entries.  Here is how I did it.</p>

<!-- more -->


<p>Full credit it due to a google search which turned up this <a href="https://github.com/bmc/brizzled/blob/master/source/_posts/2012-02-04-generating-a-table-of-contents-in-octopress.markdown">https://github.com/bmc/brizzled/blob/master/source/_posts/2012-02-04-generating-a-table-of-contents-in-octopress.markdown</a>.</p>

<p>I followed it to get an idea of what I wanted, but diverged a lot.  What I wanted was:</p>

<ol>
<li>The TOC to be driven by a <code>toc: true</code> in the YML front matter of any page</li>
<li>The TOC to be the first item in the sidebar.</li>
<li>The TOC to contain only the h2 tags and below (Ignoring the H1 page title)</li>
</ol>


<h2>1. Add JS TOC code</h2>

<p>Download the <a href="http://fuelyourcoding.com/scripts/toc/">jQuery TOC plugin</a> and move the js file into javascripts directory.</p>

<p>Add the following code to the head.</p>

<p>```html _includes/custom/head.html</p>

<script src="http://code.jquery.com/jquery-1.10.1.min.js"></script>


<script src="/javascripts/jquery.tableofcontents.min.js" type="text/javascript"></script>


<script src="/javascripts/generate-toc.js" type="text/javascript"></script>


<p>```</p>

<p>This downloads jQuery from a CDN, loads the TOC plugin and will eventually load our driver code.</p>

<h2>2. Write the driver and trigger code</h2>

<p>Create the driver code:</p>

<p>```javascript javascripts/generate-toc.js
function generateTOC(heading) {
  var container = jQuery("<section></section>");
  var div = jQuery("<ul id='toc'></ul>");
  var content = jQuery('.sidebar');</p>

<p>  if (heading != undefined &amp;&amp; heading != null) {</p>

<pre><code>container.append('&lt;h1 class="tocHeading"&gt;' + heading + '&lt;/h1&gt;');
</code></pre>

<p>  }</p>

<p>  div.tableOfContents("#content",{startLevel: 2});
  container.append(div);
  content.prepend(container);
}
```</p>

<p>Adjust the footer to trigger the TOC is needed:</p>

<p>```html _includes/custom/after_footer.html

```</p>

<p>The <code>page</code> variable is the YML front mater hash so we can check for <code>toc</code> to ensure the trigger code is only included on pages that want a TOC.</p>

<h2>3. Adjust the generators</h2>

<p><code>rake new_post</code> and <code>rake new_page</code> generate a stub page with some YML head matter so it make sense for me to adjust the generators to include <code>toc</code>.</p>

<p>Just add something like this to the <code>Rakefile</code>:</p>

<p>```ruby
task :new_post ... do
  ...
  open(...) do |post|</p>

<pre><code>...
post.puts "toc: false"
...
</code></pre>

<p>  end
end
```</p>
]]></content>
  </entry>
  
</feed>
