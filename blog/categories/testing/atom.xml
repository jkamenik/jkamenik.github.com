<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: testing | Random Software Inklings]]></title>
  <link href="http://jkamenik.github.com/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://jkamenik.github.com/"/>
  <updated>2012-11-22T22:54:32-05:00</updated>
  <id>http://jkamenik.github.com/</id>
  <author>
    <name><![CDATA[John T. Kamenik]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JS Unit Testing using YUI]]></title>
    <link href="http://jkamenik.github.com/blog/2010/12/15/js-unit-testing-using-yui/"/>
    <updated>2010-12-15T00:00:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2010/12/15/js-unit-testing-using-yui</id>
    <content type="html"><![CDATA[<p>Ok, Selenium was a partial success that you can read about <a href="http://randomsoftwareinklings.blogspot.com/2010/11/learning-selenium.html">here</a>, but it really was harder then I wanted it to be and it required a lot of setup for only a little bit of testing. I noticed that a project that I use a lot ExtJS uses a modified version of YUI Test. So I converted my Selenium test example to YUI Test.</p>

<!-- more -->


<p>My initial impression was confusion because you have to download the entire YUI 2 suite just get to get the <a href="http://developer.yahoo.com/yui/yuitest/">test tools</a>. Also, when you download the entire suite they are many different copies of the same file in various stages of minification. But following the documentation I boiled down exactly what I needed and threw away the rest. I put all the code for my test <a href="https://github.com/jkamenik/yui-test-example">here</a> so you can follow along.</p>

<p>You will need the following files from the YUI archive:</p>

<ul>
<li>build/logger/assets/logger.css</li>
<li>build/logger/logger.js</li>
<li>build/yuiloader-dom-event/yuiloader-dom-event.js</li>
<li>build/yuitest/assets/testlogger.css</li>
<li>build/yuitest/yuitest.js</li>
</ul>


<p>Create an HTML file that includes the css and js files:
<div><script src='https://gist.github.com/1151464.js?file=index-header.html'></script>
<noscript><pre><code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;logger.css&quot;&gt;
&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;testlogger.css&quot;&gt;

&lt;!-- Test runner code --&gt;
&lt;script src=&quot;yahoo-dom-event.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;logger.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;yuitest.js&quot;&gt;&lt;/script&gt;</code></pre></noscript></div>
</p>

<p>The HTML will also need to instantiate the test logger and run the test runner global. I bound the test run to a button so I could control when it ran:
<div><script src='https://gist.github.com/1151464.js?file=index-body.html'></script>
<noscript><pre><code>&lt;body&gt;
    &lt;input onclick=&quot;javascript:runAllTests()&quot; type=&quot;button&quot; value=&quot;Run Tests&quot; /&gt;
    
    &lt;script&gt;
        new YAHOO.tool.TestLogger();
        
        function runAllTests(){
            YAHOO.tool.TestRunner.run();
        }
    &lt;/script&gt;
&lt;/body&gt;</code></pre></noscript></div>
</p>

<p>Now that we have a <code>YAHOO.tool.TestRunner</code> we need to add a test that can be run.  Instantiate a <code>new YAHOO.tool.TestCase</code> and add it to the TestRunner. All a TestCase needs is a name and a bunch of functions that start with "test". Everything else is automatic. Below is a simplified version of the <a href="https://github.com/jkamenik/yui-test-example/blob/master/test.js">full file</a>.
<div><script src='https://gist.github.com/1151464.js?file=test.js'></script>
<noscript><pre><code>var assert = YAHOO.util.Assert;

YAHOO.tool.TestRunner.add(new YAHOO.tool.TestCase({
  name: 'Tests for string',
  
  test_true: function(){
    var test = String(true);
    assert.isString(test);
    assert.areEqual('true',test);
  }
});</code></pre></noscript></div>
</p>

<h2>Conclusion</h2>

<p>Though Selenium is more automated that comes at the cost of being more complicated then testing should be. If I were a team of programmers then sure setting up and maintaining Selenium Remote controls would be a small part of the overall effort, but since I am not a team of programmers I think it is overkill.</p>

<p>What I really need is an easy to run, easy to write, repeatable, unit testing framework in JS. I do the leg work on pointing my various browsers at the html and reviewing the results. When things get big enough that I need to setup a continuous integration server, or I have a QA department, then I will give Selenium another go. For now YUI test is the way to go.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Selenium]]></title>
    <link href="http://jkamenik.github.com/blog/2010/11/18/learning-selenium/"/>
    <updated>2010-11-18T00:00:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2010/11/18/learning-selenium</id>
    <content type="html"><![CDATA[<h2>Background</h2>

<p>My basic need is to find a platform where I can test FF, IE, and Safari on Windows, Linux, and OS X.  I use OS X as my platform, and Safari or Webkit as my environment.  I don't like Windows or IE.  Linux is OK, but I like OS X because it just works the way I want.  And I find FF to be slow, and Firebug which is needed to debug we pages causes rendering changes and timing issues (most notably causing FF to crash).</p>

<!--more-->


<p>Ideally I want the testing environment:</p>

<ol>
<li>To be developed in Safari on OS X</li>
<li>To be able to test both internal libraries and rendered UI</li>
<li>To use unit tests to test internal libraries</li>
<li>To use interactive tests to test rendered UI</li>
<li>To use the unit/interactive tests as regression system moving forward</li>
<li>To write the tests once on my browser of choice</li>
<li>To run the tests on all combinations of browser and platform.</li>
<li>To not be bogged down by the testing framework</li>
<li>To be free, or very cheap</li>
</ol>


<p>From my research it looked like Selenium did basically exactly what I needed. And unfortunately was the only real option.  There were plenty of options for taking screen shots of public sites (which mine isn't, yet) and comparing those between browsers.  And there are several options for unit testing javascript, but only Selenium did both and could be run on my own hardware.</p>

<h2>Implementation</h2>

<p>From my reading it looked like I wanted to use the IDE to create the tests, and remote controls to run the browsers.  Eventually I need to scale to Selenium Grid, but that is for later discussion.</p>

<h3>Test code</h3>

<p>This is the sample file that I created to test.</p>

<p><div><script src='https://gist.github.com/1151478.js?file=code.html'></script>
<noscript><pre><code>&lt;html&gt;
&lt;body&gt;
&lt;script&gt;
Namespace = {
  test: function(item){
    return item == true;
  }
};

function String(item){
  if(!item.push &amp;&amp; typeof(item) === 'object'){
    return item.name || '';
  }
  return ''+item; //yup this is faster then toString
}

function Int(item){
  return parseInt(item,10);
}

function Array(item){
  var type = typeof(item);

  if(type === 'string'){
    return item.split(&quot;\n&quot;);
  } else if(type === 'object'){
    if(item.push &amp;&amp; item.length &amp;&amp; item.concat){
      return item;
    }
  }
  return [item];
}
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre></noscript></div>
</p>

<h3>Using the IDE</h3>

<p>It took a long time to understand this tool, since I had no background in Selenium.  The basic premiss is that each file is a single test case, which is a set of tests.  Each test is a grouping of three items: the action, the target, and the expected result.  It natively creates a 3 column HTML table, which it can also run, but personal preference is that use the IDE to export the basic test into a different language.</p>

<p>I am a rails developer, and am familar with rspec so I use the IDE to run the tests to make sure they work, but then I transfer it to rspec since it is a more expressive test framework.  The downside is that you have to use a Remote Control to run the test, which adds an extra level of complications.  We will get to the Remote Control later.</p>

<p>A basic HTML test looks like this:
<div><script src='https://gist.github.com/1151478.js?file=test.html'></script>
<noscript><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xml:lang=&quot;en&quot; lang=&quot;en&quot;&gt;
&lt;head profile=&quot;http://selenium-ide.openqa.org/profiles/test-case&quot;&gt;
&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;
&lt;link rel=&quot;selenium.base&quot; href=&quot;file:///Users/jkamenik/Desktop/sel_test.html&quot; /&gt;
&lt;title&gt;Unit Testing&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;table cellpadding=&quot;1&quot; cellspacing=&quot;1&quot; border=&quot;1&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;td rowspan=&quot;1&quot; colspan=&quot;3&quot;&gt;Unit Testing&lt;/td&gt;&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
 &lt;td&gt;open&lt;/td&gt;
 &lt;td&gt;file:///Users/jkamenik/Desktop/selenium/sel_test.html&lt;/td&gt;
 &lt;td&gt;test&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;td&gt;verifyEval&lt;/td&gt;
 &lt;td&gt;this.browserbot.getUserWindow().Int(1)&lt;/td&gt;
 &lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;td&gt;verifyEval&lt;/td&gt;
 &lt;td&gt;typeof(this.browserbot.getUserWindow().Int(1))&lt;/td&gt;
 &lt;td&gt;number&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre></noscript></div>
</p>

<p>There really is nothing more to it then that.  The one thing to note is that the test uses <code>verifyEval</code> which takes a JavaScript string.</p>

<p>Liquid error: undefined method `lstrip' for #<Array:0x007f8310846f58></p>

<p>Liquid error: undefined method `lstrip' for #<Array:0x007f831084d470></p>

<h2>Using RSpec</h2>

<p>The IDE is a great way to test scripts live, but for any programmer it is going to be easier to use a testing framework doing it programmatically.  As a rails guy I prefer RSpec so that is what I use.</p>

<h3>Installing</h3>

<p>This package requires ruby-gems, rspec, and selenium-client.  I am going to assume you have ruby-gems installed already.  The others are installed like this:
<div><script src='https://gist.github.com/1151478.js?file=install.sh'></script>
<noscript><pre><code>sudo gem install rspec 
sudo gem install selenium-client</code></pre></noscript></div>
</p>

<h3>Converting</h3>

<p>When using Rspec the only real thing to remember is that there are no assert<em> or verify</em> methods.  The reason is that Rspec itself is a testing framework so it will have it own version of assert and verify (in this case should).</p>

<p>The IDE has a great feature in that it converts the HTML test into a rspec test for you.  It isn't a great format, but it is better then nothing and is a good place to start.
<div><script src='https://gist.github.com/1151478.js?file=selenium.rb'></script>
<noscript><pre><code>require &quot;rubygems&quot; 
gem &quot;rspec&quot; 
gem &quot;selenium-client&quot; 
require &quot;selenium/client&quot; 
require &quot;selenium/rspec/spec_helper&quot; 
require &quot;spec/test/unit&quot; 

describe &quot;array_test&quot; do 
attr_reader :selenium_driver 
alias :page :selenium_driver 

before(:all) do 
  @verification_errors = [] 
  @selenium_driver = Selenium::Client::Driver.new \ 
    :host =&gt; &quot;localhost&quot;, 
    :port =&gt; 4444, 
    :browser =&gt; &quot;*chrome&quot;, 
    :url =&gt; &quot;file:///Users/user/Desktop/selenium&quot;, 
    :timeout_in_second =&gt; 60 
end 

before(:each) do 
  @selenium_driver.start_new_browser_session 
end 

append_after(:each) do 
  @selenium_driver.close_current_browser_session 
  @verification_errors.should == [] 
end 

it &quot;test_array_test&quot; do 
  page.open &quot;file:///Users/jkamenik/Desktop/selenium/index.html&quot; 

  begin 
    (&quot;1&quot;).should == page.get_eval(&quot;this.browserbot.getUserWindow().Array([1])&quot;) 
  rescue ExpectationNotMetError 
    @verification_errors &lt;&lt; $! 
  end

  begin 
    (&quot;object&quot;).should == page.get_eval(&quot;typeof(this.browserbot.getUserWindow().Array(1))&quot;) 
  rescue ExpectationNotMetError 
    @verification_errors &lt;&lt; $! 
  end 
end 
end
</code></pre></noscript></div>
</p>

<p>Liquid error: undefined method `lstrip' for #<Array:0x007f831085e2c0></p>

<p>Liquid error: undefined method `lstrip' for #<Array:0x007f831085ada0></p>

<h3>Remote Controls</h3>

<p>A remote control is what Selenium uses to execute the test.  The IDE comes with it built-in, but it is tied to FireFox.  To use IE, Safari, or Chrome you need to download the remote control software: <a href="http://seleniumhq.org/projects/remote-control">http://seleniumhq.org/projects/remote-control</a>.  This software is just a Java server that opens your machine on port 4444 (by default) to allow Selenium clients to run tests.  Each client gets its own browser instance to run the tests in.</p>

<p>Liquid error: undefined method `lstrip' for #<Array:0x007f8310869e40></p>

<p>Liquid error: undefined method `lstrip' for #<Array:0x007f83110394b8></p>

<p>Liquid error: undefined method `lstrip' for #<Array:0x007f831103ce88></p>

<h3>Putting it all together</h3>

<p>By default RSpec provides no runner code and the code the IDE produces is not standalone.  This is not a problem since installing RSpec into a rails app installs script/spec.  I have copied the runner code here so make it easier.
<div><script src='https://gist.github.com/1151478.js?file=runner.rb'></script>
<noscript><pre><code>#!/usr/bin/env ruby 
if ARGV.any? {|arg| %w[--drb -X --generate-options -G --help -h --version -v].include?(arg)} 
  require 'rubygems' unless ENV['NO_RUBYGEMS'] 
end 
require 'spec/autorun' 
exit ::Spec::Runner::CommandLine.run</code></pre></noscript></div>
</p>

<p>I am going to assume the RSpec runner code is called spec and the test file is called test.rb.  To run this test from the command line do the following:</p>

<p><code>ruby
ruby spec test.rb
</code></p>

<p>Assuming you followed all the steps the test should have opened Firefox, executed a page, run the tests, closed Firefox, and returned the results.  Now you can add more tests and have Selenium execute them.</p>

<h2>Related Research</h2>

<ol>
<li>Using Selenium Grid</li>
<li>Using Chrome, or IE</li>
<li>Using a Grid to run the same test in all browsers on all OSs</li>
</ol>

]]></content>
  </entry>
  
</feed>
