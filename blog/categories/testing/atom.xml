<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: testing | Random Software Inklings]]></title>
  <link href="http://jkamenik.github.com/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://jkamenik.github.com/"/>
  <updated>2013-07-08T08:27:42-04:00</updated>
  <id>http://jkamenik.github.com/</id>
  <author>
    <name><![CDATA[John T. Kamenik]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Factory Girl Automatic Tests]]></title>
    <link href="http://jkamenik.github.com/blog/2012/03/09/factory-girl-automatic-tests/"/>
    <updated>2012-03-09T00:00:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2012/03/09/factory-girl-automatic-tests</id>
    <content type="html"><![CDATA[<p>Early in a project I started to use factory girl without fully understanding it. After many months of creating steps like <code>Given /^(\d+) blog exists$/</code> and <code>Given /^the following blogs exist:$/</code> I started to come up with generic functions that would build those steps.</p>

<p>Stupid me for not checking that factory girl already does something like that. All you have to do is include factory girl's <a href="http://github.com/thoughtbot/factory_girl/blob/master/lib/factory_girl/step_definitions.rb">step_definition</a> file:</p>

<p><code>ruby env.rb
requie 'factory_girl/step_definitions'
</code></p>

<p>Once you start using FactoryGirl correctly there are a world of new features that can make your steps both cleaner and more concise. Here are some tips I have found via trial and error.</p>

<!-- more -->


<h1>Tip 1: Do not reinvent the wheel</h1>

<p>Factory girl will create steps for all factories that you have register.</p>

<p>```text example_steps.feature
Scenario: Showing example steps
  Given the following blogs exist:</p>

<pre><code>| name       |
| first blog |
</code></pre>

<p>  Given a blog exists with a name of "first blog"
  Given a blog exists
  Given 41 blogs exist
  Given 14 blogs exist with a description of "Test"
```</p>

<h1>Tip 2: Use association, Do not add more steps then are needed</h1>

<p>Factory girlassociation are automatically created before the factory is created and they are automatically linked. It only supports the <strong>belongs_to</strong> behavior, so keep that in mind.</p>

<p>Using the "<strong>Given the following XXX exist</strong>" step you can define attributes, on the theassociation, in the table. If we leave the association out then a default is created. If we define an attribute then it will be found or created using that attribute.</p>

<p>Lets say you have a product and it can belog to a category. You do not need to create a category.</p>

<p>```ruby product_category.rb
class Category &lt; ActiveRecord::Base
end</p>

<p>class Product &lt; ActiveRecord::Base
  belongs_to :category
end</p>

<p>FactoryGirl.define do
  factory :category do</p>

<pre><code>name 'Foo'
</code></pre>

<p>  end</p>

<p>  factory :product do</p>

<pre><code>association :category

name 'Bar'
</code></pre>

<p>  end
end
```</p>

<p>```text product_category.feature
Scenario: Bad
 Given a category exists with a name of "Foo"
 Given a product exists with a category of "Foo"</p>

<p>Scenario: Good
  Given the following products exist:</p>

<pre><code>| name | category  |
| Foo  | name: Bar |
</code></pre>

<p>```</p>

<h1>Tip 3: Attaching files via CarrierWave</span></h1>

<p>Since cucumber is a text file it doesn't make much sense for you to define full files in steps. It also doesn't really make sense to embed full file paths in the tests. Instead, you can use a Transient attribute and some code so that in cucumber you define a file name and in the factory it converts to an actual file.</p>

<p>```ruby file_product.rb
class Product &lt; ActiveRecord::Base
  mount_uploader :file, FileUploader
end</p>

<p>FactoryGirl.define do
  factory :product do</p>

<pre><code>ignore do
  file_name 'small_image.png'
end
file { File.open(Rails.root.join("path/to/files",file_name)) unless file_name.blank? }
</code></pre>

<p>  end
end
```</p>

<p>```text file_product.feature
Scenario: Products
  Given a product exists</p>

<pre><code># 1 product with an included file whose file_name was "small_image.png"
</code></pre>

<p>  Given the following products exist:</p>

<pre><code>| name      | file name     |
| No image  |               |
| Big image | big_image.png |
</code></pre>

<p>```</p>

<h1>Tip 4: Fixing a circular dependency between two models</span></h1>

<p>Lets say you have a Store model and User model. And a User can both work at and own a Store. If you put associations in both the User and the Store model then each will try to create the other, infinitely. We can reuse the transient method as before to break the circle.</p>

<p>The trick is to avoid defining an association in both factories, but instead use a transient attribute in one factory to simulate the behavior of an association. Also, since transient attributes are not likely to have the same level of sophistication as the associations you should use the association to define the more complex of the two models.</p>

<p>```ruby  user_store.rb
class User &lt; ActiveRecord::Base
  belongs_to :store
  has_many   :stores, :foreign_key => 'owner_id'
end</p>

<p>class Store &lt; ActiveRecord::Base
  belongs_to :owner, :class_name => 'User'
end</p>

<p>FactoryGirl.define do
  factory :user do</p>

<pre><code>name 'John Doe'

ignore do
  store_name nil
end
store {Store.find_or_create_by_name(store_name || 'Test store')}
</code></pre>

<p>  end</p>

<p>  factory :store do</p>

<pre><code>name 'Test store'

association :owner, :factory =&gt; :user
</code></pre>

<p>  end
end
```</p>

<p>```text user_store.feature
Scenario: 2 users named 'John Doe', and 2 stores named "Test store"
  Given a user exists
  Given a store exists</p>

<p>Scenario: 2 users both working at the same store
  Given the following users exist:</p>

<pre><code>| name     | store name |
| John Doe | Test store |
| Jane Doe | Test store |
</code></pre>

<p>Scenario: 2 stores both owned by the same person
  Given the following stores exist:</p>

<pre><code>| name     | owner          |
| MD Store | name: John Doe |
| CA Store | name: John Doe |
</code></pre>

<p>```</p>

<h1>Tip 5: Fixing a circular dependency between the same model</span></h1>

<p>Let say you have a Category model, and that model can belong to another Category (a tree) then you cannot use an association or you get the same infinite recursion issue as before. Here we can use a transient attribute along with an <strong>after_create</strong> hook to simulate the behavior we want.</p>

<p>```ruby category.rb
class Category &lt; ActiveRecord::Base
  acts_as_nested_set
end</p>

<p>FactoryGirl.define do
  factory :category do</p>

<pre><code>name 'Foo'

ignore do
  parent nil
end
after_create do |category,attributes|
  unless attributes.parent.blank?
    parent = Category.find_by_name(attributes.parent)
    category.move_to_child_of(parent)
  end
end
</code></pre>

<p>  end
end
```</p>

<p>```text category.feature
Scenario: Has no parents
  Given the following categories exist:</p>

<pre><code>| name |
| Foo  |
| Bar  |
| Baz  |
</code></pre>

<p>Scenario: Nested tree
  Given the following categories exist:</p>

<pre><code>| name | parent |
| Foo  |        |
| Bar  | Foo    |
| Baz  | Bar    |
</code></pre>

<p>  # + Foo
  # |+ Bar
  #  |- Baz
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CI server using Firefox]]></title>
    <link href="http://jkamenik.github.com/blog/2011/11/30/ci-server-using-firefox/"/>
    <updated>2011-11-30T00:00:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2011/11/30/ci-server-using-firefox</id>
    <content type="html"><![CDATA[<p>If you are like me, you always setup a CI to ensure things that you already finished are not broken by things you are currently doing. And if you are like me, you use <a href="http://github.com/jnicklas/capybara">capybara</a>, <a href="http://github.com/lanej/selenium-webdriver">selenium-webdriver</a>, and <a href="http://www.mozilla.org/en-US/firefox/new/">firefox</a> to actually test the results in a browser. The rub comes when the CI server (running headless) needs to run firefox, which needs a screen.</p>

<p>Virtual Frame Buffer (xvfb) is a great package. All it does is provide an X11 interface in memory instead of requiring a screen. Below I detail what I do on Ubuntu, but it should work the same on any Linux distro.</p>

<!-- more -->


<h3>Installing Firefox</h3>

<p>{% gist 1409172 install_firefox.sh %}</p>

<h3>Testing Firefox</h3>

<p>{% gist 1409172 test_firefox.sh %}</p>

<p>Once firefox is installed it can be tested on a X11-forwarded ssh connection. X11-forwarding has to be enabled on the server and client and can be tested by checking <code>DISPLAY</code>.</p>

<h3>Installing Xvfb</h3>

<p>{% gist 1409172 install_xvfb.sh %}</p>

<h3>Testing Firefox again</h3>

<p>{% gist 1409172 test_firefox_again.sh %}</p>

<p>The easiest way to test is to use image magick to take a screen shot of the VFB and save it to an image that can be opened in Firefox. If the image opens and it looks like a firefox browser is running on the google page then you did it correctly.</p>

<h3>Create a xvfb startup script</h3>

<p>{% gist 1409172 xvfb.sh %}</p>

<p>On ubuntu no start script is provided, but a simple one put in <code>/etc/init.d/xvfb</code> is enough.</p>

<h3>Getting the CI server to use the VFB</h3>

<p>At this point getting a CI server to use Xvfb will depend on how it is started. If you use the Xvfb startup script then the display is <code>:1</code>. All you have to do is <code>export DISPLAY=:1</code> before the CI server starts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JS Unit Testing using YUI]]></title>
    <link href="http://jkamenik.github.com/blog/2010/12/15/js-unit-testing-using-yui/"/>
    <updated>2010-12-15T00:00:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2010/12/15/js-unit-testing-using-yui</id>
    <content type="html"><![CDATA[<p>Ok, Selenium was a partial success that you can read about <a href="http://randomsoftwareinklings.blogspot.com/2010/11/learning-selenium.html">here</a>, but it really was harder then I wanted it to be and it required a lot of setup for only a little bit of testing. I noticed that a project that I use a lot ExtJS uses a modified version of YUI Test. So I converted my Selenium test example to YUI Test.</p>

<!-- more -->


<p>My initial impression was confusion because you have to download the entire YUI 2 suite just get to get the <a href="http://developer.yahoo.com/yui/yuitest/">test tools</a>. Also, when you download the entire suite they are many different copies of the same file in various stages of minification. But following the documentation I boiled down exactly what I needed and threw away the rest. I put all the code for my test <a href="https://github.com/jkamenik/yui-test-example">here</a> so you can follow along.</p>

<p>You will need the following files from the YUI archive:</p>

<ul>
<li>build/logger/assets/logger.css</li>
<li>build/logger/logger.js</li>
<li>build/yuiloader-dom-event/yuiloader-dom-event.js</li>
<li>build/yuitest/assets/testlogger.css</li>
<li>build/yuitest/yuitest.js</li>
</ul>


<p>Create an HTML file that includes the css and js files:
{% gist 1151464 index-header.html %}</p>

<p>The HTML will also need to instantiate the test logger and run the test runner global. I bound the test run to a button so I could control when it ran:
{% gist 1151464 index-body.html %}</p>

<p>Now that we have a <code>YAHOO.tool.TestRunner</code> we need to add a test that can be run.  Instantiate a <code>new YAHOO.tool.TestCase</code> and add it to the TestRunner. All a TestCase needs is a name and a bunch of functions that start with "test". Everything else is automatic. Below is a simplified version of the <a href="https://github.com/jkamenik/yui-test-example/blob/master/test.js">full file</a>.
{% gist 1151464 test.js %}</p>

<h2>Conclusion</h2>

<p>Though Selenium is more automated that comes at the cost of being more complicated then testing should be. If I were a team of programmers then sure setting up and maintaining Selenium Remote controls would be a small part of the overall effort, but since I am not a team of programmers I think it is overkill.</p>

<p>What I really need is an easy to run, easy to write, repeatable, unit testing framework in JS. I do the leg work on pointing my various browsers at the html and reviewing the results. When things get big enough that I need to setup a continuous integration server, or I have a QA department, then I will give Selenium another go. For now YUI test is the way to go.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Selenium]]></title>
    <link href="http://jkamenik.github.com/blog/2010/11/18/learning-selenium/"/>
    <updated>2010-11-18T00:00:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2010/11/18/learning-selenium</id>
    <content type="html"><![CDATA[<h2>Background</h2>

<p>My basic need is to find a platform where I can test FF, IE, and Safari on Windows, Linux, and OS X.  I use OS X as my platform, and Safari or Webkit as my environment.  I don't like Windows or IE.  Linux is OK, but I like OS X because it just works the way I want.  And I find FF to be slow, and Firebug which is needed to debug we pages causes rendering changes and timing issues (most notably causing FF to crash).</p>

<!--more-->


<p>Ideally I want the testing environment:</p>

<ol>
<li>To be developed in Safari on OS X</li>
<li>To be able to test both internal libraries and rendered UI</li>
<li>To use unit tests to test internal libraries</li>
<li>To use interactive tests to test rendered UI</li>
<li>To use the unit/interactive tests as regression system moving forward</li>
<li>To write the tests once on my browser of choice</li>
<li>To run the tests on all combinations of browser and platform.</li>
<li>To not be bogged down by the testing framework</li>
<li>To be free, or very cheap</li>
</ol>


<p>From my research it looked like Selenium did basically exactly what I needed. And unfortunately was the only real option.  There were plenty of options for taking screen shots of public sites (which mine isn't, yet) and comparing those between browsers.  And there are several options for unit testing javascript, but only Selenium did both and could be run on my own hardware.</p>

<h2>Implementation</h2>

<p>From my reading it looked like I wanted to use the IDE to create the tests, and remote controls to run the browsers.  Eventually I need to scale to Selenium Grid, but that is for later discussion.</p>

<h3>Test code</h3>

<p>This is the sample file that I created to test.</p>

<p>{% gist 1151478 code.html %}</p>

<h3>Using the IDE</h3>

<p>It took a long time to understand this tool, since I had no background in Selenium.  The basic premiss is that each file is a single test case, which is a set of tests.  Each test is a grouping of three items: the action, the target, and the expected result.  It natively creates a 3 column HTML table, which it can also run, but personal preference is that use the IDE to export the basic test into a different language.</p>

<p>I am a rails developer, and am familiar with rspec so I use the IDE to run the tests to make sure they work, but then I transfer it to rspec since it is a more expressive test framework.  The downside is that you have to use a Remote Control to run the test, which adds an extra level of complications.  We will get to the Remote Control later.</p>

<p>A basic HTML test looks like this:
{% gist 1151478 test.html %}</p>

<p>There really is nothing more to it then that.  The one thing to note is that the test uses <code>verifyEval</code> which takes a JavaScript string.</p>

<p>{% blockquote %}
In all tests the <code>this</code> object is the base Selenium object so if you want to get to the <code>window</code> object you have to traverse up the stack via <code>this.browserbot.getUserWindow()</code>.
{% endblockquote %}</p>

<p>{% blockquote %}
Unfortunately everything tested in Selenium is converted to a string before testing.  So if I need to ensure that an integer parsing function actually produces a number I need to use <code>typeof</code>.
{% endblockquote %}</p>

<h2>Using RSpec</h2>

<p>The IDE is a great way to test scripts live, but for any programmer it is going to be easier to use a testing framework doing it programmatically.  As a rails guy I prefer RSpec so that is what I use.</p>

<h3>Installing</h3>

<p>This package requires ruby-gems, rspec, and selenium-client.  I am going to assume you have ruby-gems installed already.  The others are installed like this:
{% gist 1151478 install.sh %}</p>

<h3>Converting</h3>

<p>When using Rspec the only real thing to remember is that there are no assert<em> or verify</em> methods.  The reason is that Rspec itself is a testing framework so it will have it own version of assert and verify (in this case should).</p>

<p>The IDE has a great feature in that it converts the HTML test into a rspec test for you.  It isn't a great format, but it is better then nothing and is a good place to start.
{% gist 1151478 selenium.rb %}</p>

<p>{% blockquote %}
The browser being shown is <code>chrome</code>.  This actually means Firefox, not Google Chrome.  For Google Chrome use <code>googlechrome</code>.
{% endblockquote %}</p>

<p>{% blockquote %}
For Safari use <code>safari</code>, but remember that you will need to disable the popup blocker manually and close Safari (for this user) otherwise it will just sit there forever.
{% endblockquote %}</p>

<h3>Remote Controls</h3>

<p>A remote control is what Selenium uses to execute the test.  The IDE comes with it built-in, but it is tied to FireFox.  To use IE, Safari, or Chrome you need to download the remote control software: <a href="http://seleniumhq.org/projects/remote-control">http://seleniumhq.org/projects/remote-control</a>.  This software is just a Java server that opens your machine on port 4444 (by default) to allow Selenium clients to run tests.  Each client gets its own browser instance to run the tests in.</p>

<p>{% blockquote %}
The server must be run by a user that has access the browser and has a screen to render to.
{% endblockquote %}</p>

<p>{% blockquote %}
Firefox will only run a single profile per user.  If you need to run Firefox concurrently on the same machine you need to fake a second profile.  Don't do it, just create a VM; you will be happier.
{% endblockquote %}</p>

<p>{% blockquote %}
Google Chrome does not works on OS X.  This is because OS X doesn't add application executables to the path, and the server code isn't smart enough to use the executable directly.  The fix is supposedly <a href="http://groups.google.com/group/selenium-users/browse_thread/thread/7205089285e92973?hide_quotes=no&amp;fwc=1">here</a>, but I was not able to get it to work.  If I do I will probably write another blog entry and link it here.
{% endblockquote %}</p>

<h3>Putting it all together</h3>

<p>By default RSpec provides no runner code and the code the IDE produces is not standalone.  This is not a problem since installing RSpec into a rails app installs script/spec.  I have copied the runner code here so make it easier.
{% gist 1151478 runner.rb %}</p>

<p>I am going to assume the RSpec runner code is called spec and the test file is called test.rb.  To run this test from the command line do the following:</p>

<p><code>ruby
ruby spec test.rb
</code></p>

<p>Assuming you followed all the steps the test should have opened Firefox, executed a page, run the tests, closed Firefox, and returned the results.  Now you can add more tests and have Selenium execute them.</p>

<h2>Related Research</h2>

<ol>
<li>Using Selenium Grid</li>
<li>Using Chrome, or IE</li>
<li>Using a Grid to run the same test in all browsers on all OSs</li>
</ol>

]]></content>
  </entry>
  
</feed>
