<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Random Software Inklings]]></title>
  <link href="http://jkamenik.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://jkamenik.github.com/"/>
  <updated>2014-09-21T21:55:24-04:00</updated>
  <id>http://jkamenik.github.com/</id>
  <author>
    <name><![CDATA[John T. Kamenik]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using &amp;&amp; instead of if]]></title>
    <link href="http://jkamenik.github.com/blog/2014/09/21/using-and-and-instead-of-if/"/>
    <updated>2014-09-21T21:54:00-04:00</updated>
    <id>http://jkamenik.github.com/blog/2014/09/21/using-and-and-instead-of-if</id>
    <content type="html"><![CDATA[<p>You can use <code>&amp;&amp;</code> to perform a logical <code>if</code>.  And there are a few reasons it may be better to use <code>&amp;&amp;</code>.</p>

<p>If I was a Computer Scientist I might pull out logic maps or Turing completeness or do a mathematical proof.  If I was a Computer Architect I might argue that I do not need to prove anything and you should trust my experience.  Luckily I am a Software Engineer, so I will prove my point with tests.</p>

<!-- more -->


<p>Lets take <code>if a then b</code>.  The entire purpose of the <code>if then</code> it to only execute <code>b</code> if <code>a</code> is true.  If I were to write it using tests I might do it this way:</p>

<p>```ruby
require 'spec_helper'</p>

<p>describe "if then" do
  class Test</p>

<pre><code>def a; end
def b; end

def if_then
  if a
    b
  end
end
</code></pre>

<p>  end</p>

<p>  let(:t) {Test.new}</p>

<p>  it 'executes a' do</p>

<pre><code>expect(t).to receive(:a).and_return false

t.if_then
</code></pre>

<p>  end</p>

<p>  it 'executes b if a is true' do</p>

<pre><code>expect(t).to receive(:a).and_return true
expect(t).to receive(:b)

t.if_then
</code></pre>

<p>  end</p>

<p>  it 'does not execute b if a is false' do</p>

<pre><code>expect(t).to receive(:a).and_return false
expect(t).not_to receive(:b)

t.if_then
</code></pre>

<p>  end
end
```</p>

<p>These tests pass.  So, I will make no change to the tests.  But, I will refactor the Test class to use <code>&amp;&amp;</code>:</p>

<p>```ruby
class Test
  def if_then</p>

<pre><code>a &amp;&amp; b
</code></pre>

<p>  end
end
```</p>

<p>These tests also pass!  And you are probably thinking that I duped you somehow.  Let me explain why this works.</p>

<p>Logical <code>and</code> (&amp;&amp;) and logical <code>or</code> (||) can both be short circuited; meaning that if a certain condition is met they can immediately return a value without needing to execute more statements.  For <code>and</code> if any value is <code>false</code> then the entire statement is false.  So the first time the program sees a <code>false</code> value it can return.  For <code>or</code> the first <code>true</code> causes <code>true</code> to be returned.</p>

<p>The actual execution for <code>a &amp;&amp; b</code> is as follows:</p>

<ol>
<li>Execute a</li>
<li>if a is false return false</li>
<li>if a is true Execute b</li>
</ol>


<p>If you look carefully that is identical to the execution path of <code>if a then b</code>, which is why all the previous tests pass without modification.</p>

<h2>if not then</h2>

<p>Just like <code>&amp;&amp;</code> maps to <code>if then</code>, <code>||</code> maps to <code>if not then</code> or in some lanugages like ruby <code>unless then</code>.  I leave it as an exercise for the reader to write the tests, but the code is as follows:</p>

<p>```ruby
class Test
  def if_not_then</p>

<pre><code>a || b
</code></pre>

<p>  end
end
```</p>

<h2>if then else</h2>

<p><code>else</code> is just the <code>if not</code> case.  Since, <code>||</code> is eqivilant to <code>if not</code> we can chain it after <code>&amp;&amp;</code>.</p>

<p>```ruby
class Test
  def if_then_else</p>

<pre><code># if a then b else c
a &amp;&amp; b || c
</code></pre>

<p>  end
end
```</p>

<h2>Why is this useful?</h2>

<p>For some reason many languages can execute <code>&amp;&amp;</code> and <code>||</code> a lot faster then <code>if then else</code>, but I very rarely consider performance a good excuse for crappy looking code.  I have some simple reasons to use <code>&amp;&amp;</code> instead of <code>if</code>:</p>

<h3>1. You are chaining actions</h3>

<p>If the things that you are chaining are actions being performed and those action return weather they were successful then it often reads better as <code>&amp;&amp;</code>.</p>

<p>```ruby</p>

<h1>bad</h1>

<p>paint_it_black if find_a_door</p>

<h1>good</h1>

<p>find_a_door &amp;&amp; paint_it_black
```</p>

<h3>2. You are likely to chain additional items</h3>

<p>Once you nest logic then readability goes out the window.  Using <code>&amp;&amp;</code> helps.</p>

<p>```ruby</p>

<h1>bad</h1>

<p>if column_a_is_a_string
  if column_b_is_a_number</p>

<pre><code>if not column_c_is_a_boolean
  raise 'Bad'
end
</code></pre>

<p>  end
end</p>

<h1>good</h1>

<p>column_a_is_a_string &amp;&amp;
column_b_is_a_number &amp;&amp;
column_c_is_a_boolean ||
raise 'Bad'
```</p>

<h3>3. You don't know how many items you need to chain</h3>

<p>Sometimes you need to parse a file of conditionals, or will be given a list of conditionals.  Most of the time you cannot ensure that there are only two items on the list, so the <code>if then</code> contract is not useful, but a variant of <code>&amp;&amp;</code> will work.</p>

<p>```ruby
[a,b,c].each do |x|
  y = x.call</p>

<p>  # short circuit the first success
  return y if y
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RBAC in Ruby]]></title>
    <link href="http://jkamenik.github.com/blog/2014/01/10/rbac-in-ruby/"/>
    <updated>2014-01-10T15:07:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2014/01/10/rbac-in-ruby</id>
    <content type="html"><![CDATA[<p>RBAC stands for <em>Role Based Access Control</em>.  It is basically a means to programmitically configure access rights without hardcoding.</p>

<p>The full details are <a href="http://en.wikipedia.org/wiki/Role-based_access_control">here</a>, but to be honest I don't fully understand it as writen.  What I understand of it is from trial and error.</p>

<p>This entry is an attempt to codify that understanding and apply it using the ruby language.</p>

<!-- more -->


<h2>Basics</h2>

<p>The inputs to the policy are:</p>

<ol>
<li>User or Actor</li>
<li>Action being performed</li>
<li>Resource being acted on</li>
</ol>


<pre>
    +-------------------------------------------------------+
    | +-------+                                +----------+ |
    | |       |            +------+            |          | |
    | |  User |+---------->|Action|+---------->| Resource | |
    | |       |            +------+            |          | |
    | +-------+                                +----------+ |
    +-------------------------------------------------------+
                               +
                               |
                               v
                            +------+
                            |Policy|
                            +------+
                               +
                               |
                               v
                          +---------+
                          |Yes or No|
                          +---------+
</pre>


<h2>Policy</h2>

<p>The policy is where the business logic goes.  It can be as simple as a set of Ruby classes that simply return values, or it can be as complicated as ActiveDirectory.</p>

<p>The players are:</p>

<ol>
<li>Role - collection of permissions bound to a user</li>
<li>Permission - an answer which is limited to a resource and action</li>
</ol>


<p>Here is the basic flow of a permission:</p>

<pre>
    +------+            +------+             +------------+
    | User |+---------->| Role |+----------->| Permission |
    +------+            +------+             |------------|
              Has many            Has many   | Resource   |
                                             | Action     |
                                             | Allowed?   |
                                             +------------+
</pre>


<p>A user can have 1 or more roles.  Each role can have 1 or more permissions.  Each permission associates an action on a resource with an answer.  Either the user is explicitly allowed or explicitly not allowed to access the Resource.</p>

<p><em>Note:</em> I have purposely kept the data model simple.  In more complicated setups there can be several levels of permissions, permissions can have filters, and/or permissions can be directly bound to a user (instead of being bound to a role).  These complications are often introduced to deal with edge cases which are outside the scope of this article.</p>

<h3>Policy logic sample code</h3>

<p>Once the actors are known the logic is easy.  Simply filter in only the permission on a user for the resource and action in question then "and" all permissions together.</p>

<p>```ruby
class Policy</p>

<pre><code># returns true if the user *can* perform action on resource, false otherwise
def allowed?(user,action,resource)
    reduce_permissions list_permissions(user,action,resource)
end
</code></pre>

<p>private</p>

<pre><code># returns an array of filtered permissions
def list_permissions(user,action,resource)
    perm = user.roles.inject([]) do |array,role|
        array.concat role.permissions.for(resource).with(action).compact
    end
end

def reduce_permissions(perm_array)
    return implicit_allow if perm_array.empty?

    perm_array.reduce(true,:&amp;&amp;)
end

# "and", for "or" use ":||"
def reduce_function
    :&amp;&amp;
end

# default behavior is NOT to give access
def implicit_allow
    false
end
</code></pre>

<p>end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby module instance and class methods]]></title>
    <link href="http://jkamenik.github.com/blog/2011/11/21/ruby-module-instance-and-class-methods/"/>
    <updated>2011-11-21T00:00:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2011/11/21/ruby-module-instance-and-class-methods</id>
    <content type="html"><![CDATA[<p>A very common idiom especially when code starts to become complicated is to put functions in modules and mix in that behavior to several classes. And a common expansion is to have a single <code>include</code> add both instance and class methods.</p>

<!-- more -->


<p>Here is how to do it:
<div><script src='https://gist.github.com/1384045.js?file=include.rb'></script>
<noscript><pre><code>module Foo
  def self.included(base)
    base.extend ClassMethods
  end

  module ClassMethods
    def bar
    end
  end

  def baz
  end
end

class Test
  include Foo
end

Test.bar     # class method
Test.new.bar # No method error
Test.baz     # No method error
Test.new.baz # Instance method
</code></pre></noscript></div>
</p>

<p><code>include</code> is used to add a module's instance methods as instance methods to the including class, but it doesn't traverse sub modules. <code>extend</code> is used to add a module's instance methods as class methods to a class.</p>

<p>When a module is <code>included</code> it can register a callback which is passed the class that is doing the including. And calling <code>extend</code> on the base and passing a submodule will cause it to put those methods at the class level. This causes a chain reaction of loading both instance and class methods using a single <code>include</code>.</p>

<p><strong>Pro Tip</strong>: It is possible to cause the same behavior using <code>extend</code> by using the <code>extended</code> callback; however, this is not common and <code>include 'x'</code> reads better then <code>extend 'y'</code>.</p>
]]></content>
  </entry>
  
</feed>
