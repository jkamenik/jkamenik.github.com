<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: emacs | Random Software Inklings]]></title>
  <link href="http://jkamenik.github.com/blog/categories/emacs/atom.xml" rel="self"/>
  <link href="http://jkamenik.github.com/"/>
  <updated>2015-02-10T20:30:51-05:00</updated>
  <id>http://jkamenik.github.com/</id>
  <author>
    <name><![CDATA[John T. Kamenik]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Emacs Tabs and Tab Groups]]></title>
    <link href="http://jkamenik.github.com/blog/2015/02/10/emacs-tabs-and-tab-groups/"/>
    <updated>2015-02-10T20:28:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2015/02/10/emacs-tabs-and-tab-groups</id>
    <content type="html"><![CDATA[<p>From other editors I am used to having Tabbars.  Switching to Emacs I
miss that behavior.  Emacs does have a <code>tabbar</code> plugin, but it isn't
quite what I want.</p>

<!-- more -->


<p>By default it groups the tabs in a seemingly random way.  I am sure it
makes sense if you wrote it, but for me I want the things group by my
projects.  For me a project is a diretory wich has a <code>.git</code> directory
at its root.</p>

<p>First I created a simple function to get the project root, or return nil.</p>

<p>```common-lisp
(defun my-project-root ()
  "Return the root of the project."
  (locate-dominating-file default-directory</p>

<pre><code>".git"))
</code></pre>

<p>```</p>

<p>Basically this search all parent directories until it finds one
containing the ".git" directory.  The build in function details are.</p>

<p><code>locate-dominating-file BASE FILE</code> searches the parent directory tree
from BASE until it finds FILE.</p>

<p><code>default-directory</code> is a file local variable which is the directory of
the current file.</p>

<p>Next I set the <code>tabbar-buffer-groups-function</code> to return the group
name of the current file.  The only requirement is that the function
return a list, but it is recommended that the list only contain a
single item.</p>

<p>```common-lisp
(setq tabbar-buffer-groups-function</p>

<pre><code>  (lambda ()
    (let ((dir (expand-file-name default-directory)))
      (cond ((member (buffer-name) '("*Completions*"
                                     "*scratch*"
                                     "*Messages*"
                                     "*Ediff Registry*"))
             (list "#misc"))
            ;; All Magit status goes the same place
            ((string-match "^*magit" (buffer-name)) (list "#magic"))
            ((string-match "^COMMIT_EDITMSG" (buffer-name)) (list "#magic"))
            ;; All Cider windows
            ((string-match "^*nrepl-server" (buffer-name)) (list "#cider"))
            ((string-match "^*cider" (buffer-name)) (list "#cider"))
            ;; Group tabs based on project root
            ((my-project-root) (list (my-project-root)))
            ;; Use the current dir
            (t (list dir))))))
</code></pre>

<p>```</p>

<p>Here we capture the absolute path of the current file.  Then we check
a bunch of things to determine which best represents the group name.
The first thing we do is group various special buffers together.  Then we
use the project root to group files.  And if nothing else we use the
file's directory as the group name.</p>

<p><code>lambda ARG BLOCK</code> creates an anonymous function.</p>

<p><code>let VAR BLOCK</code> sets a variable and then calls a block.  The variable
is then local to that block.</p>

<p><code>cond TUPLE TUPLE...</code> executes tuples until the first time in the
tuple is true.  When it finds a true tuple it executes the second item
and returns it.</p>

<p><code>member ITEM LIST</code> returns true if the first item is contained within
the second list.</p>

<p><code>buffer-name</code> returns the name of the current buffer.</p>

<p><code>list ITEM</code> converts an item into a single item list.</p>

<p><code>string-match REGEXP STRING</code> returns the index of the regex in the
string, or nil.</p>

<p><code>my-project-root</code> See above.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[emacs key bindings]]></title>
    <link href="http://jkamenik.github.com/blog/2014/12/15/emacs-key-bindings/"/>
    <updated>2014-12-15T21:09:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2014/12/15/emacs-key-bindings</id>
    <content type="html"><![CDATA[<p>I recently switched to Emacs as my editor of choice.  It has taken a bit of work to get it to where I like it.  My full settings are on github <a href="https://github.com/jkamenik/.emacs.d">here</a>.</p>

<p>In this post I will share how I added a key binding to only a single mode.</p>

<!-- more -->


<p>A key binding is just maps a key sequence to a lisp function.  A global key binding can be added in the following way:</p>

<p><code>common-lisp
(define-key global-map (kbd "C-/") 'comment-or-uncomment-region)
</code></p>

<p>This causes a key sequence to be added to a map.  The <code>global-map</code> contains the global key bindings regardless of mode.  This is only useful if the command makes sense in all modes.  In a lot of cases keys should only be bound to a mode.</p>

<p>Each mode has its own map which emacs only uses when you are in that mode.  This is how you add mode specific key bindings.  The map for any mode is the mode name with "-map" added.  You will need to have the mode loaded for the map to exist.</p>

<p>The following will add Agenda mode to OrgMode, which is off my default.</p>

<p><code>common-lisp
(require 'org)
(define-key org-mode-map (kbd "C-ca") 'org-agenda)
</code></p>
]]></content>
  </entry>
  
</feed>
