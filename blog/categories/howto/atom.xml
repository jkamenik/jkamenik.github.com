<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: howto | Random Software Inklings]]></title>
  <link href="http://jkamenik.github.com/blog/categories/howto/atom.xml" rel="self"/>
  <link href="http://jkamenik.github.com/"/>
  <updated>2014-01-11T07:15:19-05:00</updated>
  <id>http://jkamenik.github.com/</id>
  <author>
    <name><![CDATA[John T. Kamenik]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RBAC in Ruby]]></title>
    <link href="http://jkamenik.github.com/blog/2014/01/10/rbac-in-ruby/"/>
    <updated>2014-01-10T15:07:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2014/01/10/rbac-in-ruby</id>
    <content type="html"><![CDATA[<p>RBAC stands for <em>Role Based Access Control</em>.  It is basically a means to programmitically configure access rights without hardcoding.</p>

<p>The full details are <a href="http://en.wikipedia.org/wiki/Role-based_access_control">here</a>, but to be honest I don't fully understand it as writen.  What I understand of it is from trial and error.</p>

<p>This entry is an attempt to codify that understanding and apply it using the ruby language.</p>

<!-- more -->


<h2>Basics</h2>

<p>The inputs to the policy are:</p>

<ol>
<li>User or Actor</li>
<li>Action being performed</li>
<li>Resource being acted on</li>
</ol>


<pre>
    +-------------------------------------------------------+
    | +-------+                                +----------+ |
    | |       |            +------+            |          | |
    | |  User |+---------->|Action|+---------->| Resource | |
    | |       |            +------+            |          | |
    | +-------+                                +----------+ |
    +-------------------------------------------------------+
                               +
                               |
                               v
                            +------+
                            |Policy|
                            +------+
                               +
                               |
                               v
                          +---------+
                          |Yes or No|
                          +---------+
</pre>


<h2>Policy</h2>

<p>The policy is where the business logic goes.  It can be as simple as a set of Ruby classes that simply return values, or it can be as complicated as ActiveDirectory.</p>

<p>The players are:</p>

<ol>
<li>Role - collection of permissions bound to a user</li>
<li>Permission - an answer which is limited to a resource and action</li>
</ol>


<p>Here is the basic flow of a permission:</p>

<pre>
    +------+            +------+             +------------+
    | User |+---------->| Role |+----------->| Permission |
    +------+            +------+             |------------|
              Has many            Has many   | Resource   |
                                             | Action     |
                                             | Allowed?   |
                                             +------------+
</pre>


<p>A user can have 1 or more roles.  Each role can have 1 or more permissions.  Each permission associates an action on a resource with an answer.  Either the user is explicitly allowed or explicitly not allowed to access the Resource.</p>

<p><em>Note:</em> I have purposely kept the data model simple.  In more complicated setups there can be several levels of permissions, permissions can have filters, and/or permissions can be directly bound to a user (instead of being bound to a role).  These complications are often introduced to deal with edge cases which are outside the scope of this article.</p>

<h3>Policy logic sample code</h3>

<p>Once the actors are known the logic is easy.  Simply filter in only the permission on a user for the resource and action in question then "and" all permissions together.</p>

<p>```ruby
class Policy</p>

<pre><code># returns true if the user *can* perform action on resource, false otherwise
def allowed?(user,action,resource)
    reduce_permissions list_permissions(user,action,resource)
end
</code></pre>

<p>private</p>

<pre><code># returns an array of filtered permissions
def list_permissions(user,action,resource)
    perm = user.roles.inject([]) do |array,role|
        array.concat role.permissions.for(resource).with(action).compact
    end
end

def reduce_permissions(perm_array)
    return implicit_allow if perm_array.empty?

    perm_array.reduce(true,:&amp;&amp;)
end

# "and", for "or" use ":||"
def reduce_function
    :&amp;&amp;
end

# default behavior is NOT to give access
def implicit_allow
    false
end
</code></pre>

<p>end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Keynote for Mockups]]></title>
    <link href="http://jkamenik.github.com/blog/2013/08/29/using-keynote-for-mockups/"/>
    <updated>2013-08-29T08:47:00-04:00</updated>
    <id>http://jkamenik.github.com/blog/2013/08/29/using-keynote-for-mockups</id>
    <content type="html"><![CDATA[<p>There are a lot of UI mockup software out there.  I am sure they are good, but chances are that you already have exactly what you need.  I used to ominigraffle, which was fine.  And I know people that use Visio.  And there are a ton of UI Mocking software out there that costs a ton.</p>

<p>However, I have found presentation software (specifically Keynote) already has all the features you need for a good UI mockup.</p>

<p>Features of Keynote:</p>

<ol>
<li>Almost everyone knows how to create a presentation</li>
<li>$20 on the app store (that is not a sales price)</li>
<li>Presentation ready</li>
<li>Master slides, which allows

<ol>
<li>Crafting static backgrounds</li>
<li>Text placeholders</li>
<li>Custom guidelines</li>
</ol>
</li>
<li>Hidden slides

<ol>
<li>Allows for templating common items, but not showing them in the presentation</li>
</ol>
</li>
<li>Clickable elements

<ol>
<li>Allows simulating of a working UI.</li>
</ol>
</li>
</ol>


<!-- more -->


<p>Here is my step by step for creating UI mockups.</p>

<h2>1. Use pen and paper</h2>

<p>Paper and Pen are the fastest way to get your ideas out of your head.  The other good thing about pen and paper is that you are not nessissarly constrained by UI medaphores built into a computer.  If you are trying to think of a better way to do something using a computer that is subtly forcing your into common UI patterns then that is the direction you will head.  You will not end up with anything better then before and you will likely have wasted a lot of time doing it.</p>

<p>Paper is supposed to be fast, not perfect.  So only use standard printer paper and a black pen.  Nothing more.</p>

<h3>1.1 Paper layout</h3>

<p>Fold the paper like <a href="/images/paper_in_8s.jpg">this</a>.</p>

<p>This gives you 16 slides to play with (8 on each side).  Also, it roughly simulates landscape and portrait layout of a screen.  I recommend sacrificing one slide with a orientation arrow (point to the top of the sheet) and short title.  Definitely not a requirement, but it helps when you come back to these slides after a week.</p>

<h3>1.2. The shotgun</h3>

<p>Take part of the UI metaphor and shotgun different ideas on all 16 slides (15 if you want to keep a title).  Spend no more then 10minutes on it, or about 35s / slide.  All you are trying to do is come up with ideas on what might work.</p>

<p>After that spend some time on each slide deciding what does and does not work.  Cross out the complete failures.  Circle things you like.</p>

<p>Repeat this as much as you need to.</p>

<h3>1.3 Story-board</h3>

<p>If you are creating a multipart UI then take everything that worked and story-board out the progression.  Use only the elements that worked.  You might find that when story-boarded things, that you thought would work, don't work.  There is not harm shotgunning some new ideas.</p>

<p>Each state of the UI is a single slide.  For example, if I am looking to demo a warning message when a user checks a checkbox then I would draw one frame with the button unchecked and no warning, and another with the button checked and a warning.  You can fill in the rest of the slides with other states or you can leave them blank.</p>

<h3>1.4 The reveal</h3>

<p>Don't give a formal presentation.  Just show your slides and explain what you are trying to do.  Ideas will fly, so take notes.</p>

<p>One of two things will happen during the reveal: 1) the ideas are fine, but need a little work.  Or 2) everything about the idea is wrong.  If there are only minor tweaks then I recommend <strong>not</strong> redoing anything paper and instead moving on to more formal design.</p>

<p>If everything is wrong then stop now.  No harm, no foul.  You either didn't have enough to go on, or your ideas weren't clean.  Either way you only spent 10 to 20 minutes on something that was likely to fail anyway.  It probably best if the project is scrapped or rethought.</p>

<h3>How do I share paper with remote workers?</h3>

<p>Good question!  That is why white paper without lines, and a blank pen are so important.</p>

<p>You share the document by scanning it with a scanner (if you work in an office) or you take a picture of it with your smart phone!</p>

<h2>2. Setup a master document</h2>

<p>Keynote isn't really meant for everyone to edit at the same time.  But you can create a master document which you share with the team so that everyone is on the same page.</p>

<ol>
<li>Start by creating a new document with the "White".</li>
<li>Open the "Master Slides" menu: View -> Show Master Slides</li>
<li>Delete all the master slides except "Title &amp; subtitle" and "Blank"</li>
<li>Fill out the title slide</li>
</ol>


<h2>3. Template common elements</h2>

<p>At this point you should have a rough set of slides or a story-board and the basic master document.  You may have 10s or 100s of slides that need to be converted to digital, but before any of that create common UI elements.</p>

<p><a href="http://keynotopia.com/">http://keynotopia.com/</a> and things like it can be purchased to augment your UI collection.  Copy over or create the UI elements that are present in your story board.</p>

<p>Once you have a good set of common UI elements in one or two slides mark them skipped slide: Slide -> Skip slide.  This will let you later copy and paste elements but skip the slide during presentations.</p>

<h2>4. Create common backgrounds (using master slides)</h2>

<p>Just like creating common UI element, creating master slides lets you quickly throw together backgrounds.  More importantly editing the master slides causes every slide to update.</p>

<p>A master slide is just like a normal slide except that it can be used as the base for other sides.  For that reason anything that you put in a master side is not editable in a normal slide.  The exception is text which can be marked as a placeholder and changed in the slide.</p>

<p>I recommend building master slides in the following manner.</p>

<h3>4.1 Background object</h3>

<p>As a standard slide you can put any objects including shapes, and text.  The rule of thumb is to start with a recognizable background.  For websites that means creating something that looks like a web browser.  For a iPhone app create the outline of an iPhone.  For a computer program create common window.</p>

<p>Since these objects aren't editable in slides you may find that you create quite a few master slides with different aspects of the project.  That is a good thing.  You master slides will ballon as your design balloons, which is another form of feedback.</p>

<p><strong>Tip</strong>: You may also want to create a slide that simulates scrolling to the middle or bottom of the page.  Just add a right scroll bar to the right at different positions: top, middle, bottom.</p>

<h3>4.2 Guides</h3>

<p>Once you have the master slide objects in place you will notice that the center of the usable area will not be centered the center of the slide.  This makes it difficult to position things on slides in a consistent way.  To make it easy again add guides.</p>

<p>Show the rulers: View -> Show Rulers.  Then grabbing the top ruler and dragging down will add a horizontal guide.  Grabbing the left ruler and dragging right will add a vertical guide.</p>

<p><strong>Tip:</strong> I add guides on the edges (like the sides of the iPhone screen).  Then I add guides in the middle.  Sometimes I will also add guides at the golden mean, or thirds, but never both at the same time.</p>

<h3>4.3 Placeholders</h3>

<p>Any text box can be a placeholder which means that the text can be modified on the slide.  When doing a website I make the browser title and URL bar a placeholder.</p>

<p>To create a placeholder first add a "Text box", place it where you want, and give it a good default value.  With the item selected open the <strong>Inspector</strong> and go to the <em>Master Slide</em> tab.  Check "Define as Text Placeholder" and give it a unique name.</p>

<p>A slide can modify a placeholder in any way it needs to.  This includes changing size, position, or even deleting the item entirely.  But it is a really good way to add quickly configurable defaults.</p>

<h2>5. Create UI (using slides)</h2>

<p>With the master slides and templates in place it is a simple matter to create slides.  A slide should contain no more then would fit on a single screen; remember presentation slides don't scroll.  If you need a multipage slide split it over 2 or 3 slides.</p>

<p>Do not try to make the screen interactive.  That is not the purpose of a presentation.  Stick with duplicating the paper slides.</p>

<h2>6. Create interaction (using clickable items)</h2>

<p>You could stop at step 5 and give a pretty great presentation, but sometimes you really want to take things over the top.  Keynote allows you to make objects hyperlinks, which can link to another slide, a webpage, or another presentation.</p>

<p>In the design view there is a visual clue that the item is clickable, but not during the presentation.  And since hyperlinks can jump forward or backwards in the presentation this feature can get you into a lot of trouble.  It is very important that the entire presentation be closed to finished before adding hyperlinks.</p>

<p><strong>Tip:</strong> To help you stay out of trouble, duplicate a slide and only change one item.  Then link from the first slide to the second in a way that makes sense, and be sure to link from the second back to the first.  Resist the urge to have the second slide link anywhere but to the first slide.</p>

<h2>7. Don't Add details</h2>

<p>You can spend hours adding details which will either need to be completely removed and redone or will be ignored.  The goal is to provide enough fidelity to be useful but not enough detail to reach the "uncanny valley" of sorts.  If the fidelity of the design is too high then people start picking apart the details, and stop thinking about the presentation.</p>

<h3>Uncanny Valley</h3>

<p>This is a term borrowed from the field of human aesthetics that states "[it] is the region of negative emotional response towards robots that seem 'almost human'".  See the <a href="http://en.wikipedia.org/wiki/Uncanny_valley">wikipedia article</a> for details.</p>

<p>The issue doesn't stop with humans judging humans, it takes place anytime a human judges something that seems familiar.  Especially computer programs.  Basically, as we add detail there is a point right before "perfect" which is so bad that it is worse then if stopped at the hand drawings.</p>

<ol>
<li>Nothing -> neutral</li>
<li>Drawings -> good</li>
<li>Keynote -> better</li>
<li>Keynote with details -> <strong>HORRIBLE!!!!</strong></li>
<li>Actual implementation -> best</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Screenplays]]></title>
    <link href="http://jkamenik.github.com/blog/2013/07/28/screenplays/"/>
    <updated>2013-07-28T21:09:00-04:00</updated>
    <id>http://jkamenik.github.com/blog/2013/07/28/screenplays</id>
    <content type="html"><![CDATA[<p>So part of my job has been to give screencasts of some of the projects I have been working on.  Having a Mac I can use iMovie to pretty much do everything, but I struggled with the structure and timing of the screencasts.</p>

<p>The issue was that I know pretty much everything about the feature I implemented, so I would just go at it.  I would often get confused, start over, or go off on a tangent.  By the end everything took longer then it should, and wasn't as good as it should have been.  Over all very frustrating.</p>

<p>I don't know why I didn't think about this sooner and why this isn't the first thing people tell when you start doing screencasts, but start with a screenplay.  The movie industry has decades of experience and they start each movie with a pitch and a screenplay.</p>

<!-- more -->


<p>Think of a screenplay like a wireframe for your video.  Everything about them is about making things simple to understand.  Below is a simplified version of <a href="http://2012.scriptfrenzy.org/howtoformatascreenplay">the screenplay format</a> applied specifically to screencasts.</p>

<p>I have a sample Google doc file <a href="https://docs.google.com/document/d/1tstVIrAOQlfjjttxyjK_igDmrrIFf4IYuHhNJQljOQY/edit?usp=sharing">here</a>.</p>

<h2>Page layout</h2>

<ol>
<li>Page size

<ol>
<li>8.5" x 11"</li>
</ol>
</li>
<li>Margins

<ol>
<li>Left: 1.5 in</li>
<li>Top/Bottom/Right: 1 in</li>
</ol>
</li>
<li>Font

<ol>
<li>Courier</li>
<li>12 point</li>
<li>no bold</li>
<li>no italics</li>
</ol>
</li>
<li>Single space between

<ol>
<li>Character name and dialog</li>
<li>Character name and parenthetical</li>
<li>Parenthetical and dialog</li>
</ol>
</li>
<li>Double space between

<ol>
<li>everything else</li>
</ol>
</li>
</ol>


<h2>Structure</h2>

<h3>Title page</h3>

<ol>
<li>Title of the script

<ol>
<li>Center of the page</li>
<li>Left aligned</li>
</ol>
</li>
<li>By line

<ol>
<li>Immediately after Title</li>
</ol>
</li>
</ol>


<h3>Slug line</h3>

<ol>
<li>All Caps</li>
<li>Left aligned</li>
<li>Describes the screen</li>
<li>Separate parts with "-"</li>
<li>For screencasts

<ol>
<li>omit the internal/external indicator (you are always in a computer)</li>
<li>omit the time of day indictor</li>
<li>Add a Website / Program indicator</li>
<li>Add an off screen indicator (O.S.), this either needs to be prior to recording or will be removed post production</li>
</ol>
</li>
</ol>


<p>```
GOOGLE PLUS - LOGIN - OFF SCREEN</p>

<p>...</p>

<p>GOOGLE PLUS - ADD FRIEND TO CIRCLE
```</p>

<h3>Action</h3>

<ol>
<li>Optional</li>
<li>Immediately after Slug line</li>
<li>Describes setup of screen (work performed off screen, prior to recording)</li>
<li>Left aligned</li>
</ol>


<p>```
GOOGLE PLUS - ADD A FRIEND TO CIRCLE</p>

<p>Two accounts exist.  Account 1 is logged in.</p>

<p>Search for account 2.
```</p>

<h3>Character name</h3>

<ol>
<li>Above parenthetical or dialog - Anytime the person speaking changes</li>
<li>All Caps</li>
<li>4 tabs in (2")</li>
<li>For screencasts

<ol>
<li>Use PRESENTER X (omit the X if only one presenter)</li>
</ol>
</li>
</ol>


<p>```</p>

<pre><code>    JOHN

  (doing something)

And talking


    JANE

Just talking
</code></pre>

<p>```</p>

<h3>Parenthetical</h3>

<ol>
<li>Immediately after character name</li>
<li>Used to show actions performed while talking</li>
<li>3 tabs in (1.5")</li>
<li>For screencasts

<ol>
<li>Use generic terms like "highlight", and "submit form" instead of very specific "move mouse to" and "click submit button"</li>
</ol>
</li>
</ol>


<h3>Dialog</h3>

<ol>
<li>Immediately after character name or parenthetical</li>
<li>What the character says</li>
<li>No quotes</li>
<li>Present tense</li>
<li>Only explain what isn't covered by the video

<ol>
<li>For example it is fine to use Jargon like "goto google" because in the video you will be opening the browser, going to the URL bar, and typing in "http://google.com".</li>
</ol>
</li>
<li>2 tabs in (1")</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JS Unit Testing using YUI]]></title>
    <link href="http://jkamenik.github.com/blog/2010/12/15/js-unit-testing-using-yui/"/>
    <updated>2010-12-15T00:00:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2010/12/15/js-unit-testing-using-yui</id>
    <content type="html"><![CDATA[<p>Ok, Selenium was a partial success that you can read about <a href="http://randomsoftwareinklings.blogspot.com/2010/11/learning-selenium.html">here</a>, but it really was harder then I wanted it to be and it required a lot of setup for only a little bit of testing. I noticed that a project that I use a lot ExtJS uses a modified version of YUI Test. So I converted my Selenium test example to YUI Test.</p>

<!-- more -->


<p>My initial impression was confusion because you have to download the entire YUI 2 suite just get to get the <a href="http://developer.yahoo.com/yui/yuitest/">test tools</a>. Also, when you download the entire suite they are many different copies of the same file in various stages of minification. But following the documentation I boiled down exactly what I needed and threw away the rest. I put all the code for my test <a href="https://github.com/jkamenik/yui-test-example">here</a> so you can follow along.</p>

<p>You will need the following files from the YUI archive:</p>

<ul>
<li>build/logger/assets/logger.css</li>
<li>build/logger/logger.js</li>
<li>build/yuiloader-dom-event/yuiloader-dom-event.js</li>
<li>build/yuitest/assets/testlogger.css</li>
<li>build/yuitest/yuitest.js</li>
</ul>


<p>Create an HTML file that includes the css and js files:
<div><script src='https://gist.github.com/1151464.js?file=index-header.html'></script>
<noscript><pre><code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;logger.css&quot;&gt;
&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;testlogger.css&quot;&gt;

&lt;!-- Test runner code --&gt;
&lt;script src=&quot;yahoo-dom-event.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;logger.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;yuitest.js&quot;&gt;&lt;/script&gt;</code></pre></noscript></div>
</p>

<p>The HTML will also need to instantiate the test logger and run the test runner global. I bound the test run to a button so I could control when it ran:
<div><script src='https://gist.github.com/1151464.js?file=index-body.html'></script>
<noscript><pre><code>&lt;body&gt;
    &lt;input onclick=&quot;javascript:runAllTests()&quot; type=&quot;button&quot; value=&quot;Run Tests&quot; /&gt;
    
    &lt;script&gt;
        new YAHOO.tool.TestLogger();
        
        function runAllTests(){
            YAHOO.tool.TestRunner.run();
        }
    &lt;/script&gt;
&lt;/body&gt;</code></pre></noscript></div>
</p>

<p>Now that we have a <code>YAHOO.tool.TestRunner</code> we need to add a test that can be run.  Instantiate a <code>new YAHOO.tool.TestCase</code> and add it to the TestRunner. All a TestCase needs is a name and a bunch of functions that start with "test". Everything else is automatic. Below is a simplified version of the <a href="https://github.com/jkamenik/yui-test-example/blob/master/test.js">full file</a>.
<div><script src='https://gist.github.com/1151464.js?file=test.js'></script>
<noscript><pre><code>var assert = YAHOO.util.Assert;

YAHOO.tool.TestRunner.add(new YAHOO.tool.TestCase({
  name: 'Tests for string',
  
  test_true: function(){
    var test = String(true);
    assert.isString(test);
    assert.areEqual('true',test);
  }
});</code></pre></noscript></div>
</p>

<h2>Conclusion</h2>

<p>Though Selenium is more automated that comes at the cost of being more complicated then testing should be. If I were a team of programmers then sure setting up and maintaining Selenium Remote controls would be a small part of the overall effort, but since I am not a team of programmers I think it is overkill.</p>

<p>What I really need is an easy to run, easy to write, repeatable, unit testing framework in JS. I do the leg work on pointing my various browsers at the html and reviewing the results. When things get big enough that I need to setup a continuous integration server, or I have a QA department, then I will give Selenium another go. For now YUI test is the way to go.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dealing with Email overload]]></title>
    <link href="http://jkamenik.github.com/blog/2010/12/12/dealing-with-email-overload/"/>
    <updated>2010-12-12T00:00:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2010/12/12/dealing-with-email-overload</id>
    <content type="html"><![CDATA[<p>This isn't strictly software related, but a lot of us have to deal with the horror that is email. Email is not a good solution to any problem, but it is ubiquitous so it is used for all things: personal correspondence, commit tracking, defect notification, task notification, etc... Email is all to often used as a mechanism to pass-the-buck.</p>

<p>The only way to deal with this email overload is to set boundaries on email usage. A lot of people will find these boundaries annoying, if not unworkable. Just stick with it and lead by example. Eventually, in a time of high stress, you will be able to get to important messages fast and they will be left floundering.</p>

<!--more-->


<h2>My results</h2>

<p>I am putting the summary first in hopes that you might actually try some of these suggestions. On average I get 50 to 200 work related emails a day. In any given day (saturday and sunday included) I will need to respond to 5 to 10 of them. That means that I get between 40 and 195 junk emails that pass (and should pass) my junk mail filters.</p>

<p>By focusing on making sure my inbox only includes import emails I have reduced my inbox to 3 to 5 message each check (and I check twice a day). On busy days I only ever check my inbox, relying on others to contact me via a different medium if they really need me. When there is a less busy day I go through the other inbox and deal with those messages.</p>

<p>At the time I am writing this (on sunday) I have 1 email in my inbox and 91 emails in my other inbox that were all sent saturday. A quick read of the 1 email and I will have to spend 5 minutes reviewing code, but the rest can wait until monday.</p>

<h2>Use the right messaging system</h2>

<p>Use email for messages that do not need an immediate response. Since there is no message size limit, make sure you use the most of it. Write emails that are well detailed and specific. If at any point a message can be answered with "Ok" or some other monosyllabic word then email was not the correct choice.</p>

<p>Use Instant Messages (IM,IRC,etc...) for conversations that need semi immediate responses, and a possible record. Many IM packages can log conversations for later viewing, which is useful when you forget things. There are message length and formatting restrictions so this forces the messages to be brief and specific.</p>

<p>Use Phone, Skype, or face to face contact when a response is needed immediately.</p>

<p>Use Twitter, or some other global message posting service to track commits, continuous integration fails, defects, etc...</p>

<p>Use a wiki, or blog to track generic instructions or documentation.</p>

<h2>Check email twice a day (only)</h2>

<p>The easiest way to train people not to use email as a crutch is not use it as one yourself. Only check email twice a day, and give a concerted effort to reduce that to once a day within a month, and once a week within 6 months. Setup the other messaging systems so that email is used only for what it needs to be. And when people step out of line, correct them.</p>

<p>Email should not be the first thing that you check in the morning, as you should not be working out of email. It should also not be the last thing you check as it will disrupt your already stressful commute/home life. Instead check email 2 hours after the start of the day, and 2 hours before the end of the day. If you work a 9-to-5 that means once at 11am and once at 3pm.</p>

<p>The day you start doing this, tell the people that send you the most email and the ones that you will most affect by the change, and no one else. You are not trying to be sneaky, but if you blast an email to everyone then you are going to make it a big deal; which it is not. The others will learn over time.</p>

<p>When someone tells you that you need to check your email and read their message do it, but only check their email, ignore all other messages.</p>

<h2>Don't use Inbox as an archive</h2>

<p>Once you are finished reading an email, either deal with the email and delete it or archive it. Create a separate archive folder and move emails there if you need to save them. Your goal is aways to reduce the inbox to zero</p>

<h2>Create an other inbox</h2>

<p>Create a filter that will dump any messages where you are not the direct recipient into a different folder. This should be the first filter you create, but the last filter that is applied to any message. Create as many other filters and folders as you can to move useless messages round. The goal is to remove any message that you do not need to act on so that what is left is just what is important. The trash can is a good folder to dump things that are truly useless.</p>

<h2>Use the server's filtering mechanism</h2>

<p>When possible have server do all the filtering that way you can use multiple email clients and will not be dependent on leaving an email client on. All Exchange servers and many online email services can do server filtering. When using Outlook, be careful, the ease of creating filters is sometimes offset by the fact that it lies about what filters can be saved to the server. Though harder, since MS didn't spend much time on the server-side features of Exchange, it is better to build the filters on the server directly.</p>

<h2>Reduce the inbox to zero (in one sitting)</h2>

<p>The goal is always to reduce your inbox to zero. Once all the filters are in place, the only thing left to actually deal with all the important emails (at least that is the hope). When dealing with email decide if the email should be dealt with, deferred, or archived.</p>

<p>If time is really an issue then find the messages to archive and defer first, and move them. That way what is left is just the stuff to deal with now.</p>
]]></content>
  </entry>
  
</feed>
