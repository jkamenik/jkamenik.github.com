<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programing | Random Software Inklings]]></title>
  <link href="http://jkamenik.github.com/blog/categories/programing/atom.xml" rel="self"/>
  <link href="http://jkamenik.github.com/"/>
  <updated>2015-11-06T06:22:12-05:00</updated>
  <id>http://jkamenik.github.com/</id>
  <author>
    <name><![CDATA[John T. Kamenik]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using &amp;&amp; instead of if]]></title>
    <link href="http://jkamenik.github.com/blog/2014/09/21/using-and-and-instead-of-if/"/>
    <updated>2014-09-21T21:54:00-04:00</updated>
    <id>http://jkamenik.github.com/blog/2014/09/21/using-and-and-instead-of-if</id>
    <content type="html"><![CDATA[<p>You can use <code>&amp;&amp;</code> to perform a logical <code>if</code>.  And there are a few reasons it may be better to use <code>&amp;&amp;</code>.</p>

<p>If I was a Computer Scientist I might pull out logic maps or Turing completeness or do a mathematical proof.  If I was a Computer Architect I might argue that I do not need to prove anything and you should trust my experience.  Luckily I am a Software Engineer, so I will prove my point with tests.</p>

<!-- more -->


<p>Lets take <code>if a then b</code>.  The entire purpose of the <code>if then</code> it to only execute <code>b</code> if <code>a</code> is true.  If I were to write it using tests I might do it this way:</p>

<p>```ruby
require 'spec_helper'</p>

<p>describe "if then" do
  class Test</p>

<pre><code>def a; end
def b; end

def if_then
  if a
    b
  end
end
</code></pre>

<p>  end</p>

<p>  let(:t) {Test.new}</p>

<p>  it 'executes a' do</p>

<pre><code>expect(t).to receive(:a).and_return false

t.if_then
</code></pre>

<p>  end</p>

<p>  it 'executes b if a is true' do</p>

<pre><code>expect(t).to receive(:a).and_return true
expect(t).to receive(:b)

t.if_then
</code></pre>

<p>  end</p>

<p>  it 'does not execute b if a is false' do</p>

<pre><code>expect(t).to receive(:a).and_return false
expect(t).not_to receive(:b)

t.if_then
</code></pre>

<p>  end
end
```</p>

<p>These tests pass.  So, I will make no change to the tests.  But, I will refactor the Test class to use <code>&amp;&amp;</code>:</p>

<p>```ruby
class Test
  def if_then</p>

<pre><code>a &amp;&amp; b
</code></pre>

<p>  end
end
```</p>

<p>These tests also pass!  And you are probably thinking that I duped you somehow.  Let me explain why this works.</p>

<p>Logical <code>and</code> (&amp;&amp;) and logical <code>or</code> (||) can both be short circuited; meaning that if a certain condition is met they can immediately return a value without needing to execute more statements.  For <code>and</code> if any value is <code>false</code> then the entire statement is false.  So the first time the program sees a <code>false</code> value it can return.  For <code>or</code> the first <code>true</code> causes <code>true</code> to be returned.</p>

<p>The actual execution for <code>a &amp;&amp; b</code> is as follows:</p>

<ol>
<li>Execute a</li>
<li>if a is false return false</li>
<li>if a is true Execute b</li>
</ol>


<p>If you look carefully that is identical to the execution path of <code>if a then b</code>, which is why all the previous tests pass without modification.</p>

<h2>if not then</h2>

<p>Just like <code>&amp;&amp;</code> maps to <code>if then</code>, <code>||</code> maps to <code>if not then</code> or in some lanugages like ruby <code>unless then</code>.  I leave it as an exercise for the reader to write the tests, but the code is as follows:</p>

<p>```ruby
class Test
  def if_not_then</p>

<pre><code>a || b
</code></pre>

<p>  end
end
```</p>

<h2>if then else</h2>

<p><code>else</code> is just the <code>if not</code> case.  Since, <code>||</code> is eqivilant to <code>if not</code> we can chain it after <code>&amp;&amp;</code>.</p>

<p>```ruby
class Test
  def if_then_else</p>

<pre><code># if a then b else c
a &amp;&amp; b || c
</code></pre>

<p>  end
end
```</p>

<h2>Why is this useful?</h2>

<p>For some reason many languages can execute <code>&amp;&amp;</code> and <code>||</code> a lot faster then <code>if then else</code>, but I very rarely consider performance a good excuse for crappy looking code.  I have some simple reasons to use <code>&amp;&amp;</code> instead of <code>if</code>:</p>

<h3>1. You are chaining actions</h3>

<p>If the things that you are chaining are actions being performed and those action return weather they were successful then it often reads better as <code>&amp;&amp;</code>.</p>

<p>```ruby</p>

<h1>bad</h1>

<p>paint_it_black if find_a_door</p>

<h1>good</h1>

<p>find_a_door &amp;&amp; paint_it_black
```</p>

<h3>2. You are likely to chain additional items</h3>

<p>Once you nest logic then readability goes out the window.  Using <code>&amp;&amp;</code> helps.</p>

<p>```ruby</p>

<h1>bad</h1>

<p>if column_a_is_a_string
  if column_b_is_a_number</p>

<pre><code>if not column_c_is_a_boolean
  raise 'Bad'
end
</code></pre>

<p>  end
end</p>

<h1>good</h1>

<p>column_a_is_a_string &amp;&amp;
column_b_is_a_number &amp;&amp;
column_c_is_a_boolean ||
raise 'Bad'
```</p>

<h3>3. You don't know how many items you need to chain</h3>

<p>Sometimes you need to parse a file of conditionals, or will be given a list of conditionals.  Most of the time you cannot ensure that there are only two items on the list, so the <code>if then</code> contract is not useful, but a variant of <code>&amp;&amp;</code> will work.</p>

<p>```ruby
[a,b,c].each do |x|
  y = x.call</p>

<p>  # short circuit the first success
  return y if y
end
```</p>
]]></content>
  </entry>
  
</feed>
