<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Random Software Inklings]]></title>
  <link href="http://jkamenik.github.com/atom.xml" rel="self"/>
  <link href="http://jkamenik.github.com/"/>
  <updated>2013-07-05T23:03:23-04:00</updated>
  <id>http://jkamenik.github.com/</id>
  <author>
    <name><![CDATA[John T. Kamenik]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Francis Alexander Kamenik]]></title>
    <link href="http://jkamenik.github.com/blog/2012/12/02/francis-alexander-kamenik/"/>
    <updated>2012-12-02T17:20:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2012/12/02/francis-alexander-kamenik</id>
    <content type="html"><![CDATA[<p>Born November 28th, 2012 at 12:48pm.  9lbs 1oz, 21 1/4 inches.</p>

<p><img src="http://jkamenik.github.com/images/francis/IMG_0555.jpg"></p>

<!-- more -->


<p><img src="http://jkamenik.github.com/images/francis/IMG_0556.JPG"></p>

<h2>Our Experience</h2>

<p><strong>12:30am</strong> Melanie starts labor, but can&#8217;t wake me up.  It didn&#8217;t even dawn on me that it could have been actual labor.  In my defense I am a heavy sleeper so it was difficult to get me up.</p>

<p><strong>2am</strong> Melanie was able to get me fully awake.  I was still unsure what was happening, so I wanted to time the contractions.  Having gone to the labor class I knew that we needed to time contractions: 511, 5 minutes apart, for a 1 minute duration, for 1 hour.  I also knew that false labor, which can sometimes be very painful, proceeds real labor but up to several weeks.</p>

<p><strong>2:20am</strong> We are DONE timing contractions!  Or rather my continuing health demands we stop timing contractions.  The contractions have Mel on the floor with back labor, and she is going to kill me.  Under explicit instructions, tears, and anger I call the on-call Doctor on Mel&#8217;s behalf.</p>

<p><strong>2:40am</strong> We are at the Hospital and Mel is headed to Triage.  I get to wait in the labor waiting room until they have checked her and decide to admit her.</p>

<p><strong>3:00am</strong> We are in the labor rooms.  Very nice and roomy and private to each labor.  Big enough for a couch (where I was sleeping) several chairs, the labor bed, the baby examination table/heater, sink, bathroom, and medical supply room.  Right now it is a waiting game of doctor checks.</p>

<p><strong>5am</strong> Mel gets the epidural.  It is a sterile procedure so I had to wait in the waiting area again.  It takes just under an hour and 2 attempts to get the epidural in correctly.</p>

<p><strong>6am</strong> We start posting updates to friends and family.  We figured it was nicer to wait until at least a standard start of the day and not send the invites at 3am when we were actually admitted.  Mel&#8217;s pain is much less, but so is the strength of the her contractions.  Now her progression has to be monitored more closely, and pitocin administered if needed.</p>

<p><strong>7:30am</strong> Mel has progressed to 7-8cm so we tell her parents to head down.</p>

<p><strong>8am</strong> Mel&#8217;s water is broken by the doctor, but she is still progressing.  No need for pitocin, yet.</p>

<p><strong>9am</strong> Mel&#8217;s parents are here.  And she is progression nicely to 9cm.</p>

<p><strong>10am</strong> Francis is still at 0 station.  He has engaged, but is not progressing.  We are on a watch because the contractions are not constant.</p>

<p><strong>10:30am</strong> Francis heart rate dropped below safe rate and immediately above safe range.  The external monitors are removed and internal monitors added in hopes that the blips were Mel&#8217;s movements and not the actual measurements of the baby.</p>

<p><strong>11am</strong> The new monitors are MUCH more painful, since the vagina is not numbed by the epidural, but she endures.  Also, the progression has stopped, and Francis continues to have heart flutters.  And Mel&#8217;s own blood pressure is setting off alarms right and left.  We are given the option to start pitocin, wait things out, or as the doctor recommends start talking about a C-Section.</p>

<p><strong>11:15am</strong> We had already decided that if something like this happened we were OK with the C-Section.  Mel is terrified of surgery, since she has never had surgery.  Her mother, having had 2 C-Sections, gives her the low down on what it is like.  That, knowing I will be there, knowing they will block her pain, and knowing she will be awake is enough for us to move forward.</p>

<p><strong>11:45am</strong> All the extra sensors are removed, she is in the OR, and I am sitting in the recovery room waiting to be called in.</p>

<p><strong>12pm</strong> In the OR with Mel, Doctor has made the first cut.</p>

<p><strong>12:48pm</strong> Francis is pulled out and immediately begins crying.  Normally this is great but in our case there is meconium in the amniotic fluid, so we don&#8217;t want him to aspirate it.  So the peditritians take him immediately to the examanation table.  All is fine now, but we have to watch him carefully over the next few days.  It is possible for him to develop a lung infection.</p>

<p><strong>+3 days</strong> We are heading home, Francis is fine.</p>

<h2>What we have learned</h2>

<ul>
<li>Opinions due little but sully the otherwise very special moment</li>
<li>Nothing goes as planned</li>
<li>Babies have an inverted sleep schedule</li>
<li>Breastfeeding is f&#8217;n hard!</li>
<li>Breasts are purely functional</li>
<li>Nipple confusion is a much smaller concern then it seems</li>
<li>The &#8220;connection&#8221; is not instantainious for all women</li>
<li>&#8220;Baby amnesia&#8221; comes along slowly</li>
<li>You never have enough diapers</li>
</ul>


<h3>Opinions</h3>

<p>Facts are great, and even talking about experiences are nice.  But spouting opinions sucks, and we have been inundated.  Here are just a few:</p>

<ul>
<li><em>Circumcision is mutilation and has a good change so killing your boy:</em> <strong>false</strong>.  Very little of this is factually actuate, but it is spouted with such fervor as to be unquestionable.  If you want your boy circumcised then do, if you don&#8217;t that is fine to.  Make the choice and ignore all detractors.</li>
<li><em>Breastfeeding is </em>always<em> better then formula:</em> <strong>false</strong>.  There are benefits and drawbacks for both breastfeeding and formula.  We choose breastfeeding, but think nothing less of women that choose formula.  You have to pick what is right for you.</li>
<li><em>Never use a pacifier/bottle when breastfeeding:</em> <strong>false</strong>.  We have tried a bottle, and continue to use a pacifier and have no problem with nipple confusion.  Do what is right for your baby, your life, and you; the rest will take care of itself.</li>
<li><em>Epidural are selfish, bad, you will have problems:</em> <strong>false</strong>.  Just not true.  Mel wanted a natural birth, but when the pain of back labor was too much the epidural was needed.</li>
<li><em>Labor is a beautiful things:</em> semi-<strong>false</strong>.  I can see why it is though of as beautiful, and at the highest level it is.  But in the details of the pain, strain, lack of sleep, frustration, fear, and expectation it is more real then beautiful.  The rememberance of Labor will be beautiful - I am sure - but right now things are real.</li>
</ul>


<h3>Nothing goes as planned</h3>

<p>During our planning class the nurse suggested that we &#8220;let the baby drive&#8221;.  Basically do not create a written list, because you will stress over details before labor and when things do not go as planned it will add fuel to the baby blues after labor.</p>

<p>In our case we had a general plan and almost nothing worked out as we wanted.  In the end we had a healthy baby boy and the plan of not planning worked out pretty well.</p>

<h3>Babies sleep during the day</h3>

<p>There are many guesses as to why this is, but basically once born they sleep all day and are awake at night.  Francis was born in the middle of the day, and was nearly impossible to wake up for the first 24 hours.  His bladder and bowels worked fine, so the doctors were not concerned.  In fact, almost a week later and it is still almost impossible to wake Francis after a good feeding during the day, and impossible to get him to sleep after a good feeding during the night.</p>

<p>Right now the only things we can do is keep playing with him during the day (to the point of annoyance), and ignore him at night.  By &#8220;ignore&#8221; all I mean is we can&#8217;t make eye contact, talk to him, pet him, or talk to him.  We still pat him to burp him, shush, and bouce him to aid in sleeping, but nothing else.  Easier said then done, but we persist.</p>

<h3>Breastfeeding is hard</h3>

<p>One of the major opinions that is implicitly or explicitly stated is that every baby MUST be breastfed.  And as a women it should be the most natural thing in the world.  Guess what?  It&#8217;s not.</p>

<p>Babies do not know how to breastfeed, and more importantly they do not want to breastfeed.  They spend 9 months being given food with no work, but now they have to work for food.  And they have to work hard!</p>

<p>Worst still a women&#8217;s breast must change to make breastfeeding possible.  So even if the want is there it is very frustrating for many days/weeks.  And sometimes it will never be possible.  In our case we have to use a Nipple Shield to start the feedings because the nipples are flat and Francis doesn&#8217;t know to start sucking.</p>

<h3>Breasts are purely functional</h3>

<p>When we were in the hospital there were no less then 20 people help Mel and I breastfeed Francis, and there was nothing weird about it.  We both thought of it only in terms of what gets Francis food.</p>

<p>Even now we don&#8217;t bother drawing the curtains when breastfeeding.  There just isn&#8217;t anything weird about having a breast hanging out in prep for breastfeeding, nor is there anything sexual about it.  They have a single purpose, which is as a food supply.</p>

<p>It is the equivalent of getting aroused by a hamburger; just not something that happens (normally).</p>

<h3>Nipple confusion</h3>

<p>I guess we made the mistake of telling the doctors that we planned on breastfeeding.  The reason that I said &#8220;mistake&#8221; is because &#8220;nipple confusion&#8221; is such a pervasive argument that they removed all formula, bottles, and pacifiers that are normally provided after labor.</p>

<p>In fact, on one night it took us and several nurses over 6 hours to get just 1/2 oz of colostrum into Francis.  And during all that time breastfeeding was the only option.  It was horrible.</p>

<p>The lactation consultant seeing the medical necessity did eventually give us a breast pump, and pacifier, but no bottle.  We had to use a syringe to provide colostrum through a tube next to a finger that simulated a nipple.</p>

<p>It took a several complete feeding failures, and finally giving Francis to the nurses so we could sleep, to just get him some formula.  In fact, we weren&#8217;t allow to feed him the formula, only the nurses could and only because they could not get him satisfied otherwise.</p>

<p>It has been almost a month, we use pacifies, use bottles, and the breast and we can safely say that he has no nipple confusion.  Perhaps it is something that affects only some babies, or it is something that really hasn&#8217;t been studies and is just take as fact.</p>

<h3>The &#8220;Connection&#8221;</h3>

<p>This seems to me like the female equivalent of &#8220;comparing sizes&#8221;.  When asked women almost universally say &#8220;it was instantaneous&#8221;, or something similar.  And I am sure 3 to 6 years after labor when first asked it seems instantaneous, but it is not for some women.</p>

<p>The &#8220;connection&#8221; is real, but it takes many days, even a week or more before it really kicks in.  And assuming that <strong>all</strong> women have an instantaneous connection really just adds fuel to the baby blues.</p>

<h3>&#8220;Baby Amnesia&#8221;</h3>

<p>It has been about a month and the baby amnesia is just now starting to kicked in.  It is definiately not as originally discribed: a clam that washes over you.  It is not instantaneous.</p>

<p>Basically what happens (at least for us) is you start forgetting the details, pain, and difficulty.  And you also start to realize exactly how much you can actually deal with.  And Francis is quite, content, and smiles and you realize how awesome it is.</p>

<h3>Diapers</h3>

<p>An infant eats every 2 hours to 3 hours during the day, and 2 to 5 hours during the night.  And they pee and poop between feedings.  You would think that 12 diapers / day is about average, but it isn&#8217;t.  As adults we have learned to urinate and defecate during the same bathroom trip.  the same is not of babies.  For them they will urinate and defecate as two separate acts, and to prevent diaper rash you have to change them between each act.  That doesn&#8217;t even account for the partial pee/poop, in which they start pee or poop as soon as you take the diaper off.  And in a lot of cases they will pee or poop as soon as you get the diaper back on; and in some cases do it 3 or 4 times in a single changing.</p>

<p>24 to 30 diapers / day is closer to accurate.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bunco Phase 1.2]]></title>
    <link href="http://jkamenik.github.com/blog/2012/11/22/bunco-phase-1-dot-2/"/>
    <updated>2012-11-22T21:55:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2012/11/22/bunco-phase-1-dot-2</id>
    <content type="html"><![CDATA[<p>This is just a slight addendum to the <a href="http://jkamenik.github.com/blog/2012/11/21/bunco-phase-1/">Bunco Phase 1</a> Post.  After having used the score card in several games there are a few issues that arise with the existing layout.</p>

<ol>
<li>Input is cumbersome</li>
<li>The interface is SLOW!</li>
<li>Cannot correct screw ups</li>
</ol>


<!-- more -->


<h2>Cumbersome input</h2>

<p>It is hard to tell how well a design is going to work without actually using it.  When we actually started to use it we noticed that it was too difficult to keep track of whose turn it was and it really slowed down the game.  This is exactly the opposite of what using the phone as a scorecard should be.</p>

<p>The major reason for the slow down is that we maintain the player turn state in the app.  More specifically I <em>force</em> the management of whose turn it is.  I had done this as a way of saving space, but when implemented it sucked.</p>

<p>I redesigned things a bit to include score buttons for each player.  But in order to fix the buttons I had to lose the header and refresh button.</p>

<p><img src="http://jkamenik.github.com/images/bunco/ScoreBoard_2.png"></p>

<h2>Slow!</h2>

<p>Between clicking a score button and seeing the score applied and being able to click the button again was at least 1 second.  Not huge if you only need to enter a small number of inputs.  But a long game can take up to 246 inputs ((21 + 20)*6).  So in just the inputs it takes more then 4 minutes!  The problem is that rolling the dice is very quick with a long game being less then 2 minutes.</p>

<p>I used the Safari profiler and it was very clear that 99% of the total time was in repainting the view.  I use Backbone to get the events and a simple MVC, and as such you would expect it to refresh the view using the new data.  Specifically <em>all</em> the time was taken after triggering the &#8220;create&#8221; event.</p>

<p>The template that repeats for each round is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/template&quot;</span> <span class="na">id=</span><span class="s">&quot;round&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">data</span><span class="o">-</span><span class="nx">role</span><span class="o">=</span><span class="s2">&quot;collapsible&quot;</span> <span class="nx">data</span><span class="o">-</span><span class="nx">collapsed</span><span class="o">=</span><span class="s2">&quot;&lt;%= !active %&gt;&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;%</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">active</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">person</span> <span class="o">=</span> <span class="s2">&quot;(P&quot;</span><span class="o">+</span><span class="nx">player</span><span class="o">+</span><span class="s2">&quot;&#39;s turn)&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">complete</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">person</span> <span class="o">=</span> <span class="s2">&quot;(P&quot;</span><span class="o">+</span><span class="nx">player</span><span class="o">+</span><span class="s2">&quot; wins)&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="o">%&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="nx">Round</span> <span class="o">&lt;%=</span> <span class="nx">round_number</span> <span class="o">%&gt;</span> <span class="o">&lt;%=</span> <span class="nx">person</span> <span class="o">%&gt;&lt;</span><span class="err">/h3&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;ui-grid-a&quot;</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;ui-block-a&quot;</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;%=</span> <span class="nx">p1_score</span> <span class="o">%&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;ui-block-b&quot;</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;%=</span> <span class="nx">p2_score</span> <span class="o">%&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The view is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">score_card</span><span class="p">.</span><span class="nx">RoundListView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">template</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#round&quot;</span><span class="p">).</span><span class="nx">html</span><span class="p">());</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">dom</span>      <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">;</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">template</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">dom</span><span class="p">.</span><span class="nx">empty</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">round</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">dom</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">template</span><span class="p">(</span><span class="nx">round</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">()));</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// needed for jquery to rerender dom</span>
</span><span class='line'>      <span class="nx">dom</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s1">&#39;create&#39;</span><span class="p">);</span>  <span class="c1">// Massive time sink, 99% of rendering time</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>When any record is changed I rerender the entire page.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">rounds</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">model</span><span class="p">){</span><span class="nx">view</span><span class="p">.</span><span class="nx">render</span><span class="p">()});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Find and replace, instead of rerender</h3>

<p>Rerendering shouldn&#8217;t really be an issue, but it turns out that jQuery Mobile does a huge amount of DOM pollution, which is hugely expensive.  It would be much faster if we could just find and replace single items and regenerating the entire page.</p>

<p>I changed the template to include more IDs to making finding items faster and easier:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/template&quot;</span> <span class="na">id=</span><span class="s">&quot;round&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">data</span><span class="o">-</span><span class="nx">role</span><span class="o">=</span><span class="s2">&quot;collapsible&quot;</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;round&lt;%=round_number%&gt;&quot;</span> <span class="nx">data</span><span class="o">-</span><span class="nx">collapsed</span><span class="o">=</span><span class="s2">&quot;&lt;%= !active %&gt;&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;%</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">complete</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">person</span> <span class="o">=</span> <span class="s2">&quot;(P&quot;</span><span class="o">+</span><span class="nx">player</span><span class="o">+</span><span class="s2">&quot; wins)&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">p1_score_id</span> <span class="o">=</span> <span class="s2">&quot;p1_r&quot;</span><span class="o">+</span><span class="nx">round_number</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">p2_score_id</span> <span class="o">=</span> <span class="s2">&quot;p2_r&quot;</span><span class="o">+</span><span class="nx">round_number</span><span class="p">;</span>
</span><span class='line'>        <span class="o">%&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="nx">Round</span> <span class="o">&lt;%=</span> <span class="nx">round_number</span> <span class="o">%&gt;</span> <span class="o">&lt;%=</span> <span class="nx">person</span> <span class="o">%&gt;&lt;</span><span class="err">/h3&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;ui-grid-a&quot;</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;ui-block-a&quot;</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="nx">span</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;&lt;%= p1_score_id %&gt;&quot;</span><span class="o">&gt;</span>
</span><span class='line'>                    <span class="o">&lt;%=</span> <span class="nx">p1_score</span> <span class="o">%&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="err">/span&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;ui-block-b&quot;</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="nx">span</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;&lt;%= p2_score_id %&gt;&quot;</span><span class="o">&gt;</span>
</span><span class='line'>                    <span class="o">&lt;%=</span> <span class="nx">p2_score</span> <span class="o">%&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="err">/span&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I added a find and replace method to the view:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">score_card</span><span class="o">.</span><span class="n">RoundListView</span> <span class="o">=</span> <span class="no">Backbone</span><span class="o">.</span><span class="n">View</span><span class="o">.</span><span class="n">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="sr">//s</span><span class="n">ame</span> <span class="n">as</span> <span class="n">before</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">findAndReplace</span><span class="p">:</span> <span class="n">function</span><span class="p">(</span><span class="n">round</span><span class="p">){</span>
</span><span class='line'>      <span class="n">var</span> <span class="n">player</span>   <span class="o">=</span> <span class="n">round</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;player&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">var</span> <span class="n">complete</span> <span class="o">=</span> <span class="n">round</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;complete&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">var</span> <span class="n">number</span>   <span class="o">=</span> <span class="n">round</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;round_number&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">var</span> <span class="n">p1_score</span> <span class="o">=</span> <span class="n">round</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;p1_score&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">var</span> <span class="n">p2_score</span> <span class="o">=</span> <span class="n">round</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;p2_score&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">this</span><span class="o">.</span><span class="vg">$el</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s2">&quot;#p1_r&quot;</span><span class="o">+</span><span class="n">number</span><span class="p">)</span><span class="o">.</span><span class="n">html</span><span class="p">(</span><span class="n">p1_score</span><span class="p">);</span>
</span><span class='line'>      <span class="n">this</span><span class="o">.</span><span class="vg">$el</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s2">&quot;#p2_r&quot;</span><span class="o">+</span><span class="n">number</span><span class="p">)</span><span class="o">.</span><span class="n">html</span><span class="p">(</span><span class="n">p2_score</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">complete</span><span class="p">){</span>
</span><span class='line'>        <span class="n">this</span><span class="o">.</span><span class="vg">$el</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;#round&#39;</span><span class="o">+</span><span class="n">number</span><span class="o">+</span><span class="s1">&#39; h3 .ui-btn-text&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">html</span><span class="p">(</span><span class="s2">&quot;Round &quot;</span><span class="o">+</span><span class="n">number</span><span class="o">+</span><span class="s2">&quot; (P&quot;</span><span class="o">+</span><span class="n">player</span><span class="o">+</span><span class="s2">&quot; wins)&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">trigger</span><span class="p">(</span><span class="s1">&#39;collapse&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="sr">//</span> <span class="k">when</span> <span class="n">chaging</span> <span class="n">a</span> <span class="n">header</span> <span class="ow">and</span> <span class="n">mark</span> <span class="n">the</span> <span class="n">winner</span> <span class="n">we</span> <span class="n">have</span> <span class="n">to</span> <span class="n">repaint</span> <span class="n">the</span> <span class="n">entire</span> <span class="n">page</span><span class="o">.</span>
</span><span class='line'>        <span class="n">this</span><span class="o">.</span><span class="vg">$el</span><span class="o">.</span><span class="n">trigger</span><span class="p">(</span><span class="s1">&#39;create&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="sr">//</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">complete</span> <span class="n">just</span> <span class="n">make</span> <span class="n">sure</span> <span class="n">the</span> <span class="n">item</span> <span class="n">is</span> <span class="n">expanded</span>
</span><span class='line'>        <span class="n">this</span><span class="o">.</span><span class="vg">$el</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;#round&#39;</span><span class="o">+</span><span class="n">number</span><span class="o">+</span><span class="s1">&#39; h3&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">trigger</span><span class="p">(</span><span class="s1">&#39;expand&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then I just need to change the on change event to find:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">rounds</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">model</span><span class="p">){</span><span class="nx">view</span><span class="p">.</span><span class="nx">findAndReplace</span><span class="p">(</span><span class="nx">model</span><span class="p">)});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Screw ups</h2>

<p>Adding points to the wrong user happens, and for the time being I still don&#8217;t have a good answer.  But then again there are a lot of design changes to be tested before we try to tackle this.  It is hard to tell if this will even be an issue now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bunco Phase 1]]></title>
    <link href="http://jkamenik.github.com/blog/2012/11/21/bunco-phase-1/"/>
    <updated>2012-11-21T08:21:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2012/11/21/bunco-phase-1</id>
    <content type="html"><![CDATA[<p>Phase 1 is always a learning experience.  Often very little work is done, but a lot of research is done.  I generally do not like that approach.  Instead I like to start out simple and let that guide me.  And it has guided me to a initial working version at <a href="http://jkamenik.github.com/Bunco">http://jkamenik.github.com/Bunco</a>.</p>

<!-- more -->


<h2>The Target</h2>

<p>Before any design could start I first had to decide what language, what library, what device, and how it will be accessed.</p>

<h3>Device</h3>

<p>I have my phone with me everywhere I go.  So it is a clear choice as the scorecard and input device.  The only question then becomes: do I host it from the web, or create a native app?</p>

<p>I don&#8217;t know native iPhone, but I know that PhoneGap can be used to generate a native app from a hosted one.  So I can still go native if I want, but I don&#8217;t have to start with an all or nothing approach.</p>

<h3>Hosting</h3>

<p>Now that I have decided on using the phone and hosting I have to figure out where to host and let that inform what else is available to me.</p>

<p>I could use a standard LAMP install on a hosting provider, but those can get expensive.</p>

<p>I could use a home server with DDNS to reverse port through my firewall, but I don&#8217;t like maintaining my own infrastructure.</p>

<p>I could use a Micro Amazon EC2 instance (free for the first year), but again I have to do a lot of setup.</p>

<p>I could use Heroku and either spin-up a simple Node.js or Ruby on Rails app.  Actually I started doing this, but then decided that in this stage with the need to message between phones it was overkill to even setup a server.</p>

<p>That is where Github Pages comes in.  I already use them to serve my blog, and a few other things.  And I am pretty much serving a static site.  All I have to do is work out of a git branch called gh_pages and everything will just work.</p>

<h3>Lanuage and Libraries</h3>

<p>Knowing that I am serving a static site from GitHub I open to using the web, but limited into things that are pre-compiled and static.  And since it going to be for the iPhone jQuery Mobile is a natural fit because it just uses HTML5&#8217;s Semantic markup features.</p>

<p>I could use CoffeeScript - in fact if it gets any bigger I will - which compile to Javascript, but has a lot of niceties I am used to when working on Rails.  But since this isn&#8217;t a full blown Rails 3.2 app - with the full asset pipeline and compiling, minifying, and cache busting that goes along with it - the boon of CoffeeScript is slightly diminished.  Also, since I am starting with a library I haven&#8217;t used before it might be more complicated debugging a CoffeeScript bug vs a jQuery Mobile bug.  I will leave CoffeeScript on the back burner for now.</p>

<h4>Aside (Backbone.js)</h4>

<p>As an aside, when I started I was writing raw JS hashes, but was having trouble keeping things sorted.  I remember my days of using ExtJS, which is great for managing complex GUIs, but very large.  Then I remembered Backbone.js which is what I use now.  Much smaller, and less cumbersome.</p>

<h2>Design</h2>

<p>Once all the limitation are know (or at least most of them) everything starts with a design.  And I am not graphic designer, so I usually just go at the problem using rails.  Not really an option here.</p>

<p>But since I plan on using jQuery Mobile, right on their website they have a embedded designer.  The output is HTML5 markup with the &#8220;data&#8221; flash that jQuery Mobile uses.  Here is my initial design:</p>

<!-- image here -->


<ol>
<li>Header - Refresh button and title</li>
<li>Footer - Scoring buttons: 0, 1, 5, 21</li>
<li>Body - The score board.  Players across, Rounds down.</li>
</ol>


<h3>The score board</h3>

<p>Very quickly I figured out that I really didn&#8217;t have the room for the scoreboard.  Not without shrinking the size of the text to unreadable levels.  So I had to switch to another style.</p>

<p>Enter the accordion.  Instead of a grid where I see all scores I use an accordion showing the round number of the scores for both players.  Sure only really get to the see the score of current round, but I can just add the winner of the round to the visible title and that solves the problem.  Plus it takes up less room total, which is a win.</p>

<p><img src="http://jkamenik.github.com/images/bunco/ScoreBoard_1.png"></p>

<!-- image here -->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bunco]]></title>
    <link href="http://jkamenik.github.com/blog/2012/11/10/bunco/"/>
    <updated>2012-11-10T10:30:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2012/11/10/bunco</id>
    <content type="html"><![CDATA[<p>The rules of Bunco are very easy, but you really do need to have 12 players or so.  Mel and I were able to modify the rules to work better for just two players, but it is very annoying to have to have record score with such a fast paced game.  I would like to eventually allow Mel and I to play the game over the internet like <em>Words with Friends</em>.</p>

<p>See: <a href="http://en.wikipedia.org/wiki/Bunco">Bunco</a></p>

<!-- more -->


<h2>Rules</h2>

<p>Like I siad the rule are very easy, but they can and do change based on the group you are with.  The official Bunco site has the rules for a full group of 12 people.  And they only deal with multiples of 4.  We are 2 people so we are going to modify the rules a bit.  They are as follows:</p>

<ol>
<li>There are 6 rounds (each corresponding to a number on the die)</li>
<li>Each player roles 3 dice</li>
<li>1 point is gained for each die matching the round number</li>
<li>5 points are gained if all dice match (but don&#8217;t match the round number, i.e. 5,5,5 in round 1)</li>
<li>21 points are gained if all dice match the round number</li>
<li>The player keeps rolling until no points are gained in a role</li>
<li>The first player to 21 points wins the round</li>
<li>The player that wins the most round (4 of 6) wins</li>
</ol>


<h2>Aproach</h2>

<p>I find that if I approach a project from Ivory tower then it ends up being to big and I will not start anything.  I find that if you split things up into distinct steps it is easy to get started.  Also, between each step you can evaluate the success over the previous step, expand or contract the next step, or change directions entirely.</p>

<h3>Phase 1 - Infrastructure / Design / Score Card</h3>

<p>This phase is probably too big, but the end goal is to have a clean but simple score board.  It has to work, but it has to work well and be better then a pen and paper.  Also, part of the design we have to choose the infrastructure including: the online hosting provider, the language, the libraries, and the client.</p>

<h3>Phase 2 - Add Dice</h3>

<p>Once we have a simple score board going it shouldn&#8217;t be too much work to add rolling of the dice to the game.  This step is kept purposely small because there are likely a lot of things learned in the previous section and will bleed into this phase.</p>

<h3>Phase 3 - Multiplayer</h3>

<p>The end goal is to be able to have two players to play over the internet.  So we have to think about things like maintaining sessions, user signups, tracking stats, keeping users in sync, and realtime signaling.</p>

<p>This section is way to big, but it is too early to go into too much detail.  It is going to be interesting to see how
close I get to my ultimate goal, and how long it takes to get there.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Factory Girl Automatic Tests]]></title>
    <link href="http://jkamenik.github.com/blog/2012/03/09/factory-girl-automatic-tests/"/>
    <updated>2012-03-09T00:00:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2012/03/09/factory-girl-automatic-tests</id>
    <content type="html"><![CDATA[<p>Early in a project I started to use factory girl without fully understanding it. After many months of creating steps like <code>Given /^(\d+) blog exists$/</code> and <code>Given /^the following blogs exist:$/</code> I started to come up with generic functions that would build those steps.</p>

<p>Stupid me for not checking that factory girl already does something like that. All you have to do is include factory girl&#8217;s <a href="http://github.com/thoughtbot/factory_girl/blob/master/lib/factory_girl/step_definitions.rb">step_definition</a> file:</p>

<figure class='code'><figcaption><span>env.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">requie</span> <span class="s1">&#39;factory_girl/step_definitions&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once you start using FactoryGirl correctly there are a world of new features that can make your steps both cleaner and more concise. Here are some tips I have found via trial and error.</p>

<!-- more -->


<h1>Tip 1: Do not reinvent the wheel</h1>

<p>Factory girl will create steps for all factories that you have register.</p>

<figure class='code'><figcaption><span>example_steps.feature</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Scenario: Showing example steps
</span><span class='line'>  Given the following blogs exist:
</span><span class='line'>    | name       |
</span><span class='line'>    | first blog |
</span><span class='line'>  Given a blog exists with a name of &quot;first blog&quot;
</span><span class='line'>  Given a blog exists
</span><span class='line'>  Given 41 blogs exist
</span><span class='line'>  Given 14 blogs exist with a description of &quot;Test&quot;
</span></code></pre></td></tr></table></div></figure>


<h1>Tip 2: Use association, Do not add more steps then are needed</h1>

<p>Factory girlassociation are automatically created before the factory is created and they are automatically linked. It only supports the <strong>belongs_to</strong> behavior, so keep that in mind.</p>

<p>Using the &#8221;<strong>Given the following XXX exist</strong>&#8221; step you can define attributes, on the theassociation, in the table. If we leave the association out then a default is created. If we define an attribute then it will be found or created using that attribute.</p>

<p>Lets say you have a product and it can belog to a category. You do not need to create a category.</p>

<figure class='code'><figcaption><span>product_category.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Category</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Product</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:category</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:category</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s1">&#39;Foo&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:product</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">association</span> <span class="ss">:category</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">name</span> <span class="s1">&#39;Bar&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>product_category.feature</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Scenario: Bad
</span><span class='line'> Given a category exists with a name of &quot;Foo&quot;
</span><span class='line'> Given a product exists with a category of &quot;Foo&quot;
</span><span class='line'>
</span><span class='line'>Scenario: Good
</span><span class='line'>  Given the following products exist:
</span><span class='line'>    | name | category  |
</span><span class='line'>    | Foo  | name: Bar |
</span></code></pre></td></tr></table></div></figure>


<h1>Tip 3: Attaching files via CarrierWave</span></h1>

<p>Since cucumber is a text file it doesn&#8217;t make much sense for you to define full files in steps. It also doesn&#8217;t really make sense to embed full file paths in the tests. Instead, you can use a Transient attribute and some code so that in cucumber you define a file name and in the factory it converts to an actual file.</p>

<figure class='code'><figcaption><span>file_product.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Product</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">mount_uploader</span> <span class="ss">:file</span><span class="p">,</span> <span class="no">FileUploader</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:product</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">ignore</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">file_name</span> <span class="s1">&#39;small_image.png&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">file</span> <span class="p">{</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;path/to/files&quot;</span><span class="p">,</span><span class="n">file_name</span><span class="p">))</span> <span class="k">unless</span> <span class="n">file_name</span><span class="o">.</span><span class="n">blank?</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>file_product.feature</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Scenario: Products
</span><span class='line'>  Given a product exists
</span><span class='line'>    # 1 product with an included file whose file_name was &quot;small_image.png&quot;
</span><span class='line'>  Given the following products exist:
</span><span class='line'>    | name      | file name     |
</span><span class='line'>    | No image  |               |
</span><span class='line'>    | Big image | big_image.png |
</span></code></pre></td></tr></table></div></figure>


<h1>Tip 4: Fixing a circular dependency between two models</span></h1>

<p>Lets say you have a Store model and User model. And a User can both work at and own a Store. If you put associations in both the User and the Store model then each will try to create the other, infinitely. We can reuse the transient method as before to break the circle.</p>

<p>The trick is to avoid defining an association in both factories, but instead use a transient attribute in one factory to simulate the behavior of an association. Also, since transient attributes are not likely to have the same level of sophistication as the associations you should use the association to define the more complex of the two models.</p>

<figure class='code'><figcaption><span>user_store.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:store</span>
</span><span class='line'>  <span class="n">has_many</span>   <span class="ss">:stores</span><span class="p">,</span> <span class="ss">:foreign_key</span> <span class="o">=&gt;</span> <span class="s1">&#39;owner_id&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Store</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:owner</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s1">&#39;User&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:user</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s1">&#39;John Doe&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ignore</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">store_name</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">store</span> <span class="p">{</span><span class="no">Store</span><span class="o">.</span><span class="n">find_or_create_by_name</span><span class="p">(</span><span class="n">store_name</span> <span class="o">||</span> <span class="s1">&#39;Test store&#39;</span><span class="p">)}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:store</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s1">&#39;Test store&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">association</span> <span class="ss">:owner</span><span class="p">,</span> <span class="ss">:factory</span> <span class="o">=&gt;</span> <span class="ss">:user</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>user_store.feature</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Scenario: 2 users named &#39;John Doe&#39;, and 2 stores named &quot;Test store&quot;
</span><span class='line'>  Given a user exists
</span><span class='line'>  Given a store exists
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Scenario: 2 users both working at the same store
</span><span class='line'>  Given the following users exist:
</span><span class='line'>    | name     | store name |
</span><span class='line'>    | John Doe | Test store |
</span><span class='line'>    | Jane Doe | Test store |
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Scenario: 2 stores both owned by the same person
</span><span class='line'>  Given the following stores exist:
</span><span class='line'>    | name     | owner          |
</span><span class='line'>    | MD Store | name: John Doe |
</span><span class='line'>    | CA Store | name: John Doe |
</span></code></pre></td></tr></table></div></figure>


<h1>Tip 5: Fixing a circular dependency between the same model</span></h1>

<p>Let say you have a Category model, and that model can belong to another Category (a tree) then you cannot use an association or you get the same infinite recursion issue as before. Here we can use a transient attribute along with an <strong>after_create</strong> hook to simulate the behavior we want.</p>

<figure class='code'><figcaption><span>category.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Category</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">acts_as_nested_set</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:category</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s1">&#39;Foo&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ignore</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">parent</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">after_create</span> <span class="k">do</span> <span class="o">|</span><span class="n">category</span><span class="p">,</span><span class="n">attributes</span><span class="o">|</span>
</span><span class='line'>      <span class="k">unless</span> <span class="n">attributes</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">blank?</span>
</span><span class='line'>        <span class="n">parent</span> <span class="o">=</span> <span class="no">Category</span><span class="o">.</span><span class="n">find_by_name</span><span class="p">(</span><span class="n">attributes</span><span class="o">.</span><span class="n">parent</span><span class="p">)</span>
</span><span class='line'>        <span class="n">category</span><span class="o">.</span><span class="n">move_to_child_of</span><span class="p">(</span><span class="n">parent</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>category.feature</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Scenario: Has no parents
</span><span class='line'>  Given the following categories exist:
</span><span class='line'>    | name |
</span><span class='line'>    | Foo  |
</span><span class='line'>    | Bar  |
</span><span class='line'>    | Baz  |
</span><span class='line'>
</span><span class='line'>Scenario: Nested tree
</span><span class='line'>  Given the following categories exist:
</span><span class='line'>    | name | parent |
</span><span class='line'>    | Foo  |        |
</span><span class='line'>    | Bar  | Foo    |
</span><span class='line'>    | Baz  | Bar    |
</span><span class='line'>
</span><span class='line'>  # + Foo
</span><span class='line'>  # |+ Bar
</span><span class='line'>  #  |- Baz
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CI server using Firefox]]></title>
    <link href="http://jkamenik.github.com/blog/2011/11/30/ci-server-using-firefox/"/>
    <updated>2011-11-30T00:00:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2011/11/30/ci-server-using-firefox</id>
    <content type="html"><![CDATA[<p>If you are like me, you always setup a CI to ensure things that you already finished are not broken by things you are currently doing. And if you are like me, you use <a href="http://github.com/jnicklas/capybara">capybara</a>, <a href="http://github.com/lanej/selenium-webdriver">selenium-webdriver</a>, and <a href="http://www.mozilla.org/en-US/firefox/new/">firefox</a> to actually test the results in a browser. The rub comes when the CI server (running headless) needs to run firefox, which needs a screen.</p>

<p>Virtual Frame Buffer (xvfb) is a great package. All it does is provide an X11 interface in memory instead of requiring a screen. Below I detail what I do on Ubuntu, but it should work the same on any Linux distro.</p>

<!-- more -->


<h3>Installing Firefox</h3>

<div><script src='https://gist.github.com/1409172.js?file=install_firefox.sh'></script>
<noscript><pre><code>$ sudo apt-get install firefox</code></pre></noscript></div>


<h3>Testing Firefox</h3>

<div><script src='https://gist.github.com/1409172.js?file=test_firefox.sh'></script>
<noscript><pre><code>$ echo $DISPLAY
localhost:10.0
$ firefox</code></pre></noscript></div>


<p>Once firefox is installed it can be tested on a X11-forwarded ssh connection. X11-forwarding has to be enabled on the server and client and can be tested by checking <code>DISPLAY</code>.</p>

<h3>Installing Xvfb</h3>

<div><script src='https://gist.github.com/1409172.js?file=install_xvfb.sh'></script>
<noscript><pre><code>$ sudo apt-get install xvfb
...Lots of stuff...</code></pre></noscript></div>


<h3>Testing Firefox again</h3>

<div><script src='https://gist.github.com/1409172.js?file=test_firefox_again.sh'></script>
<noscript><pre><code>$ sudo apt-get install imagemagick
$ Xvfb :1 &amp;
$ export DISPLAY=:1
$ firefox http://google.com
...from another terminal...
$ export DISPLAY=:1
$ import -window root example.png
...from another terminal...
$ killall firefox
$ firefox example.png</code></pre></noscript></div>


<p>The easiest way to test is to use image magick to take a screen shot of the VFB and save it to an image that can be opened in Firefox. If the image opens and it looks like a firefox browser is running on the google page then you did it correctly.</p>

<h3>Create a xvfb startup script</h3>

<div><script src='https://gist.github.com/1409172.js?file=xvfb.sh'></script>
<noscript><pre><code>/usr/bin/Xvfb :1 &amp;</code></pre></noscript></div>


<p>On ubuntu no start script is provided, but a simple one put in <code>/etc/init.d/xvfb</code> is enough.</p>

<h3>Getting the CI server to use the VFB</h3>

<p>At this point getting a CI server to use Xvfb will depend on how it is started. If you use the Xvfb startup script then the display is <code>:1</code>. All you have to do is <code>export DISPLAY=:1</code> before the CI server starts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby module instance and class methods]]></title>
    <link href="http://jkamenik.github.com/blog/2011/11/21/ruby-module-instance-and-class-methods/"/>
    <updated>2011-11-21T00:00:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2011/11/21/ruby-module-instance-and-class-methods</id>
    <content type="html"><![CDATA[<p>A very common idiom especially when code starts to become complicated is to put functions in modules and mix in that behavior to several classes. And a common expansion is to have a single <code>include</code> add both instance and class methods.</p>

<!-- more -->


<p>Here is how to do it:</p>

<div><script src='https://gist.github.com/1384045.js?file=include.rb'></script>
<noscript><pre><code>module Foo
  def self.included(base)
    base.extend ClassMethods
  end

  module ClassMethods
    def bar
    end
  end

  def baz
  end
end

class Test
  include Foo
end

Test.bar     # class method
Test.new.bar # No method error
Test.baz     # No method error
Test.new.baz # Instance method
</code></pre></noscript></div>


<p><code>include</code> is used to add a module&#8217;s instance methods as instance methods to the including class, but it doesn&#8217;t traverse sub modules. <code>extend</code> is used to add a module&#8217;s instance methods as class methods to a class.</p>

<p>When a module is <code>included</code> it can register a callback which is passed the class that is doing the including. And calling <code>extend</code> on the base and passing a submodule will cause it to put those methods at the class level. This causes a chain reaction of loading both instance and class methods using a single <code>include</code>.</p>

<p><strong>Pro Tip</strong>: It is possible to cause the same behavior using <code>extend</code> by using the <code>extended</code> callback; however, this is not common and <code>include 'x'</code> reads better then <code>extend 'y'</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The 3N Rule for deployment]]></title>
    <link href="http://jkamenik.github.com/blog/2011/08/16/3n-rule-for-deployment/"/>
    <updated>2011-08-16T00:00:00-04:00</updated>
    <id>http://jkamenik.github.com/blog/2011/08/16/3n-rule-for-deployment</id>
    <content type="html"><![CDATA[<p>As a programmer I am lazy, but in a productive way.  It is not that I don&#8217;t do anything.  It is that I only do things a set number of times.  I have a simple rule, which I call the &#8220;3N rule&#8221;, which states &#8220;I will doing something once, script it the second time, and use the script from then on&#8221;.  Therefore, if I have 3 to N devices to manage then I have a script that takes minimal input and replicates the change on all devices.</p>

<!-- more -->


<p>I also have a 3N rule for programming, but that is a matter for another time.</p>

<p>By using a script I eliminate a lot of the human error and also increase my productivity because computers are, now days, faster at responding to stimuli then I am.  But computers are &#8220;swift idiots&#8221; so for this to work the environment has got to be controlled.  I recommend doing the following:</p>

<ol>
<li>Use VMs</li>
<li>Run headless, enable SSH</li>
<li>Use <a href="http://sourceforge.net/apps/mediawiki/clusterssh/index.php?title=Main_Page">ClusterSSH</a> or <a href="http://code.google.com/p/csshx/">csshX</a> for learning what to script</li>
<li>Use <a href="https://github.com/capistrano/capistrano/wiki">Capistrano</a> or <a href="http://docs.fabfile.org/en/1.2.0/index.html">Fabric</a> for automating change</li>
</ol>


<p>By using a VM and running headless you remove the temptation to sit at a physical terminal. It also eliminates the fear associated with screwing something up as it is trivial to snapshot a machine and restore its state.</p>

<p>By using SSH and ClusterSSH you enable yourself to start thinking about the cluster as a whole, and more importantly start acting on the cluster as a whole. If some of the servers get out of sync then it makes management more difficult, so by using ClusterSSH you eliminate that problem.</p>

<p>By using Capistrano, or its like, then you eliminate the human error entirely. This is just good policy. Also, a benefit of a deployment script is that it is self documenting (assuming you know how to read).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Problems with Agile Implementation]]></title>
    <link href="http://jkamenik.github.com/blog/2011/01/10/problems-with-agile-implementation/"/>
    <updated>2011-01-10T00:00:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2011/01/10/problems-with-agile-implementation</id>
    <content type="html"><![CDATA[<p>I really like agile programming. It keeps me close to the action, and makes me have to think about my next moves. It also keeps me informed as to what is going on around me. But in my many years of using agile I realize that, though the process itself is very nice, its implementations can tend not to be.</p>

<!--more-->


<p>Problem don&#8217;t arise from agile itself, but who and how it was implemented. If the implementer&#8217;s goals do not match the <a href="http://en.wikipedia.org/wiki/Agile_software_development">Agile Manifesto</a> there is little chance of success. I have used <a href="http://en.wikipedia.org/wiki/Scrum_(development)">scrum</a> many times and the most common problems I see are:</p>

<ol>
<li>Agile as Micromanagement</li>
<li>Agile as a Whip</li>
<li>Agile as an Excuse</li>
</ol>


<h3>Agile as Micromanagement</h3>

<h4>It looks like:</h4>

<ol>
<li>Having to break task down into hourly segments of work</li>
<li>Having to break task that logically have to be done by a single person</li>
<li>Having to account for ALL time taken, even time not related to code like attending meetings</li>
</ol>


<h4>Agile tenet misused:</h4>

<ol>
<li>Individuals and interactions over process and tools</li>
<li>Working software over comprehensive documentation</li>
</ol>


<p>This happens when a manager (<a href="http://en.wikipedia.org/wiki/Scrum_(development)#.E2.80.9CChicken.E2.80.9D_roles">chicken role</a>) is the Scrum Master or when the Product Owner has say over implementation specifics. It is a confusion of roles, which in turn leads to a confusion of goals, which in turn leads to over documentation.</p>

<h3>Agile as a Whip</h3>

<h4>It looks like:</h4>

<ol>
<li>Filtering a burn-down on an individual basis</li>
<li>Placing more in the sprint then can be done (but still requiring it all to be done)</li>
<li>Associating points with people (publicly)</li>
<li>Associating number of tasks done with effort</li>
<li>Associating points with hours</li>
<li>Basically anything where measured output is more important then people</li>
</ol>


<h4>Agile tenet misused:</h4>

<ol>
<li>Individuals and interactions over process and tools</li>
</ol>


<p>Anytime you associate numbers with people you have created a <a href="http://en.wikipedia.org/wiki/Crab_mentality">crab mentality</a>. Their focus will stop being on software, but on making their numbers better. Those that are better at number games will succeed, those that are better at software will fail.</p>

<p>Anytime you put your people under undo pressure then simple mistakes are made. This is going to later erode confidence in the team. It is going to happen like this: &#8220;you missed a comma in a Javascript file which causes it not to work in IE. That was such a simple mistake to have tested for that I am not sure you are testing any of your code.&#8221; The problem was caused by 4 hours of sleep in 72 hours of coding at the end of an over-extended sprint. The programmer was nearly delirious. It is shocking it was the only mistake, not that it was a simple mistake!</p>

<p>Unfortunately I have seen this situation start innocent enough, with comments like &#8220;we don&#8217;t want to over work the staff&#8221; or &#8220;we want to make sure they always have something to do&#8221; or &#8220;we want them working on the correct things&#8221;. If the &#8220;we&#8221; in question is management (<a href="http://en.wikipedia.org/wiki/Scrum_(development)#.E2.80.9CChicken.E2.80.9D_roles">chicken role</a>) then there is probably already micromanagement going on, and Agile is being used as whip to solve the problems created by the bad implementation.</p>

<h3>Agile as an Excuse.</h3>

<h4>It looks like:</h4>

<ol>
<li>&#8220;You said it would take XXX. It took YYY. You need to make up the difference out of your own time&#8221;</li>
<li>&#8220;We cannot slip these date, and you have already pared back the release N sprints ago. You need to put in extra effort&#8221;</li>
<li>&#8220;Agile is about being agile. Even though we are mid sprint we are radically changing direction, but we are not canceling the sprint or doing sprint planning. We are just swapping out some tasks for others.&#8221;</li>
<li>&#8220;You picked the language. It is now your problem to bring this project to conclusion and under budget.&#8221;</li>
</ol>


<h4>Agile tenet misused:</h4>

<ol>
<li>Individuals and interactions over process and tools</li>
<li>Responding to change over following a plan</li>
</ol>


<p>These are all excuses I have heard. Each time given by a person in <a href="http://en.wikipedia.org/wiki/Scrum_(development)#.E2.80.9CChicken.E2.80.9D_roles">chicken role</a> (managers) because they are ignoring changes in the field (military term). Every choice has a set of outcomes: some good, some bad. The attempt with agile is not to mitigate bad outcomes, but to allow those outcomes to contribute to the overall direction.</p>

<p>Sometimes the bad outcome will be that something took to long, or that one language/tool was not the correct choice given the problem set. If for every problem that happens the developer has to take their own time, or face embarrassment, to solve the problem then they will stop making choices. Not just choices that might have bad outcomes, but choices altogether. At which point someone in a <a href="http://en.wikipedia.org/wiki/Scrum_(development)#.E2.80.9CChicken.E2.80.9D_roles">chicken role</a> will start making more choices then they should.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JS Unit Testing using YUI]]></title>
    <link href="http://jkamenik.github.com/blog/2010/12/15/js-unit-testing-using-yui/"/>
    <updated>2010-12-15T00:00:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2010/12/15/js-unit-testing-using-yui</id>
    <content type="html"><![CDATA[<p>Ok, Selenium was a partial success that you can read about <a href="http://randomsoftwareinklings.blogspot.com/2010/11/learning-selenium.html">here</a>, but it really was harder then I wanted it to be and it required a lot of setup for only a little bit of testing. I noticed that a project that I use a lot ExtJS uses a modified version of YUI Test. So I converted my Selenium test example to YUI Test.</p>

<!-- more -->


<p>My initial impression was confusion because you have to download the entire YUI 2 suite just get to get the <a href="http://developer.yahoo.com/yui/yuitest/">test tools</a>. Also, when you download the entire suite they are many different copies of the same file in various stages of minification. But following the documentation I boiled down exactly what I needed and threw away the rest. I put all the code for my test <a href="https://github.com/jkamenik/yui-test-example">here</a> so you can follow along.</p>

<p>You will need the following files from the YUI archive:</p>

<ul>
<li>build/logger/assets/logger.css</li>
<li>build/logger/logger.js</li>
<li>build/yuiloader-dom-event/yuiloader-dom-event.js</li>
<li>build/yuitest/assets/testlogger.css</li>
<li>build/yuitest/yuitest.js</li>
</ul>


<p>Create an HTML file that includes the css and js files:</p>

<div><script src='https://gist.github.com/1151464.js?file=index-header.html'></script>
<noscript><pre><code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;logger.css&quot;&gt;
&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;testlogger.css&quot;&gt;

&lt;!-- Test runner code --&gt;
&lt;script src=&quot;yahoo-dom-event.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;logger.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;yuitest.js&quot;&gt;&lt;/script&gt;</code></pre></noscript></div>


<p>The HTML will also need to instantiate the test logger and run the test runner global. I bound the test run to a button so I could control when it ran:</p>

<div><script src='https://gist.github.com/1151464.js?file=index-body.html'></script>
<noscript><pre><code>&lt;body&gt;
    &lt;input onclick=&quot;javascript:runAllTests()&quot; type=&quot;button&quot; value=&quot;Run Tests&quot; /&gt;
    
    &lt;script&gt;
        new YAHOO.tool.TestLogger();
        
        function runAllTests(){
            YAHOO.tool.TestRunner.run();
        }
    &lt;/script&gt;
&lt;/body&gt;</code></pre></noscript></div>


<p>Now that we have a <code>YAHOO.tool.TestRunner</code> we need to add a test that can be run.  Instantiate a <code>new YAHOO.tool.TestCase</code> and add it to the TestRunner. All a TestCase needs is a name and a bunch of functions that start with &#8220;test&#8221;. Everything else is automatic. Below is a simplified version of the <a href="https://github.com/jkamenik/yui-test-example/blob/master/test.js">full file</a>.</p>

<div><script src='https://gist.github.com/1151464.js?file=test.js'></script>
<noscript><pre><code>var assert = YAHOO.util.Assert;

YAHOO.tool.TestRunner.add(new YAHOO.tool.TestCase({
  name: 'Tests for string',
  
  test_true: function(){
    var test = String(true);
    assert.isString(test);
    assert.areEqual('true',test);
  }
});</code></pre></noscript></div>


<h2>Conclusion</h2>

<p>Though Selenium is more automated that comes at the cost of being more complicated then testing should be. If I were a team of programmers then sure setting up and maintaining Selenium Remote controls would be a small part of the overall effort, but since I am not a team of programmers I think it is overkill.</p>

<p>What I really need is an easy to run, easy to write, repeatable, unit testing framework in JS. I do the leg work on pointing my various browsers at the html and reviewing the results. When things get big enough that I need to setup a continuous integration server, or I have a QA department, then I will give Selenium another go. For now YUI test is the way to go.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dealing with Email overload]]></title>
    <link href="http://jkamenik.github.com/blog/2010/12/12/dealing-with-email-overload/"/>
    <updated>2010-12-12T00:00:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2010/12/12/dealing-with-email-overload</id>
    <content type="html"><![CDATA[<p>This isn&#8217;t strictly software related, but a lot of us have to deal with the horror that is email. Email is not a good solution to any problem, but it is ubiquitous so it is used for all things: personal correspondence, commit tracking, defect notification, task notification, etc&#8230; Email is all to often used as a mechanism to pass-the-buck.</p>

<p>The only way to deal with this email overload is to set boundaries on email usage. A lot of people will find these boundaries annoying, if not unworkable. Just stick with it and lead by example. Eventually, in a time of high stress, you will be able to get to important messages fast and they will be left floundering.</p>

<!--more-->


<h2>My results</h2>

<p>I am putting the summary first in hopes that you might actually try some of these suggestions. On average I get 50 to 200 work related emails a day. In any given day (saturday and sunday included) I will need to respond to 5 to 10 of them. That means that I get between 40 and 195 junk emails that pass (and should pass) my junk mail filters.</p>

<p>By focusing on making sure my inbox only includes import emails I have reduced my inbox to 3 to 5 message each check (and I check twice a day). On busy days I only ever check my inbox, relying on others to contact me via a different medium if they really need me. When there is a less busy day I go through the other inbox and deal with those messages.</p>

<p>At the time I am writing this (on sunday) I have 1 email in my inbox and 91 emails in my other inbox that were all sent saturday. A quick read of the 1 email and I will have to spend 5 minutes reviewing code, but the rest can wait until monday.</p>

<h2>Use the right messaging system</h2>

<p>Use email for messages that do not need an immediate response. Since there is no message size limit, make sure you use the most of it. Write emails that are well detailed and specific. If at any point a message can be answered with &#8220;Ok&#8221; or some other monosyllabic word then email was not the correct choice.</p>

<p>Use Instant Messages (IM,IRC,etc&#8230;) for conversations that need semi immediate responses, and a possible record. Many IM packages can log conversations for later viewing, which is useful when you forget things. There are message length and formatting restrictions so this forces the messages to be brief and specific.</p>

<p>Use Phone, Skype, or face to face contact when a response is needed immediately.</p>

<p>Use Twitter, or some other global message posting service to track commits, continuous integration fails, defects, etc&#8230;</p>

<p>Use a wiki, or blog to track generic instructions or documentation.</p>

<h2>Check email twice a day (only)</h2>

<p>The easiest way to train people not to use email as a crutch is not use it as one yourself. Only check email twice a day, and give a concerted effort to reduce that to once a day within a month, and once a week within 6 months. Setup the other messaging systems so that email is used only for what it needs to be. And when people step out of line, correct them.</p>

<p>Email should not be the first thing that you check in the morning, as you should not be working out of email. It should also not be the last thing you check as it will disrupt your already stressful commute/home life. Instead check email 2 hours after the start of the day, and 2 hours before the end of the day. If you work a 9-to-5 that means once at 11am and once at 3pm.</p>

<p>The day you start doing this, tell the people that send you the most email and the ones that you will most affect by the change, and no one else. You are not trying to be sneaky, but if you blast an email to everyone then you are going to make it a big deal; which it is not. The others will learn over time.</p>

<p>When someone tells you that you need to check your email and read their message do it, but only check their email, ignore all other messages.</p>

<h2>Don&#8217;t use Inbox as an archive</h2>

<p>Once you are finished reading an email, either deal with the email and delete it or archive it. Create a separate archive folder and move emails there if you need to save them. Your goal is aways to reduce the inbox to zero</p>

<h2>Create an other inbox</h2>

<p>Create a filter that will dump any messages where you are not the direct recipient into a different folder. This should be the first filter you create, but the last filter that is applied to any message. Create as many other filters and folders as you can to move useless messages round. The goal is to remove any message that you do not need to act on so that what is left is just what is important. The trash can is a good folder to dump things that are truly useless.</p>

<h2>Use the server&#8217;s filtering mechanism</h2>

<p>When possible have server do all the filtering that way you can use multiple email clients and will not be dependent on leaving an email client on. All Exchange servers and many online email services can do server filtering. When using Outlook, be careful, the ease of creating filters is sometimes offset by the fact that it lies about what filters can be saved to the server. Though harder, since MS didn&#8217;t spend much time on the server-side features of Exchange, it is better to build the filters on the server directly.</p>

<h2>Reduce the inbox to zero (in one sitting)</h2>

<p>The goal is always to reduce your inbox to zero. Once all the filters are in place, the only thing left to actually deal with all the important emails (at least that is the hope). When dealing with email decide if the email should be dealt with, deferred, or archived.</p>

<p>If time is really an issue then find the messages to archive and defer first, and move them. That way what is left is just the stuff to deal with now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to be a bad boss]]></title>
    <link href="http://jkamenik.github.com/blog/2010/12/05/how-to-be-bad-boss/"/>
    <updated>2010-12-05T00:00:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2010/12/05/how-to-be-bad-boss</id>
    <content type="html"><![CDATA[<p>Being a boss is a complicated thing. It is your job to get people to do things, sometimes things they do not want to do. And it is especially complicated in the software industry, where it is like herding cats.</p>

<p>I see a lot of posts on how to be a good boss, but the problem there is that they often forget to mention the things that can and will immediately erode any success you might have had. I am going to assume that as a reader you strive to be a person who others are willing to follow.</p>

<p>Nobody is perfect, so you will probably have done at least one of these things in the past. Or you do then without even knowing. Now is your chance to stop, and be a constructive boss who people want to work for.</p>

<!--more-->


<h2>Be smarmy</h2>

<p>Yep, this is number one.Smarmy people are falsely friendly (think used car dealers). Notice I did not say do not &#8220;be mean.&#8221; As a boss sometimes you will need to be mean, or at least not very nice.  And even that should be kept to a minimum, but it is never OK to be smarmy.  All it does is make people uncomfortable confiding in you, which means they will either find better employment (if they can) or they will sabotage you.</p>

<p>Here are some examples of what I mean by smarmy:</p>

<ul>
<li>Suggest that a problem can be solved by the employee working overtime</li>
<li>Using scrum (or any general meeting) to point out an employee&#8217;s failure</li>
<li>Joke about firing an employee</li>
<li>Make any sarcastic comment about an employee in the presence of others</li>
<li>Only talking to an employee when you need them to do something (i.e., I am only talking to you because I want something)</li>
</ul>


<p>Some ways to tell that you have already failed at this:</p>

<ul>
<li>All laughter stops when you enter the room</li>
<li>Conversations between you and an employee die quickly</li>
<li>Employees no longer tell you about issues they are having</li>
</ul>


<h2>Be a hypocrite</h2>

<p>A hypocrite is someone who says one thing and thinks or does another. It can be as overt as being prejudiced (racist, sexist, etc&#8230;) or as covert as being passive aggressive. Being a hypocrite is risky because when other people find out, you are just being deceitful, and no one wants to deal with that.</p>

<p>One example is saying that code needs to be high quality but not leaving time for testing. Overtly this often resembles explicitly adding a testing phase at the end of coding and then cutting it if coding goes long. Covertly this is often assuming that testing is done as part of coding, but scoffing at longer estimates. Speed and quality have a tenuous relationship. Something done slowly may or may not be of quality, but something quickly is almost never of quality.</p>

<p>The best way not to be a hypocrite is not to bring your values and prejudices into the equation. To do this though you have to understand what your values and prejudices are. In the case of the no testing, quality is explicitly stated as the important part, but speed is implicitly stated as the important factor. More specifically speed at the cost of quality is stated as the import factor. To avoid this, it is important to explicitly state the importance of all three tenets of the project triangle: that way you avoid the embarrassing case where one tenet goes to 0 unintentionally. See: <a href="http://en.wikipedia.org/wiki/Project_triangle">Project Triangle</a>.</p>

<h2>Be arrogant</h2>

<p>I am not talking about being hard headed or stubborn. I am talking about being truly arrogant. Stubborn people will listen to reason, assuming the opposing argument is good enough; arrogant people cannot be directly convinced. There are two forms of arrogance to watch out for: arrogance of idea, and arrogance of presenter. Arrogance of idea is simply dismissing an idea because it is in direct conflict with your internal ideas or values. Arrogance of presenter is rejecting an idea because of who presented it.</p>

<p>Two engineers approach you with different solutions to the problem of releasing on time: one says to keep the feature set and stop doing unit testing, and the other says reduce the feature set but keep the unit testing. Which do you choose? If you choose &#8220;keep the feature set&#8221; then you wrong. If you choose &#8220;keep the unit testing&#8221; you are also wrong. If you chose either (based on only the information provided) then the choice you made was based on you internal values only and not based on the problem being presented.</p>

<p>In the context of work the truth is that new hires probably know more about a given framework than you, and certainly will have a different perspective on how things should be done. They are probably offering you this knowledge, because they have already encountered the problem you are now seeing and have found an appropriate solution. It is tempting to dismiss this simply because a new hire presented it and they don&#8217;t know the full business impact of their suggestion. But ask yourself: if the system architect presented you with this idea would you accept it? If yes, then you are suffering from arrogance of presenter and should tread lightly.</p>

<p>I suggest instead that you judge an idea (never a presenter) on its merits in the context of only the problem (never on facts you assume to be true). And make sure you are consciously and actively judging the idea, and you are not adding your own problem or values.</p>

<h2>Offer post hoc rewards</h2>

<p>A post hoc reward is a reward given after work is complete. In physical work the effects of post hoc rewards are well known and lead to better results, but in knowledge work offering post hoc rewards has a distracting effect. Work will take longer and be of lower quality. It will make employees very good at performing work that maximizes their incentives, and not at developing a quality product. Be aware that offering reward for work done defines a tangible value for that work, which may demoralize an employee who feels under compensated as a result.</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/u6XAPnuFjJc" frameborder="0" allowfullscreen></iframe>


<p>Intrinsic rewards can and should be used. These are things that are given universally and without reservation. Basic examples would be vacation, and health benefits. Other examples would be a free day to work on any project the employee wanted, or free soda/tea/coffee. These intrinsic benefits help endear you and the company to the employee.</p>

<h2>Accept estimates less than 4 hours</h2>

<p>This may only be true in software, but tasks never take less than 4 hours. A task is really an atomic complete chunk of work, so to be considered complete it must be coded, tested, reviewed, and committed. However, some employees will claim they finish tasks sooner. Often these people are cutting corners (not testing, or not getting a review) or they are doing a bunch of tasks that should have logically been considered one task.</p>

<p>Either way they are playing a game with the numbers to get their counts higher, which means that you are probably rewarding over aggressive estimates, and have a huge defect backlog. Well done!</p>

<h2>Assume research is intrinsic</h2>

<p>I have seen this bite so many bosses, where they say something like &#8220;tasks cannot take longer then 4 days.&#8221; The problem is that now you have employees trying to split tasks that have little or no real research done. So when it comes time to implement you have a bunch of small tasks that are too small to warrant research, but no real clear direction because no real research was done.</p>

<p>Estimates of several weeks or months are fine early in the process. But enough time needs to be given to investigate feasibility prior to high level scoping. Prior to implementation, time should be given to research an implementation and split the tasks out. All of this time should have been blocked in as a single unit during high level scoping.</p>

<h2>Require meetings</h2>

<p>Meetings cost time and money. And in addition to the meeting itself there is time before the meeting where people ramp down, and time after the meeting when people need to ramp back up again. Both ramping phases are about 10 minutes each.</p>

<p>To monetize this for you, let&#8217;s say you have 12 employees going to a meeting, and on average they make $24 an hour, and the meeting is 15 minutes (a scrum). The total chunk of wasted time is 35 minutes or about $14 per employee. For the company that means you wasted $168. And that does not include any prep time employees had to take.</p>

<p>In general, meetings need to be kept to a minimum and kept on track because they will end up being the single most costly event both in terms of money and productivity.</p>

<h2>Watch your employees work</h2>

<p>Nobody is comfortable being scrutinized. Do not set up your office so that you are looking into your employees&#8217; cubes, and don&#8217;t wonder around aimlessly, and never under any circumstances hover. By doing this you are showing your employees that the most important thing is to look busy (a function of the keyboard and finger), not to solve problems (a function of the brain). At the point where your employees feel scrutinized they will work just hard enough to not get fired, and will partake in CYA games.</p>

<p>The best example is Office Space the movie. Little more needs to be said.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GIT with SVN]]></title>
    <link href="http://jkamenik.github.com/blog/2010/12/04/git-with-svn/"/>
    <updated>2010-12-04T00:00:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2010/12/04/git-with-svn</id>
    <content type="html"><![CDATA[<p>Normally, I would just use GIT without a bridge to another control system, but many companies use SVN.  There are just so many benefits to using GIT that, for me, I am going to use it if there is a bridge to repository type the company uses.  I certainly don&#8217;t hate SVN or CVS or Perforce, but GIT allows me to work the way that I know I am most productive; which is commit early, commit often.</p>

<p>What I mean by commit early, commit often is that I commit even if I only have part of the solution. As I find the other parts of the solution I commit those as well. That way when I am 2 or 3 days into a fix I already have the commit messages saved in GIT, so I don&#8217;t have to remember what I did for those 2 or 3 days. When the solution is shippable only then do I push it up to the company&#8217;s repository.</p>

<!--more-->


<h2>Benefits of GIT include:</h2>

<ol>
<li>Being able to share non production ready code (Peer to Peer)</li>
<li>Being able to have many local branches</li>
<li>Being able to logically group commits (via local branches) and push all at once</li>
<li>Fantastic branch switching/merging

<ol>
<li>Rarely will you ever have to fix a merge conflict yourself</li>
</ol>
</li>
<li>Rebase as well as merge

<ol>
<li>Rebase is SVNs style of linear commits</li>
<li>Merge is non-linear and tries to keep commits sequentially ordered by date.  So if two branches are merged and both were actively worked on then the commits are intermixed.  (makes a lot more sense in practice then in writing)</li>
</ol>
</li>
</ol>


<p>With GIT&#8217;s power comes a little bit more complexity, and here I will detail the method that I have developed over months of fits and starts.  That way you can experience the benefits of using GIT for day to day work, but still use SVN when dealing with corporate.</p>

<h2>Settings up the SVN Bridge</h2>

<p>You can have GIT manage an entire SVN repository, branches and all. However, for GIT to do this it must checkout every revision of the SVN repo. This can be very painful when there are a lot of commits. Instead I recommend only managing a single branch starting a specific revision near HEAD. You will lose history older then that revision, but it does save a lot of time for large SVN repositories.</p>

<p>For the below example I am going to assume we have a standard SVN repository at http://example.com/svn, the latest revision is 400, and the SVN username is test.</p>

<p>Find the latest revision of the repository:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>svn log http://example.com/svn/trunk | head
</span></code></pre></td></tr></table></div></figure>


<p>The latest revision will start with an &#8220;r&#8221; and be within the first 5 lines.</p>

<p>Setting up a git repo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git svn init --username<span class="o">=</span><span class="nb">test </span>http://example.com/svn/trunk dev
</span><span class='line'>git svn fetch -r 400
</span></code></pre></td></tr></table></div></figure>


<p>Now you have a local GIT repo in dev that is synced to SVN trunk at revision 400. And when you <code>git svn dcommit</code> the user <code>test</code> will be used.</p>

<h2>Always work in a branch</h2>

<p>In my company before anything is allowed to be checked into SVN it must go through a peer review.  In any given day I might work on 2 or 3 bugs/tasks.  For each, I create a GIT branch with the bug/task ID and work there.  When I am done I use <code>git log -p</code> to list the diffs that I submit for review. Then I move on to the next item, while the fix is being reviewed.  When the first bug/task is reviewed and accepted I jump back to master, rebase it, jump to the branch, rebase master, jump back to master and merge the branch, and finally svn dcommit everything.  After I mark the bug/task complete I also delete the branch. If the code is not accepted then I still have a branch where I can make the required corrections and repeat the process.</p>

<p>It might sound complicated, but it really isn&#8217;t. The only reason for all this rebasing is so that GIT&#8217;s native merge tools deal with SVN merge conflicts. I am not sure why, but they are far better then what the SVN bridge can do, and will ultimately lead to few headaches for you.</p>

<p>In code it looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git&gt; git svn rebase
</span><span class='line'>git&gt; git checkout -b task1
</span><span class='line'>... work on task 1
</span><span class='line'>git&gt; git log -p -n X &gt; task1.diff
</span><span class='line'>... create diff of all <span class="o">(</span>X<span class="o">)</span> changes needed <span class="k">for </span>task1
</span><span class='line'>... email the diff <span class="k">for </span>review
</span><span class='line'>git&gt; git checkout master
</span><span class='line'>git&gt; git svn rebase
</span><span class='line'>git&gt; git checkout -b task2
</span><span class='line'>... work on task 2
</span><span class='line'>... when task 1 is approved commit what you have <span class="k">for </span>task 2 and dcommit task1
</span><span class='line'>... <span class="k">return </span>to task 2 when task 1 is committed
</span></code></pre></td></tr></table></div></figure>


<p>This style also works well if your boss comes over at the 11th hour and assigns you a new emergency assignment.  When you are done with the emergency switching gears is as easy as switching branches.</p>

<h2>DCommitting your changes</h2>

<p>As states above I use the checkout, rebase, checkout, rebase, checkout, merge, dcommit style.  This seems cumbersome until you understand the purpose.</p>

<p>From any branch always checkout into master.  This allows master to stay pure of your changes and makes its less likely that git svn will fail.</p>

<p>Once master is up-to-date checkout the branch again and rebase the master changes into the branch.  Fixing any rebase conflicts there might be.  By fixing them on the branch we keep master clean so we are using git&#8217;s rebase/merge capabilities, not the SVN bridge&#8217;s.  There are times this step can be skipped, but once you have to deal with your first rebase conflict from the bridge you will wish you had branched.</p>

<p>Now that the branch holds the latest code to be dcommitted to SVN: checkout master, merge the branch, and dcommit master.  You could rebase the changes from the branch if you prefer, it really makes no difference because your changes are on top of SVN now either way.  Once done all of master&#8217;s log messages will be rewritten to what is in SVN.</p>

<p>All together it looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git&gt; git checkout master
</span><span class='line'>git&gt; git svn rebase
</span><span class='line'>git&gt; git checkout task1
</span><span class='line'>git&gt; git rebase master
</span><span class='line'>... SVN needs your changes to be rebased so rebase master
</span><span class='line'>... by rebasing onto to a branch it is easier to deal with rebase failures
</span><span class='line'>... fix any rebase issues
</span><span class='line'>git&gt; git checkout master
</span><span class='line'>git&gt; git merge task1
</span><span class='line'>... could merge or rebase, doesn<span class="s1">&#39;t matter here</span>
</span><span class='line'><span class="s1">git&gt; git svn dcommit</span>
</span><span class='line'><span class="s1">... mark the task closed</span>
</span><span class='line'><span class="s1">git&gt; git brach -D task1</span>
</span><span class='line'><span class="s1">... svn doesn&#39;</span>t always mark the branch merged properly so use -D instead of -d
</span></code></pre></td></tr></table></div></figure>


<h2>Pro Tips</h2>

<h3>Different user names</h3>

<p>Use a different username for SVN and GIT.  That way it is easy to see in the log what is committed to SVN since the bridge will rewrite the commit log from what SVN says.</p>

<ul>
<li>For SVN I use jkamenik.</li>
<li>For GIT I use jkamenik at gmail dot com.</li>
</ul>


<p>Commits that are in SVN also have the SVN revision number in the log message, but I find it easier to use usernames since it is at the top of the log message.</p>

<h3>Setup Aliases</h3>

<p>Git allows more commands to be added via aliases. An alias can be a shortening of a git command: <code>st = status</code>. Or it can be a shell command that git will execute <code>test = !sh -c 'echo "it works!"'</code> (notice the leading !).</p>

<p>Here is the alias part of my <code>~/.gitconfig</code> file looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span><span class="nb">alias</span><span class="o">]</span>
</span><span class='line'>  <span class="c"># Old SVN aliases</span>
</span><span class='line'>  <span class="nv">ci</span> <span class="o">=</span> commit
</span><span class='line'>  <span class="nv">co</span> <span class="o">=</span> checkout
</span><span class='line'>  <span class="nv">st</span> <span class="o">=</span> status
</span><span class='line'>  <span class="nv">stat</span> <span class="o">=</span> status
</span><span class='line'>  <span class="c"># stuff I find useful</span>
</span><span class='line'>  <span class="nv">br</span> <span class="o">=</span> branch
</span><span class='line'>  <span class="nv">df</span> <span class="o">=</span> diff
</span><span class='line'>  rm-all <span class="o">=</span> !git st | grep deleted | awk <span class="s1">&#39;{print $3}&#39;</span> | xargs git rm
</span><span class='line'>  add-all <span class="o">=</span> !git st | grep modified | awk <span class="s1">&#39;{print $3}&#39;</span> | xargs git add
</span><span class='line'>  st-br <span class="o">=</span> <span class="s2">&quot;!f(){ git co master &amp;&amp; git svn rebase &amp;&amp; git co -b $1 }; `f`&quot;</span>
</span><span class='line'>  up-br <span class="o">=</span> <span class="s2">&quot;!f(){ git co master &amp;&amp; git svn rebase &amp;&amp; git co $1 }; `f`&quot;</span>
</span><span class='line'>  co-br <span class="o">=</span> <span class="s2">&quot;!f(){ git up-br $1 &amp;&amp; git co master &amp;&amp; git merge $1 &amp;&amp; git svn dcommit }; `f`&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that <code>st-br</code>, <code>up-br</code>, and <code>co-br</code> are basically all the set of commands I noted above in single command style.</p>

<h3>Stashing changes</h3>

<p>The stash is a hidden place that git can keep changes that are not yet ready to commit.  This is very useful if you get switched to another task and really don&#8217;t have time to fully vet a change on the current task.  You can stash the outstanding change and later replay them.</p>

<p><code>git stash</code> keeps a queue of changes so you can stash more then one thing, but you can only replay them top down.</p>

<p>&#8220;` bash
git> git stash
&#8230; hides all modified files
git> git stash list
&#8230; lists all stashes
git> git stash apply
&#8230; applies the top stash, but does not remove it
git> git stash pop
&#8230; applies the top stash, and remove it</p>

<h2>Resources</h2>

<ul>
<li><a href="http://www.biostat.jhsph.edu/~rpeng/biostat776/workflow.html">GIT <-> SVN workflow</a></li>
<li><a href="http://www.viget.com/extend/effectively-using-git-with-subversion/">Effectively using GIT with SVN</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Selenium]]></title>
    <link href="http://jkamenik.github.com/blog/2010/11/18/learning-selenium/"/>
    <updated>2010-11-18T00:00:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2010/11/18/learning-selenium</id>
    <content type="html"><![CDATA[<h2>Background</h2>

<p>My basic need is to find a platform where I can test FF, IE, and Safari on Windows, Linux, and OS X.  I use OS X as my platform, and Safari or Webkit as my environment.  I don&#8217;t like Windows or IE.  Linux is OK, but I like OS X because it just works the way I want.  And I find FF to be slow, and Firebug which is needed to debug we pages causes rendering changes and timing issues (most notably causing FF to crash).</p>

<!--more-->


<p>Ideally I want the testing environment:</p>

<ol>
<li>To be developed in Safari on OS X</li>
<li>To be able to test both internal libraries and rendered UI</li>
<li>To use unit tests to test internal libraries</li>
<li>To use interactive tests to test rendered UI</li>
<li>To use the unit/interactive tests as regression system moving forward</li>
<li>To write the tests once on my browser of choice</li>
<li>To run the tests on all combinations of browser and platform.</li>
<li>To not be bogged down by the testing framework</li>
<li>To be free, or very cheap</li>
</ol>


<p>From my research it looked like Selenium did basically exactly what I needed. And unfortunately was the only real option.  There were plenty of options for taking screen shots of public sites (which mine isn&#8217;t, yet) and comparing those between browsers.  And there are several options for unit testing javascript, but only Selenium did both and could be run on my own hardware.</p>

<h2>Implementation</h2>

<p>From my reading it looked like I wanted to use the IDE to create the tests, and remote controls to run the browsers.  Eventually I need to scale to Selenium Grid, but that is for later discussion.</p>

<h3>Test code</h3>

<p>This is the sample file that I created to test.</p>

<div><script src='https://gist.github.com/1151478.js?file=code.html'></script>
<noscript><pre><code>&lt;html&gt;
&lt;body&gt;
&lt;script&gt;
Namespace = {
  test: function(item){
    return item == true;
  }
};

function String(item){
  if(!item.push &amp;&amp; typeof(item) === 'object'){
    return item.name || '';
  }
  return ''+item; //yup this is faster then toString
}

function Int(item){
  return parseInt(item,10);
}

function Array(item){
  var type = typeof(item);

  if(type === 'string'){
    return item.split(&quot;\n&quot;);
  } else if(type === 'object'){
    if(item.push &amp;&amp; item.length &amp;&amp; item.concat){
      return item;
    }
  }
  return [item];
}
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre></noscript></div>


<h3>Using the IDE</h3>

<p>It took a long time to understand this tool, since I had no background in Selenium.  The basic premiss is that each file is a single test case, which is a set of tests.  Each test is a grouping of three items: the action, the target, and the expected result.  It natively creates a 3 column HTML table, which it can also run, but personal preference is that use the IDE to export the basic test into a different language.</p>

<p>I am a rails developer, and am familar with rspec so I use the IDE to run the tests to make sure they work, but then I transfer it to rspec since it is a more expressive test framework.  The downside is that you have to use a Remote Control to run the test, which adds an extra level of complications.  We will get to the Remote Control later.</p>

<p>A basic HTML test looks like this:</p>

<div><script src='https://gist.github.com/1151478.js?file=test.html'></script>
<noscript><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xml:lang=&quot;en&quot; lang=&quot;en&quot;&gt;
&lt;head profile=&quot;http://selenium-ide.openqa.org/profiles/test-case&quot;&gt;
&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;
&lt;link rel=&quot;selenium.base&quot; href=&quot;file:///Users/jkamenik/Desktop/sel_test.html&quot; /&gt;
&lt;title&gt;Unit Testing&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;table cellpadding=&quot;1&quot; cellspacing=&quot;1&quot; border=&quot;1&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;td rowspan=&quot;1&quot; colspan=&quot;3&quot;&gt;Unit Testing&lt;/td&gt;&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
 &lt;td&gt;open&lt;/td&gt;
 &lt;td&gt;file:///Users/jkamenik/Desktop/selenium/sel_test.html&lt;/td&gt;
 &lt;td&gt;test&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;td&gt;verifyEval&lt;/td&gt;
 &lt;td&gt;this.browserbot.getUserWindow().Int(1)&lt;/td&gt;
 &lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;td&gt;verifyEval&lt;/td&gt;
 &lt;td&gt;typeof(this.browserbot.getUserWindow().Int(1))&lt;/td&gt;
 &lt;td&gt;number&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre></noscript></div>


<p>There really is nothing more to it then that.  The one thing to note is that the test uses <code>verifyEval</code> which takes a JavaScript string.</p>

<p>Liquid error: undefined method `lstrip&#8217; for #&lt;Array:0x007febca858820></p>

<p>Liquid error: undefined method `lstrip&#8217; for #&lt;Array:0x007febca857c40></p>

<h2>Using RSpec</h2>

<p>The IDE is a great way to test scripts live, but for any programmer it is going to be easier to use a testing framework doing it programmatically.  As a rails guy I prefer RSpec so that is what I use.</p>

<h3>Installing</h3>

<p>This package requires ruby-gems, rspec, and selenium-client.  I am going to assume you have ruby-gems installed already.  The others are installed like this:</p>

<div><script src='https://gist.github.com/1151478.js?file=install.sh'></script>
<noscript><pre><code>sudo gem install rspec 
sudo gem install selenium-client</code></pre></noscript></div>


<h3>Converting</h3>

<p>When using Rspec the only real thing to remember is that there are no assert<em> or verify</em> methods.  The reason is that Rspec itself is a testing framework so it will have it own version of assert and verify (in this case should).</p>

<p>The IDE has a great feature in that it converts the HTML test into a rspec test for you.  It isn&#8217;t a great format, but it is better then nothing and is a good place to start.</p>

<div><script src='https://gist.github.com/1151478.js?file=selenium.rb'></script>
<noscript><pre><code>require &quot;rubygems&quot; 
gem &quot;rspec&quot; 
gem &quot;selenium-client&quot; 
require &quot;selenium/client&quot; 
require &quot;selenium/rspec/spec_helper&quot; 
require &quot;spec/test/unit&quot; 

describe &quot;array_test&quot; do 
attr_reader :selenium_driver 
alias :page :selenium_driver 

before(:all) do 
  @verification_errors = [] 
  @selenium_driver = Selenium::Client::Driver.new \ 
    :host =&gt; &quot;localhost&quot;, 
    :port =&gt; 4444, 
    :browser =&gt; &quot;*chrome&quot;, 
    :url =&gt; &quot;file:///Users/user/Desktop/selenium&quot;, 
    :timeout_in_second =&gt; 60 
end 

before(:each) do 
  @selenium_driver.start_new_browser_session 
end 

append_after(:each) do 
  @selenium_driver.close_current_browser_session 
  @verification_errors.should == [] 
end 

it &quot;test_array_test&quot; do 
  page.open &quot;file:///Users/jkamenik/Desktop/selenium/index.html&quot; 

  begin 
    (&quot;1&quot;).should == page.get_eval(&quot;this.browserbot.getUserWindow().Array([1])&quot;) 
  rescue ExpectationNotMetError 
    @verification_errors &lt;&lt; $! 
  end

  begin 
    (&quot;object&quot;).should == page.get_eval(&quot;typeof(this.browserbot.getUserWindow().Array(1))&quot;) 
  rescue ExpectationNotMetError 
    @verification_errors &lt;&lt; $! 
  end 
end 
end
</code></pre></noscript></div>


<p>Liquid error: undefined method `lstrip&#8217; for #&lt;Array:0x007febca84f590></p>

<p>Liquid error: undefined method `lstrip&#8217; for #&lt;Array:0x007febca84ed70></p>

<h3>Remote Controls</h3>

<p>A remote control is what Selenium uses to execute the test.  The IDE comes with it built-in, but it is tied to FireFox.  To use IE, Safari, or Chrome you need to download the remote control software: <a href="http://seleniumhq.org/projects/remote-control">http://seleniumhq.org/projects/remote-control</a>.  This software is just a Java server that opens your machine on port 4444 (by default) to allow Selenium clients to run tests.  Each client gets its own browser instance to run the tests in.</p>

<p>Liquid error: undefined method `lstrip&#8217; for #&lt;Array:0x007febca84e6e0></p>

<p>Liquid error: undefined method `lstrip&#8217; for #&lt;Array:0x007febca83b360></p>

<p>Liquid error: undefined method `lstrip&#8217; for #&lt;Array:0x007febca83a910></p>

<h3>Putting it all together</h3>

<p>By default RSpec provides no runner code and the code the IDE produces is not standalone.  This is not a problem since installing RSpec into a rails app installs script/spec.  I have copied the runner code here so make it easier.</p>

<div><script src='https://gist.github.com/1151478.js?file=runner.rb'></script>
<noscript><pre><code>#!/usr/bin/env ruby 
if ARGV.any? {|arg| %w[--drb -X --generate-options -G --help -h --version -v].include?(arg)} 
  require 'rubygems' unless ENV['NO_RUBYGEMS'] 
end 
require 'spec/autorun' 
exit ::Spec::Runner::CommandLine.run</code></pre></noscript></div>


<p>I am going to assume the RSpec runner code is called spec and the test file is called test.rb.  To run this test from the command line do the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ruby</span> <span class="n">spec</span> <span class="nb">test</span><span class="o">.</span><span class="n">rb</span>
</span></code></pre></td></tr></table></div></figure>


<p>Assuming you followed all the steps the test should have opened Firefox, executed a page, run the tests, closed Firefox, and returned the results.  Now you can add more tests and have Selenium execute them.</p>

<h2>Related Research</h2>

<ol>
<li>Using Selenium Grid</li>
<li>Using Chrome, or IE</li>
<li>Using a Grid to run the same test in all browsers on all OSs</li>
</ol>

]]></content>
  </entry>
  
</feed>
