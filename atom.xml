<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Random Software Inklings]]></title>
  <link href="http://jkamenik.github.com/atom.xml" rel="self"/>
  <link href="http://jkamenik.github.com/"/>
  <updated>2015-02-10T20:30:51-05:00</updated>
  <id>http://jkamenik.github.com/</id>
  <author>
    <name><![CDATA[John T. Kamenik]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Emacs Tabs and Tab Groups]]></title>
    <link href="http://jkamenik.github.com/blog/2015/02/10/emacs-tabs-and-tab-groups/"/>
    <updated>2015-02-10T20:28:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2015/02/10/emacs-tabs-and-tab-groups</id>
    <content type="html"><![CDATA[<p>From other editors I am used to having Tabbars.  Switching to Emacs I
miss that behavior.  Emacs does have a <code>tabbar</code> plugin, but it isn&#8217;t
quite what I want.</p>

<!-- more -->


<p>By default it groups the tabs in a seemingly random way.  I am sure it
makes sense if you wrote it, but for me I want the things group by my
projects.  For me a project is a diretory wich has a <code>.git</code> directory
at its root.</p>

<p>First I created a simple function to get the project root, or return nil.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">my-project-root</span> <span class="p">()</span>
</span><span class='line'>  <span class="s">&quot;Return the root of the project.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">locate-dominating-file</span> <span class="nv">default-directory</span>
</span><span class='line'>    <span class="s">&quot;.git&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Basically this search all parent directories until it finds one
containing the &#8220;.git&#8221; directory.  The build in function details are.</p>

<p><code>locate-dominating-file BASE FILE</code> searches the parent directory tree
from BASE until it finds FILE.</p>

<p><code>default-directory</code> is a file local variable which is the directory of
the current file.</p>

<p>Next I set the <code>tabbar-buffer-groups-function</code> to return the group
name of the current file.  The only requirement is that the function
return a list, but it is recommended that the list only contain a
single item.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">tabbar-buffer-groups-function</span>
</span><span class='line'>      <span class="p">(</span><span class="k">lambda</span> <span class="p">()</span>
</span><span class='line'>        <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">dir</span> <span class="p">(</span><span class="nv">expand-file-name</span> <span class="nv">default-directory</span><span class="p">)))</span>
</span><span class='line'>          <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nb">member</span> <span class="p">(</span><span class="nv">buffer-name</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;*Completions*&quot;</span>
</span><span class='line'>                                         <span class="s">&quot;*scratch*&quot;</span>
</span><span class='line'>                                         <span class="s">&quot;*Messages*&quot;</span>
</span><span class='line'>                                         <span class="s">&quot;*Ediff Registry*&quot;</span><span class="p">))</span>
</span><span class='line'>                 <span class="p">(</span><span class="nb">list</span> <span class="s">&quot;#misc&quot;</span><span class="p">))</span>
</span><span class='line'>                <span class="c1">;; All Magit status goes the same place</span>
</span><span class='line'>                <span class="p">((</span><span class="nv">string-match</span> <span class="s">&quot;^*magit&quot;</span> <span class="p">(</span><span class="nv">buffer-name</span><span class="p">))</span> <span class="p">(</span><span class="nb">list</span> <span class="s">&quot;#magic&quot;</span><span class="p">))</span>
</span><span class='line'>                <span class="p">((</span><span class="nv">string-match</span> <span class="s">&quot;^COMMIT_EDITMSG&quot;</span> <span class="p">(</span><span class="nv">buffer-name</span><span class="p">))</span> <span class="p">(</span><span class="nb">list</span> <span class="s">&quot;#magic&quot;</span><span class="p">))</span>
</span><span class='line'>                <span class="c1">;; All Cider windows</span>
</span><span class='line'>                <span class="p">((</span><span class="nv">string-match</span> <span class="s">&quot;^*nrepl-server&quot;</span> <span class="p">(</span><span class="nv">buffer-name</span><span class="p">))</span> <span class="p">(</span><span class="nb">list</span> <span class="s">&quot;#cider&quot;</span><span class="p">))</span>
</span><span class='line'>                <span class="p">((</span><span class="nv">string-match</span> <span class="s">&quot;^*cider&quot;</span> <span class="p">(</span><span class="nv">buffer-name</span><span class="p">))</span> <span class="p">(</span><span class="nb">list</span> <span class="s">&quot;#cider&quot;</span><span class="p">))</span>
</span><span class='line'>                <span class="c1">;; Group tabs based on project root</span>
</span><span class='line'>                <span class="p">((</span><span class="nv">my-project-root</span><span class="p">)</span> <span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nv">my-project-root</span><span class="p">)))</span>
</span><span class='line'>                <span class="c1">;; Use the current dir</span>
</span><span class='line'>                <span class="p">(</span><span class="no">t</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">dir</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we capture the absolute path of the current file.  Then we check
a bunch of things to determine which best represents the group name.
The first thing we do is group various special buffers together.  Then we
use the project root to group files.  And if nothing else we use the
file&#8217;s directory as the group name.</p>

<p><code>lambda ARG BLOCK</code> creates an anonymous function.</p>

<p><code>let VAR BLOCK</code> sets a variable and then calls a block.  The variable
is then local to that block.</p>

<p><code>cond TUPLE TUPLE...</code> executes tuples until the first time in the
tuple is true.  When it finds a true tuple it executes the second item
and returns it.</p>

<p><code>member ITEM LIST</code> returns true if the first item is contained within
the second list.</p>

<p><code>buffer-name</code> returns the name of the current buffer.</p>

<p><code>list ITEM</code> converts an item into a single item list.</p>

<p><code>string-match REGEXP STRING</code> returns the index of the regex in the
string, or nil.</p>

<p><code>my-project-root</code> See above.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[emacs key bindings]]></title>
    <link href="http://jkamenik.github.com/blog/2014/12/15/emacs-key-bindings/"/>
    <updated>2014-12-15T21:09:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2014/12/15/emacs-key-bindings</id>
    <content type="html"><![CDATA[<p>I recently switched to Emacs as my editor of choice.  It has taken a bit of work to get it to where I like it.  My full settings are on github <a href="https://github.com/jkamenik/.emacs.d">here</a>.</p>

<p>In this post I will share how I added a key binding to only a single mode.</p>

<!-- more -->


<p>A key binding is just maps a key sequence to a lisp function.  A global key binding can be added in the following way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="p">(</span><span class="nv">define-key</span> <span class="nv">global-map</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-/&quot;</span><span class="p">)</span> <span class="ss">&#39;comment-or-uncomment-region</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This causes a key sequence to be added to a map.  The <code>global-map</code> contains the global key bindings regardless of mode.  This is only useful if the command makes sense in all modes.  In a lot of cases keys should only be bound to a mode.</p>

<p>Each mode has its own map which emacs only uses when you are in that mode.  This is how you add mode specific key bindings.  The map for any mode is the mode name with &#8220;-map&#8221; added.  You will need to have the mode loaded for the map to exist.</p>

<p>The following will add Agenda mode to OrgMode, which is off my default.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;org</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">define-key</span> <span class="nv">org-mode-map</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-ca&quot;</span><span class="p">)</span> <span class="ss">&#39;org-agenda</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go Concurrency Patterns]]></title>
    <link href="http://jkamenik.github.com/blog/2014/10/17/go-concurrency-patterns/"/>
    <updated>2014-10-17T20:57:00-04:00</updated>
    <id>http://jkamenik.github.com/blog/2014/10/17/go-concurrency-patterns</id>
    <content type="html"><![CDATA[<p>One of Golangs strengths is its composibility.  This strength is only useful if you know how to make those composable parts.  That is where patterns are useful.</p>

<p>Golang is concurrent, which is not necessarily parallel.  However, to make things concurrent you have to break thing into automatic steps.  If you are careful in how two step share information then you can easily turn concurrent design into parallel design.  Go channels make this communication stupid simple.</p>

<p>In this post I am going to share what I think are the basis of most other concurrency patterns: The Generator, The Worker, and The Consumer.</p>

<!-- more -->


<h2>The Generator</h2>

<p>A generator simply does work and places that work on a channel.  What that means is really up to what is needed but the pattern is:</p>

<ol>
<li>Create a channel</li>
<li>Create closure which does work</li>
<li>Execute the closure as a goroutine</li>
<li>Return the channel</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">func</span> <span class="n">generateInt</span><span class="p">()</span> <span class="k">chan</span> <span class="nb">int32</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 1. Create a channel</span>
</span><span class='line'>  <span class="n">out</span> <span class="p">:=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="nb">int32</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 3. Spawn a closure</span>
</span><span class='line'>  <span class="k">go</span> <span class="k">func</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 2. Do work</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="p">:=</span> <span class="nb">int32</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="mi">100</span><span class="p">;</span> <span class="n">i</span><span class="p">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">out</span> <span class="p">&lt;-</span> <span class="n">i</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 4. Return the channel</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">out</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The Worker</h2>

<p>A worker takes stuff off an input channel, works on it, and places the result on an output channel.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">func</span> <span class="n">enlargeInt</span><span class="p">(</span><span class="n">in</span> <span class="k">chan</span> <span class="nb">int32</span><span class="p">)</span> <span class="k">chan</span> <span class="nb">int32</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">out</span> <span class="p">:=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="nb">int32</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">go</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">x</span> <span class="p">:=</span> <span class="k">range</span><span class="p">(</span><span class="n">in</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">out</span> <span class="p">&lt;-</span> <span class="n">x</span><span class="p">*</span><span class="mi">2</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">out</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The Consumer</h2>

<p>A consumer takes stuff off an input channel and consumes it.  There are two primary way to do this: Blocker and Signaller.</p>

<h3>Blocker</h3>

<p>The blocker form simply run the code.  This version is useful if there is a main loop which shouldn&#8217;t exit until all work is complete.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">func</span> <span class="n">printInt</span><span class="p">(</span><span class="n">in</span> <span class="k">chan</span> <span class="nb">int32</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">x</span> <span class="p">:=</span> <span class="k">range</span><span class="p">(</span><span class="n">in</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://play.golang.org/p/7Iz7kV7soo">Here is a full working version.</a></p>

<h3>Signaller</h3>

<p>A signaller is actually a varient of the Worker pattern, where the output channel is used to signal the completion of work.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">func</span> <span class="n">printInt</span><span class="p">(</span><span class="n">in</span> <span class="k">chan</span> <span class="nb">int32</span><span class="p">)</span> <span class="k">chan</span> <span class="n">bool</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">out</span> <span class="p">:=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="n">bool</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">go</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Work until the channel is closed</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">x</span> <span class="p">:=</span> <span class="k">range</span><span class="p">(</span><span class="n">in</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Single that I am done</span>
</span><span class='line'>    <span class="n">out</span> <span class="p">&lt;-</span> <span class="n">true</span>
</span><span class='line'>  <span class="p">}()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">out</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://play.golang.org/p/1LIgv1ULDy">Here is a full working version.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Golang Steam File]]></title>
    <link href="http://jkamenik.github.com/blog/2014/09/29/golang-steam-file/"/>
    <updated>2014-09-29T15:25:00-04:00</updated>
    <id>http://jkamenik.github.com/blog/2014/09/29/golang-steam-file</id>
    <content type="html"><![CDATA[<p>Go (golang) is a highly concurrent language.  But more then that it is a simple language built using modular components and string them together in useful ways.  This modularity has lead me to play around a bit and one of things that I found was a easy way to stream a file.</p>

<!-- more -->


<p>At first I was very unhappy that Go did not support the default compression provided by the <code>xz</code> tool.  At work, we use <code>xz</code> to stream compress very large amounts of data.  But since go had no native support I thought that it would be a lost cause.</p>

<p>Turns out there is no native support because there doesn&#8217;t have to be.  Below is the basic code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">func</span> <span class="n">xzReader</span><span class="p">(</span><span class="n">r</span> <span class="n">io</span><span class="p">.</span><span class="n">Reader</span><span class="p">)</span> <span class="n">io</span><span class="p">.</span><span class="n">ReadCloser</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">rpipe</span><span class="p">,</span> <span class="n">wpipe</span> <span class="p">:=</span> <span class="n">io</span><span class="p">.</span><span class="n">Pipe</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">cmd</span> <span class="p">:=</span> <span class="n">exec</span><span class="p">.</span><span class="n">Command</span><span class="p">(</span><span class="s">&quot;xz&quot;</span><span class="p">,</span> <span class="s">&quot;--decompress&quot;</span><span class="p">,</span> <span class="s">&quot;--stdout&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">cmd</span><span class="p">.</span><span class="n">Stdin</span> <span class="p">=</span> <span class="n">r</span>
</span><span class='line'>  <span class="n">cmd</span><span class="p">.</span><span class="n">Stdout</span> <span class="p">=</span> <span class="n">wpipe</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">go</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">err</span> <span class="p">:=</span> <span class="n">cmd</span><span class="p">.</span><span class="n">Run</span><span class="p">()</span>
</span><span class='line'>          <span class="n">wpipe</span><span class="p">.</span><span class="n">CloseWithError</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">rpipe</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Declare the function to take an <code>io.Reader</code> as STDIN and return <code>io.ReadCloser</code> as STDOUT</li>
<li>Create a pipe so I that can capture the program&#8217;s STDOUT and broadcast it as a readable stream</li>
<li>Register <code>xz</code> as the command to execute</li>
<li>Set the command&#8217;s STDIN</li>
<li>Capture the command&#8217;s STDOUT</li>
<li>Run a command in the background

<ol>
<li>Run the command until there is an error</li>
<li>Close the pipe when the command exists</li>
</ol>
</li>
<li>Return the read end of the command&#8217;s STDOUT</li>
</ol>


<p>At this point you have a <code>io.ReaderCloser</code> (which is an <code>io.Reader</code>).  You can use it anywhere you would use an <code>io.Reader</code>.  For example lets say you have a compressed CSV file.  The following code would open the file, decompress it, parse it as CSV, and print that to the screen:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">fp</span><span class="p">,</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">os</span><span class="p">.</span><span class="n">Open</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">Args</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">log</span><span class="p">.</span><span class="n">Fatal</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">defer</span> <span class="n">fp</span><span class="p">.</span><span class="n">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">xz</span>  <span class="p">:=</span> <span class="n">xzReader</span><span class="p">(</span><span class="n">fp</span><span class="p">)</span>
</span><span class='line'>  <span class="k">defer</span> <span class="n">xz</span><span class="p">.</span><span class="n">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">csv</span> <span class="p">:=</span> <span class="n">csv</span><span class="p">.</span><span class="n">NewReader</span><span class="p">(</span><span class="n">xz</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">line</span><span class="p">,</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">csv</span><span class="p">.</span><span class="n">Read</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">line</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">println</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">break</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Define the main function</li>
<li>Open a file</li>
<li>Test for errors and bail if there are any</li>
<li>Close the file pointer after the program exits</li>
<li>Pass the file as the stdin to the xz command and capture its output</li>
<li>Close the command&#8217;s STDOUT after the program exits</li>
<li>Pass the decompressed file to the CSV parser and get back a <code>csv.Reader</code></li>
<li>Loop until the stream is closed

<ol>
<li>Read a line</li>
<li>Print the line if it exists

<ol>
<li>Note: in Go, it is perfectly reasonable for a command to work and fail in the same call.  If I check for an error before printing the line then I may miss the last line of the file.</li>
</ol>
</li>
<li>Check for a stream error and break the loop</li>
</ol>
</li>
</ol>


<p>It is a very common paradigm in Go to take an <code>io.Reader</code> and pass it to a function just to get back a new <code>io.Reader</code>, and take that and pass it around and get back what you want (like a string or CSV row).  Once you get your head around the fact that Go&#8217;s power is that everything is a small well defined lego block, and that they all fit together, then it stops being strange that you would take one kind of interface and exchange it for exactly the same kind of interface.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using &amp;&amp; instead of if]]></title>
    <link href="http://jkamenik.github.com/blog/2014/09/21/using-and-and-instead-of-if/"/>
    <updated>2014-09-21T21:54:00-04:00</updated>
    <id>http://jkamenik.github.com/blog/2014/09/21/using-and-and-instead-of-if</id>
    <content type="html"><![CDATA[<p>You can use <code>&amp;&amp;</code> to perform a logical <code>if</code>.  And there are a few reasons it may be better to use <code>&amp;&amp;</code>.</p>

<p>If I was a Computer Scientist I might pull out logic maps or Turing completeness or do a mathematical proof.  If I was a Computer Architect I might argue that I do not need to prove anything and you should trust my experience.  Luckily I am a Software Engineer, so I will prove my point with tests.</p>

<!-- more -->


<p>Lets take <code>if a then b</code>.  The entire purpose of the <code>if then</code> it to only execute <code>b</code> if <code>a</code> is true.  If I were to write it using tests I might do it this way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="s2">&quot;if then&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Test</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">a</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">b</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">if_then</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">a</span>
</span><span class='line'>        <span class="n">b</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:t</span><span class="p">)</span> <span class="p">{</span><span class="no">Test</span><span class="o">.</span><span class="n">new</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;executes a&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">t</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:a</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">if_then</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;executes b if a is true&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">t</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:a</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span> <span class="kp">true</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">t</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:b</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">if_then</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;does not execute b if a is false&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">t</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:a</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span> <span class="kp">false</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">t</span><span class="p">)</span><span class="o">.</span><span class="n">not_to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:b</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">if_then</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>These tests pass.  So, I will make no change to the tests.  But, I will refactor the Test class to use <code>&amp;&amp;</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Test</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">if_then</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">&amp;&amp;</span> <span class="n">b</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>These tests also pass!  And you are probably thinking that I duped you somehow.  Let me explain why this works.</p>

<p>Logical <code>and</code> (&amp;&amp;) and logical <code>or</code> (||) can both be short circuited; meaning that if a certain condition is met they can immediately return a value without needing to execute more statements.  For <code>and</code> if any value is <code>false</code> then the entire statement is false.  So the first time the program sees a <code>false</code> value it can return.  For <code>or</code> the first <code>true</code> causes <code>true</code> to be returned.</p>

<p>The actual execution for <code>a &amp;&amp; b</code> is as follows:</p>

<ol>
<li>Execute a</li>
<li>if a is false return false</li>
<li>if a is true Execute b</li>
</ol>


<p>If you look carefully that is identical to the execution path of <code>if a then b</code>, which is why all the previous tests pass without modification.</p>

<h2>if not then</h2>

<p>Just like <code>&amp;&amp;</code> maps to <code>if then</code>, <code>||</code> maps to <code>if not then</code> or in some lanugages like ruby <code>unless then</code>.  I leave it as an exercise for the reader to write the tests, but the code is as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Test</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">if_not_then</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">||</span> <span class="n">b</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>if then else</h2>

<p><code>else</code> is just the <code>if not</code> case.  Since, <code>||</code> is eqivilant to <code>if not</code> we can chain it after <code>&amp;&amp;</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Test</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">if_then_else</span>
</span><span class='line'>    <span class="c1"># if a then b else c</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">&amp;&amp;</span> <span class="n">b</span> <span class="o">||</span> <span class="n">c</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Why is this useful?</h2>

<p>For some reason many languages can execute <code>&amp;&amp;</code> and <code>||</code> a lot faster then <code>if then else</code>, but I very rarely consider performance a good excuse for crappy looking code.  I have some simple reasons to use <code>&amp;&amp;</code> instead of <code>if</code>:</p>

<h3>1. You are chaining actions</h3>

<p>If the things that you are chaining are actions being performed and those action return weather they were successful then it often reads better as <code>&amp;&amp;</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># bad</span>
</span><span class='line'><span class="n">paint_it_black</span> <span class="k">if</span> <span class="n">find_a_door</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># good</span>
</span><span class='line'><span class="n">find_a_door</span> <span class="o">&amp;&amp;</span> <span class="n">paint_it_black</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. You are likely to chain additional items</h3>

<p>Once you nest logic then readability goes out the window.  Using <code>&amp;&amp;</code> helps.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># bad</span>
</span><span class='line'><span class="k">if</span> <span class="n">column_a_is_a_string</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">column_b_is_a_number</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">column_c_is_a_boolean</span>
</span><span class='line'>      <span class="k">raise</span> <span class="s1">&#39;Bad&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># good</span>
</span><span class='line'><span class="n">column_a_is_a_string</span> <span class="o">&amp;&amp;</span>
</span><span class='line'><span class="n">column_b_is_a_number</span> <span class="o">&amp;&amp;</span>
</span><span class='line'><span class="n">column_c_is_a_boolean</span> <span class="o">||</span>
</span><span class='line'><span class="k">raise</span> <span class="s1">&#39;Bad&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. You don&#8217;t know how many items you need to chain</h3>

<p>Sometimes you need to parse a file of conditionals, or will be given a list of conditionals.  Most of the time you cannot ensure that there are only two items on the list, so the <code>if then</code> contract is not useful, but a variant of <code>&amp;&amp;</code> will work.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>  <span class="n">y</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># short circuit the first success</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">y</span> <span class="k">if</span> <span class="n">y</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bats]]></title>
    <link href="http://jkamenik.github.com/blog/2014/08/02/bats/"/>
    <updated>2014-08-02T12:06:00-04:00</updated>
    <id>http://jkamenik.github.com/blog/2014/08/02/bats</id>
    <content type="html"><![CDATA[<p>Shell scripting is a great tool, but rarely is it tested.  Enter <a href="https://github.com/sstephenson/bats">BATS</a>!  In this post I will give a quick tutorial on how to use it to test scripts.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/usr/bin/env bats</span>
</span><span class='line'>
</span><span class='line'>@test <span class="s2">&quot;running a command&quot;</span> <span class="o">{</span>
</span><span class='line'>  run foogrep <span class="s2">&quot;bar&quot;</span> foo_file
</span><span class='line'>  <span class="o">[</span> <span class="s2">&quot;$status&quot;</span> -eq 1 <span class="o">]</span>
</span><span class='line'>  <span class="o">[</span> <span class="s2">&quot;$output&quot;</span> <span class="o">=</span> <span class="s2">&quot;1: bar baz&quot;</span> <span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Shameless plug: Before we start, I recommend downloading the language grammar package - <a href="https://atom.io/packages/language-bats">language-bats</a> for the Atom editor.</p>

<p>If you have never used <a href="http://rspec.info">RSpec</a> or other testing framework the idea is simple: your code is run against expectations and if those are met then the tests pass.  The framework deals with the heavy lifting of executing the tests, printing the results, and providing to the correct interface to Continuous Integration servers.</p>

<p>BATS is a test runner for Bash scripts.  Before it each run BATS takes the file and splits each test into its own file.  BATS then runs each test file to see if passes or fails.  Anything you can do in Bash you can do in BATS, and if any command fails then the entire test fails.</p>

<h2>A Basic test</h2>

<p>BATS syntax for a test is <code>@test "desc" {}</code>.  But if you want it to run the file individually you should add the shebang line.  The simplest test looks something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/usr/bin/env bats</span>
</span><span class='line'>
</span><span class='line'>@test <span class="s2">&quot;something&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">false</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This isn&#8217;t very useful, but it will generate a failing test.</p>

<h3>Skipping tests</h3>

<p>Simetimes it is a useful to skip a test.  Just add <code>skip</code> at the point you want to the test to be skipped.  You can add a description or not.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>@test <span class="s2">&quot;just skip&quot;</span> <span class="o">{</span>
</span><span class='line'>  skip
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>@test <span class="s2">&quot;skip for a reason&quot;</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$x&quot;</span> <span class="o">==</span> <span class="s2">&quot;foo&quot;</span><span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span>skip <span class="s2">&quot;Because of foo&quot;</span>
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># more tests</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Running a command</h3>

<p>Bash doesn&#8217;t let you return strings from functions, so if you are trying to capture output and status then you have to roll your own, or use <code>run</code>.  <code>run</code> returns the commands output to <code>$output</code>, and its exit code to <code>$status</code>.  This makes testing on output and status easier.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>@test <span class="s2">&quot;check output and status&quot;</span> <span class="o">{</span>
</span><span class='line'>  run echo_foo
</span><span class='line'>  <span class="o">[</span> <span class="s2">&quot;$status&quot;</span> <span class="o">==</span> <span class="s2">&quot;0&quot;</span> <span class="o">]</span>
</span><span class='line'>  <span class="o">[</span> <span class="s2">&quot;$output&quot;</span> <span class="o">==</span> <span class="s2">&quot;foo&quot;</span> <span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Hooks</h3>

<p>Sometimes multiple tests need to share the same state.  In testing every test should stand on its own and leave no artifacts.  To accomplish this we can use the <code>setup</code> and <code>teardown</code> hooks.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>setup<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  mkdir -p /tmp/output
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>teardown<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  rm -rf /tmp/output
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>@test <span class="s2">&quot;writes files&quot;</span> <span class="o">{</span>
</span><span class='line'>  write_files_to <span class="s2">&quot;/tmp/output&quot;</span>
</span><span class='line'>  run <span class="s2">&quot;ls /tmp/output&quot;</span>
</span><span class='line'>  <span class="o">[</span> <span class="s2">&quot;$output&quot;</span> <span class="o">==</span> <span class="s2">&quot;1&quot;</span> <span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rake publish]]></title>
    <link href="http://jkamenik.github.com/blog/2014/06/23/rake-publish/"/>
    <updated>2014-06-23T08:29:00-04:00</updated>
    <id>http://jkamenik.github.com/blog/2014/06/23/rake-publish</id>
    <content type="html"><![CDATA[<p>Octoblog (the engine behind this blog) uses <a href="http://jekyllrb.com/">Jekyll</a>.  As such, it also supports the <code>publish</code> flag.  I a previous post I detailed how I added this feature back to Octopress.  Here I will show you a little rake task to easily publish an unpublished post.</p>

<!-- more -->


<h2>Requirements</h2>

<p>For a post to be published I wanted a few things to happen:</p>

<ol>
<li><code>published: true</code> was set in the YAML front-matter</li>
<li><code>date: &lt;todays date&gt;</code> was set in the YAML front-matter</li>
<li>The file was moved to today.</li>
</ol>


<p>Here is what I came up with.</p>

<figure class='code'><figcaption><span>Rakefile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="s2">&quot;Publishes an unpublished entry by changing its name, updating its internal timestamp, and setting published: true&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:publish</span><span class="p">,</span> <span class="ss">:pattern</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="p">,</span> <span class="n">args</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;tempfile&#39;</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;fileutils&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">files</span> <span class="o">=</span> <span class="no">Dir</span><span class="o">[</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">source_dir</span><span class="p">,</span><span class="n">posts_dir</span><span class="p">,</span><span class="n">args</span><span class="o">[</span><span class="ss">:pattern</span><span class="o">]</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'>  <span class="k">raise</span> <span class="s2">&quot;No files found matching pattern&quot;</span> <span class="k">if</span> <span class="n">files</span><span class="o">.</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">raise</span> <span class="s2">&quot;Too many files match pattern&quot;</span> <span class="k">if</span> <span class="n">files</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">name_time</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y-%m-%d&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">file_time</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y-%m-%d %H:%M&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">file</span> <span class="o">=</span> <span class="n">files</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>  <span class="nb">name</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">basename</span> <span class="n">file</span>
</span><span class='line'>  <span class="n">new_name</span> <span class="o">=</span> <span class="nb">name</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/\d+-\d+-\d+/</span><span class="p">,</span><span class="n">name_time</span><span class="p">)</span>
</span><span class='line'>  <span class="n">w</span>        <span class="o">=</span> <span class="no">Tempfile</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;publish&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">File</span><span class="o">.</span><span class="n">open</span> <span class="n">file</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">scan</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>    <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span><span class='line'>      <span class="c1"># limit scanning to the YAML front matter</span>
</span><span class='line'>      <span class="nb">scan</span> <span class="o">=</span> <span class="o">!</span><span class="nb">scan</span> <span class="k">if</span> <span class="n">line</span> <span class="o">==</span> <span class="s2">&quot;---</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">unless</span> <span class="nb">scan</span>
</span><span class='line'>        <span class="n">w</span><span class="o">.</span><span class="n">write</span> <span class="n">line</span>
</span><span class='line'>        <span class="k">next</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">line</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/published.*/</span><span class="p">,</span><span class="s2">&quot;published: true&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">line</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/date.*/</span><span class="p">,</span> <span class="s2">&quot;date: </span><span class="si">#{</span><span class="n">file_time</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">w</span><span class="o">.</span><span class="n">write</span> <span class="n">line</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">w</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">FileUtils</span><span class="o">.</span><span class="n">rm</span> <span class="n">file</span>
</span><span class='line'>  <span class="no">FileUtils</span><span class="o">.</span><span class="n">mv</span> <span class="n">w</span><span class="o">.</span><span class="n">path</span><span class="p">,</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">source_dir</span><span class="p">,</span><span class="n">posts_dir</span><span class="p">,</span><span class="n">new_name</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Line 6: I take a argument and get a list of files matching the pattern</p>

<p>Line 7 &amp; 8: I found it was too easy to screw up a pattern and publish too few or too many posts.  For that reason I am explicit about the failure.</p>

<p>Line 15: Calculates its name for today.</p>

<p>Line 16 &amp; 37: Generate a temp file to write to.  I found that bad things happened if you published a post that you wrote the same day.  Solution was to write to a temp file and then move the temp file later.</p>

<p>Line 19 &amp;&amp; 22: An inelegant solution to isolating scanning to only the YAML front-matter.</p>

<p>Line 28 &amp; 29: Update the YAML front-matter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Query Language]]></title>
    <link href="http://jkamenik.github.com/blog/2014/06/22/google-query-language/"/>
    <updated>2014-06-22T11:19:00-04:00</updated>
    <id>http://jkamenik.github.com/blog/2014/06/22/google-query-language</id>
    <content type="html"><![CDATA[<p>A while back, my wife and I started keeping a budget.  We need something very easy that shows us where we are every moment.  Also, to ensure that it is not something we &#8220;forget&#8221; it must be something that we manually enter.</p>

<p>I created a Google Form in order to allow us to capture the receipts.  The form dumps into a Google Spreadsheet.  I then use a Pivot Table and the Google Query Lanauage to create a Chart.  In this post I will cover the entire process.</p>

<!-- more -->


<h2>Step 1: Create a form</h2>

<ol>
<li>Create a google form</li>
<li>Add the following fields

<ol>
<li>&#8220;Company&#8221; - text- required</li>
<li>&#8220;Date&#8221; - date - required (don&#8217;t include time)</li>
<li>&#8220;Amount&#8221; - text - required (add a &#8220;number&#8221; validation)</li>
<li>&#8220;Category&#8221; - list - required.  We added the following

<ol>
<li>Other / Unknown</li>
<li>Baby Supplies</li>
<li>Car</li>
<li>Entertainment</li>
<li>Gas</li>
<li>Groceries</li>
<li>Home</li>
<li>Medical</li>
<li>Pet Supplies</li>
<li>Resturants / Fast Food</li>
</ol>
</li>
<li>&#8220;Comment&#8221; - paragraph</li>
</ol>
</li>
<li>Choose response destination

<ol>
<li>Choose a &#8220;New Spreadsheet&#8221;</li>
</ol>
</li>
<li>Send the form to yourself and anyone else that needs to enter receipts</li>
</ol>


<p>At this point you have a Form which submits to a Spreadsheet.  I recommend bookmarking the link in your smart-phone so that it is easy and quick to add receipts right after your purchases.</p>

<h2>Step 2: Pivot</h2>

<p>Form usually record into a sheet called &#8220;Form Responses&#8221; which I assume here.</p>

<ol>
<li>Select &#8220;Form Responses&#8221;</li>
<li>Select Data -> Pivot table report&#8230;

<ol>
<li>Rows - Add &#8220;Category&#8221;</li>
<li>Values - Add &#8220;Amount&#8221;</li>
</ol>
</li>
</ol>


<p>Now you should have a two column table.  On the left are the categories.  On the right is the sum of all the values of that category.</p>

<h2>Step 3: Google Query</h2>

<p>In order to chart the budget vs the actual spending we need to create another table.</p>

<ol>
<li>Insert a sheet named Budget.</li>
<li>Label the columns: Category, Budget, Actual, Query</li>
<li>Copy all the categories to column A</li>
<li>Add the budgeted amount to column B</li>
<li>Add the following to column C

<ol>
<li><code>=if(isna(C2), 0, C2)</code></li>
</ol>
</li>
<li>Add the following query to column D

<ol>
<li><code>=QUERY('Pivot Table'!A:B, "select B where A='"&amp;A2&amp;"'","")</code></li>
<li>&#8220;#N/A&#8221; means that are no receipts for the category and can safely be ignored.</li>
</ol>
</li>
<li>Copy and paste cell C2 and D2 to the rest of the cells in the column

<ol>
<li>Google will change the internal references (A2, and C2) to the correct cell name, so you don&#8217;t have to.</li>
</ol>
</li>
</ol>


<p>The Google Query Language is defined <a href="https://developers.google.com/chart/interactive/docs/querylanguage">here</a>.  It is a good read to see all the power of this language, but I am only going to explain the parts that we need.</p>

<h3>Query</h3>

<p><code>QUERY</code> takes three arguments: range of values, query string, and optional headers.  I am going to explain them in reverse.</p>

<p>The headers are guessed if nothing is provided.  This would cause the query to take two cells, which is not the behavior I wanted.  By adding &#8220;&#8221; it removes the header.</p>

<p>The query string tells google what data we are selecting into the cell.  In our simple example it is a direct value select using a conditional.  This is because the column order may not be the same in both sheets.  &#8220;select B&#8221; means to choose the &#8220;B&#8221; from whatever rows match the query.  &#8220;where A=&#8217;&#8221;&amp;A2&amp;&#8221;&#8217;&#8221; means to limit the rows returned to those where the value of cell A matches the value of A2 in this sheet.  The &#8220;&amp;&#8221; is the string concat operator.</p>

<p>The range of values tells Google what it is allowed to look at.  We use the &#8216;Sheet&#8217;!Col:Col form in order to select data from another sheet.  We only provide the columns A and B because we want to look at all rows.</p>

<h3>ISNA</h3>

<p>Charts cannot deal with non-number columns.  Since the query can produce a non-number output (#N/A) we need to add an additional level of processing.</p>

<p><code>isna</code> takes a cell and returns if that cell is #N/A.</p>

<p><code>if</code> take a boolean, a true value, and a false value.  If the first argument is true then the true value is returned.  If the first argument is false then the false value is returned.</p>

<h2>Step 4: Chart</h2>

<p>Charts can only take numbers and they can only accept contiguous cells.  A, B, and C are the columns that we want to chart.</p>

<ol>
<li>Insert -> Chart</li>
<li>Data range: Budget!A1:C14</li>
<li>Use row 1 as headers</li>
<li>Chart type: Bar chart</li>
<li>Add a chart title</li>
</ol>


<h2>Step 5: Publish</h2>

<p>The point of this document is to know where your money is going quickly.  In order to make it easy publish the document.  This will make google convert the document into a HTML version which is easily viewed in your smart phone.  The chart will even be convert to an image.</p>

<ol>
<li>File -> Publish to the web&#8230;</li>
<li>Check &#8220;Automatically republish when changes are made&#8221;</li>
<li>Copy the link</li>
<li>Send to link to anyone that needs to be kept informed about the budget</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code does rust]]></title>
    <link href="http://jkamenik.github.com/blog/2014/04/10/code-does-rust/"/>
    <updated>2014-04-10T14:58:00-04:00</updated>
    <id>http://jkamenik.github.com/blog/2014/04/10/code-does-rust</id>
    <content type="html"><![CDATA[<p>Fourteen years ago Joel Spolsky wrote an article entitled &#8220;Netscape Goes Bonkers&#8221;.  In that article he states that &#8220;old software doesn&#8217;t rust&#8221;.  The rest of the article is good, but that statement is &#8220;off&#8221;.</p>

<!-- more -->


<p>To be clear, as a direct comparison software contains no metal to oxidize and therefore cannot actually &#8220;rust&#8221;.  But as an analogy, over time untouched software will slowly degrade and eventually stop working.  So the corrected statement should have been &#8220;[untouched] old software rust[s].&#8221;</p>

<p>Recently, some login code I wrote a few years ago magically stopped working on FireFox.  This functionality continues to work on all other major browsers. However, due to the fact that FireFox decided to change how it handled cookies my software is now slightly less capable of performing as expected.</p>

<p>As a result, instead of making further progress on a new feature I am forced to a take a moment to clean and fix the rust spot.  Not a challenging fix and not indicative of a fundamental design problem, but rather, an annoying, little issue which needs to be addressed. Of course, the big picture view is that, over the years, I&#8217;ve had to deal with hundreds of problems just like this one. Meaning that when I don&#8217;t closely maintain a project&#8217;s codebase and adapt it to dependency updates, then it&#8217;s performance and functionality is diminished.  Very similarly to how an unmaintained metal surface rusts.</p>

<p>This leads me to believe that software does in fact rust.</p>

<p>The solution? I&#8217;ve found that there is no substitute for taking the proactive approach and resolving these problems early on because eventually the rust will become too significant and lead to the software being scrapped altogether.</p>

<p>Ideas age like fine wine, but software rusts.</p>

<h2>How to slow the problem</h2>

<p>Any time there is an interface between two systems there is corrosion.  This is as true in software as it is in the real world.  Tires exist because road surfaces chew-up (corrode) anything that slides across them.  The tire is the car manufacturer&#8217;s interface to the road.  The same method works for software.</p>

<p>If the interface between two systems is highly corrosive (constantly changing) then the best interface is someone else&#8217;s.  For example, Heroku is a going to be a better interface to &#8220;cloud&#8221; hosting then Amazon.  Amazon is infrastructure in the cloud; basically the road.  Heroku is web hosting in the cloud and uses Amazon as a base; basically the tire.  So if all you want to spend your time on is building the car, then use Heroku as the tires.</p>

<p>If the interface between two systems is only slightly corrosive then add a standardized &#8220;socket&#8221;, to protect yourself.  Car&#8217;s don&#8217;t produce enough point-heat to light a cigarette, and instead of piping the 800+ degree exhaust into the cabin or giving unprotected access to the car&#8217;s battery the car manufacturer introduced a socket that could power a heating coil.  The socket protects the car, and provides a standard interface.  And by being standardized, anyone (not just the manufacturer) can create an adaptor to fit the socket.</p>

<p>An Application Programming Interface (API) is the software equivalent of a standardized socket.  Any place your system needs to be accessed, simply create an API, even if you control both ends.  Now your tests can focus on ensuring an unchanging API, to catch any wear that needs to be addressed.</p>

<p>If the interface is non-corrosive then test for wear.  Many systems &#8220;guarantee backwards compatibility&#8221; (at least until they it breaks the first time).  This is the software equivalent of a well lubricated non-corrosive interface.  It is still not immune to corrosion, but you don&#8217;t (and shouldn&#8217;t) actively protect yourself.  Instead, add some once-in-while checks.  Cars usually get a 50K mile service to check for these low wear areas.  Do something similar with your software.</p>

<p>Of the millions of cars that get a 50K mile service a small percentage will have a catastrophic failure, where one of those non-corrosive interfaces corroded.  The same will happen in your software, eventually, but the cost of constantly checking those parts is far greater than any saving gained by not letting it fail.  It is better to follow good practices (like modular design, and not cutting corners) then it is to search for failures everywhere all the time.</p>

<p>If the interface is solid, then fail to launch if there is wiggle.  Cars need engines.  That is a solid interface and a hard requirement, without it you go no where.  And if a engine dies while it is running there is the expectation that the car will stop.  We might be surprised that an engine breaks, but we are not surprised when a broken engine stops a car.  Web servers need databases and network connections.  So code to bind to a port or connect to the database should allow the app to fully fail.</p>

<p>During normal operations it is common for a database connection to be temporarily closed, like network timeouts.  Temporary failures should have one additional layer of protection: a limited retry count.  After the retry count is exceeded then the issue should be considered a full failure and the app should stop.</p>

<h2>Sidenote: Degrading software</h2>

<p>And now I hear you saying &#8220;Woah, apps should degrade gracefully.&#8221;  Honestly, they shouldn&#8217;t, at least not self-degrade.  You would never drive a car, get a flat, and expect the car to change its own tire.  No, you pull over, install the spare tire, and at a degraded level drive slowly to a tire shop to have it fixed (at least that is what you should do).  But the car did not degrade itself.  You, as the driver, are expected to make that choice for the car.</p>

<p>The same is true in software.  The software should not degrade itself.  There should be a watchdog for your software which periodically checks to see if it is alive.  If during one of the checks the software is found dead then it should be resurrected.  If it suffers SIDS then the watchdog notifies someone, otherwise it is business as usual.  To be a good-citizen, your software should play nicely with the watchdog.</p>

<p>By adding degradation to your software you must also add complexity to your watchdog, so that it can deal with your &#8220;dying&#8221; software.  And even if you are fine with the Law of Demeter violation you just introduced, you still cannot overcome the permanently-half-dead issue.  Permanently-half-dead is the common state in degrading software where your software has one or more forms of degradation and as a result, it cannot self-correct.  It will never die because it is degraded, but it can never perform fully either.</p>

<p>As a further aside, people often confused degrading software with defensive software.  But to clarify, defensive software is only concerned with preventing bugs due to unforeseen usage.  Things like swapping direct memory manipulation with a memory manager, and code reviews, and testing are defensive.  Defensive software can and does terminate before it can degrade into doing something foolish.  Take for example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">DegradedUser</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">name</span><span class="o">=</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># if the user provides too much data, </span>
</span><span class='line'>    <span class="c1"># ignore their wishes, do what we want,</span>
</span><span class='line'>    <span class="c1"># and don&#39;t tell them</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span><span class="o">.</span><span class="n">to_s</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">16</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">DefensiveUser</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">name</span><span class="o">=</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="k">raise</span> <span class="s1">&#39;name is too long&#39;</span> <span class="k">if</span> <span class="nb">name</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">16</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BMore on Rails 4-8-2014]]></title>
    <link href="http://jkamenik.github.com/blog/2014/04/09/bmore-on-rails-4-8-2014/"/>
    <updated>2014-04-09T12:51:00-04:00</updated>
    <id>http://jkamenik.github.com/blog/2014/04/09/bmore-on-rails-4-8-2014</id>
    <content type="html"><![CDATA[<p>As always, last nights B&#8217;More on Rails meetup was enjoyable.  There were two talks and a lot of the new people.  The first talk was on solving the &#8220;Eight queens&#8221; problem in Haskell.  The second was about Postgresql and Rails 4.</p>

<!-- more -->


<h2>Eight Queens</h2>

<p>For those - like me - that are not familar with this problem the full details are <a href="http://en.wikipedia.org/wiki/Eight_queens_puzzle">here</a>.  Basically, given an 8x8 board place 8 queens such that no queen can attach another queen.  In actuality Robert solved the more difficult N-Queens problem using Haskell.</p>

<p>The solution was to brute force through all combinations until a solution is reached.  This would seem to be a slow approach, but haskell (as a functional language) is setup for these kinds of tasks.</p>

<p>As a Rails guy I found the syntax of Haskell extremely difficult to understand.  However, Robert was a fantastic and funny speaker; turning an otherwise dry programming talk into an interesting presentation about trails and pitfalls.</p>

<p>One such pitfall Robert explained was using the imutable list which caused the calcuation time to grow by an order of magnatude.  By swaping the imutable list with a mutable set the calcuation time was reduced dramatically.  Sure, using something mutable violates the purity of a &#8220;pure functional&#8221; language, but Haskell appears to allow some wiggle room.</p>

<p>Another pitfall was in understanding and using Monads.  After reading on my own, my best guess is that a Monad is simply context for containing a non-functional (in the sense of not allowed in a functional language) behavior.</p>

<p>All-in-all I don&#8217;t think I will be running out to try Haskell, but I would like to hear another talk from Robert.</p>

<h2>Postgresql and Rails 4</h2>

<p><a href="http://decomplecting.org/rails4-postgres/#/">Slides</a></p>

<p>The second talk wasn&#8217;t so much about Rails 4, but more about ActiveRecord 4 and how it has introduced direct support for some of the nicer Postgresql features.  This talk was jam packed with examples and references.  The full slides are linked above.  The summary is:</p>

<ol>
<li>ActiveRecord adds the following columns types

<ol>
<li>Array</li>
<li>UUID</li>
<li>HStore</li>
</ol>
</li>
<li>ActiveRecord adds direct support for GiN and GiST indexes</li>
<li>The following gems are still useful:

<ol>
<li><a href="https://github.com/lomba/schema_plus">schema_plus</a>

<ol>
<li>Adds a reduced migration syntax - do more with one line</li>
<li>Adds foreign key constrains</li>
<li>Adds views</li>
</ol>
</li>
<li><a href="https://github.com/Casecommons/pg_search">pg_search</a>

<ol>
<li>Makes direct database searching easier</li>
</ol>
</li>
<li><a href="https://github.com/dockyard/postgres_ext">postgres_ext</a>

<ol>
<li>Adds native postgresql types to ActiveRecord</li>
</ol>
</li>
</ol>
</li>
<li>You should read <a href="http://blogs.tedneward.com/2006/06/26/The+Vietnam+Of+Computer+Science.aspx">The Vietnam Of Computer Science</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inbox Zero: Part 1]]></title>
    <link href="http://jkamenik.github.com/blog/2014/03/23/inbox-zero-part-1/"/>
    <updated>2014-03-23T16:45:00-04:00</updated>
    <id>http://jkamenik.github.com/blog/2014/03/23/inbox-zero-part-1</id>
    <content type="html"><![CDATA[<p>This is the first in a series of posts related to reducing the number of emails in your inbox, and more importantly, keeping it reduced.  This idea comes from the world of GTD (specifically 43Folders) and is a good strategy for anyone who needs quick access to &#8220;important&#8221; emails.</p>

<p>The filter-then-process method that I am about to describe works with pretty much any job you can think of: You sort laundry then wash it, you rake leaves into piles before you bag them, you collect dishes before you wash them.</p>

<!-- more -->


<p>Everything I describe is done with stock Gmail: no add-ons, no configurations, no 3rd party tools.  Just vanilla Gmail.</p>

<h2>Background</h2>

<p>I do not to live out of email, but part of my job requires reading it.  I check email at most twice a day, and I am still more responsive than anyone else at the company; especially those that who &#8220;live&#8221; out of email.</p>

<p>The reason is focus.  Those who jump around have too much to focus on, and lose details.  They are great people for the quick one-line &#8220;Got it&#8221; emails, but rarely have any follow-through.</p>

<h2>The goal</h2>

<p>The goals are simple: see the emails worth reading and responding to.  To achieve this we are going to:</p>

<ol>
<li>Set up Gmail and develop a process</li>
<li>Move non-emails out of Email</li>
<li>Automate the process</li>
<li>Refine the process</li>
<li>Enjoy our free time</li>
</ol>


<h2>The Fear of Missing Out</h2>

<p>At this point you are probably looking at my comment on checking email twice a day and thinking &#8220;that will never work for me.&#8221;  Chances are you said to yourself &#8220;What if I miss out on something important,&#8221; or a variant like:</p>

<ol>
<li>What if I miss an email that my child/husband/wife/father/mother is in trouble?</li>
<li>What if my boss emails me work that must be done immediately?</li>
<li>What if my friends invite me to a party and I miss the email?</li>
</ol>


<p>To that I say &#8220;nonsense.&#8221;  Your mind is inventing scenarios that will never happen.  Nobody has ever turned to email in times of emergencies.  If a boss wants something immediately they will tell you in person, or over the phone. And if your friends were really inviting you to a party, they would do so via Evite, Meetup, or something similar.</p>

<h2>Conclusion</h2>

<p>Here all I did was tell you that this way of processing your email will work.  In the next post we will actually get started on the process.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ronin Avery Kamenik]]></title>
    <link href="http://jkamenik.github.com/blog/2014/02/28/ronin-avery-kamenik/"/>
    <updated>2014-02-28T14:29:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2014/02/28/ronin-avery-kamenik</id>
    <content type="html"><![CDATA[<p>Born February 21st, 2014 at 7:04am.  8lbs 11oz, 21 3/4 inches.</p>

<p><img src="http://jkamenik.github.com/images/ronin/IMG_0454.jpeg"></p>

<!-- more -->


<h2>Timeline</h2>

<p><strong>Wednesday 2/19</strong> Mel starts having labor.  The contractors were about 10 minutes apart and between 30s and 1m.  They slow and stop by noon.</p>

<p><strong>Thursday 12am</strong> Contractions start again and are fairly regular.  Just need to wait until they are 5 minutes apart before we start calling people.</p>

<p><strong>1am</strong> Contractions are 5 minutes apart so we call Mel&#8217;s family to come down and pick up Frankie, call my family to come and pick up the dogs, and call the Doula.</p>

<p><strong>2:15am</strong> Doula arrived.  And after a bit we decide to call the Midwife.  The midwife tells us to wait another hour</p>

<p><strong>3am</strong> Mel&#8217;s parents arrive.</p>

<p><strong>3:45am</strong> We leave for the Hospital.</p>

<p><strong>5am</strong> We are in triage.  And they are running tests.</p>

<p><strong>5:40am</strong> We are discharged, because we are only 2cm dilated.  You have to be 4 to 5 cm to be admitted.</p>

<p><strong>6:30am</strong> We are home again, and try to relax.</p>

<p><strong>11am</strong> Midwife appointment.  We are 5cm dilated.  They tell us to go walk around for 2 hours and report to the hospital again.  We head to the near by Annapolis mall to eat lunch, and walk around.  I am massaging Mel&#8217;s back as she has contractions while we walk.  People stare but we don&#8217;t care.</p>

<p><strong>1:30pm</strong> Go back to the hospital, are admitted and settle into our room.</p>

<p><strong>7pm</strong> Not making much progress so they give us some options: go home, stay have the water broken and risk the C-Section.  We counter with stay but walk.  They allow us to unhook from the monitors and walk the halls.  So we walk constantly for 2+ hours.</p>

<p><strong>11pm</strong> Re-checked and she had progressed to 8 cm dilated.  Walking really did the trick.</p>

<p><strong>Friday 12am</strong> Water spontaneously broke while laying in bed.  I was holding her hand through the contractions, in socks.  You can imagine what happened to the those socks :)</p>

<p>Now we are on the clock.  Mel is still at 8cm, and Ronin is at -2 station.  There are still many hours of labor left.</p>

<p>About 10 minutes after the water broke the first dry contraction starts.  It many many many times more powerful and painful then the back labor she has been dealing with so far.  Mel (against her birth plan) wants an epidural.  The doula, nurse, and I are getting Mel through the contractions one at a time, by being positive and telling her she can do it.</p>

<p>The hardest part is getting Mel relaxed after the contractions, but they are coming every few seconds.  After many contractions we relent and agree on the epidural if she promises to take a nap so that when it is time to push she is ready.</p>

<p>(As an aside, she probably could have gone a lot further without the meds, but with so little sleep we were risking another C-Section if she was too tired to push)</p>

<p><strong>12:30am</strong> The epidural is put in, which is difficult because you have to remain still and relaxed.  Pretty much impossible when you are contracting, so the Dr has to work between contractions.</p>

<p>After the epidural is in we settle down for our first sleep since Tuesday.  Its not going to be great sleep, but we all know that the hardest part is yet to come.</p>

<p><strong>6am</strong> Mel feels an almost uncontrollable urge to poop, which is a sign that she needs to start pushing.  This is hardest part.</p>

<p>We have to wait until we are seen by the Midwife.  After we are checked we get the news that Mel is 9+ cm dilated but Ronin is still at -1 / -2 station.  This means that he has not yet engaged.  He should be at 0 or 1 by this point.</p>

<p>The Midwife suggests that Mel perform some practice pushing just to get Ronin engaged.  Then we can take another nap and start again.</p>

<p>The next time Mel feels the urge she pushes, while the Doula and I hold her legs.  She pushed him to engagement, so the Midwife starts massaging the cervix to get it around his head.  A few pushes later Ronin is descending.  The Midwife is very happy with the quality, strength, and duration of Mel&#8217;s pushes.</p>

<p><strong>6:45am</strong> The Midwife points out the very top of Ronin&#8217;s head, which is just visible, and doesn&#8217;t retract between pushes.  This means that Mel&#8217;s &#8220;practice&#8221; pushing will actually birth Ronin.</p>

<p>About 3 pushes later and he is fully crowning.  The Midwife holds her hand on Ronin&#8217;s head to prevent him from ejecting and calls for a gown.  The room is teaming with Doctors and nurses now, and she is given freedom to push.</p>

<p>1 push and the head is out.  Couple pushes later his shoulders.</p>

<p><strong>7:04am</strong> Ronin is born and laying on Mel&#8217;s chest.  They give her a few moments before taking him for clean up and scoring.</p>

<p><strong>8am</strong> Everything went well.  Ronin has a 1 minute Apgar score of 8 and 5 minute score of 9.  He is looking great and we are left alone for several hours to enjoy our new baby.</p>

<p><strong>10am</strong> The nurse comes back in to give Ronin his first bath, and check him over again.  They are still waiting for a recovery room to become free so we remain in the delivery room.</p>

<p><strong>3pm</strong> They have a recovery room for us. So we move.  Ronin was a no risk delivery, so they only need to observe him for 24 hours from the first feeding, which was about 7:30.  We elect to leave as soon as possible.</p>

<p><strong>Saturday 2pm</strong> Ronin has had all the tests done, and the lactation consult has been in to help Mel with breast feeding, and we are free to leave.  Breast feeding is going much easier with Ronin; 90% of it is that Mel is more relaxed.</p>

<p>With our first, leaving the hospital was a nerveracking time, but with our second we already know what we are doing, and we already have all the stuff.  We are ready to go.  I can&#8217;t wait to sleep in my own bed, next to my wife.</p>

<h2>What I have learned (this time)</h2>

<p>Each baby is different, and I am not a medical professional.  Everything I listed here is true for my baby only.</p>

<ol>
<li>Each baby is different.  For example:

<ol>
<li>Frankie slept for the first week, even sleeping through feedings.  Ronin was awake for several hours after birth, and spends several hours a day awake.</li>
<li>Frankie could lift his head after 1 week.  Ronin was born with the ability to lift his head.</li>
<li>Frankie was easier to carry because he was a lump.  Ronin moves a lot and throws his head around and is much harder to carry when he is awake.</li>
<li>Frankie didn&#8217;t care to be held.  Ronin prefers to be held.</li>
<li>Frankie prefers to sit in his own filth rather than being changed.  Ronin hates to be dirty and prefers to be changed.</li>
<li>Frankie fit well into a size bigger (3 month clothes when he was born).  Ronin is slightly longer than Frankie, but lighter so nothing fits him correctly.</li>
</ol>
</li>
<li>Each pregnancy is different

<ol>
<li>Each pregnancy gets harder.  The pains hurt worse during pregnancy and the after pains are wrose as well.</li>
<li>Each pregnancy gets easier.  Even though everything hurts more you are expecting it, and can better deal with it.</li>
</ol>
</li>
<li>Life is hardest after the first one.  It is hard to go from &#8220;without kids&#8221; to &#8220;with kids&#8221;.  But once you are &#8220;with kids&#8221; two kids is not that much harder than one.  You have already baby proofed the house, and changed your life around.</li>
<li>Allowing comments on your baby&#8217;s birth story is stupid.  I learned that after the first one.  Therefore I have disabled them on this one.  Sorry for anyone that wants to wish us well, but one can ruin it for everyone.</li>
<li>Sleep is less of an issue with the 2nd.  To be honest we get a lot less sleep this time around.  The difference is that we know we are going to get sleep 30 minutes at a time.  And we love it when he gives us more.  With Frankie we were scared to sleep because we should only get 1 hour or so.</li>
<li>A vaginal birth is front loaded, while a C-Section is back loaded.  I am not a proponent for one vs the other, but in our case the C-Section was over and done with in a matter of minutes.  The vaginal birth took hours (31 to be exact).  In the C-Section case, all of the recovery started after the birth with 3 days in the hospital.  With the VBAC once the delivery was over we were free to go.  So with Vaginal birth (assuming there are no complications) everything happens leading up to the birth, with a C-Section everything happens after the birth.</li>
<li>Writing a birth plan, having a Doula, and using Midwifes was ideal for us.  Everyone was really supportive, and the Doula stayed with us the entire time.  The midwives and nurses reviewed the birth plan and where very engaged with us if there were reasons we had to go off plan.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crafty Timer]]></title>
    <link href="http://jkamenik.github.com/blog/2014/02/24/crafty-timer/"/>
    <updated>2014-02-24T13:28:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2014/02/24/crafty-timer</id>
    <content type="html"><![CDATA[<p>Crafty JS is a game engine written in Javascript.  Like many game engines there is a main event loop that drives everything.  This is actually a great thing, unless you are trying to use timers.</p>

<p>Javascript is single threaded but asynchronous.  This means there is no way to &#8220;sleep&#8221; the main loop.  Instead there is a <code>setTimeout</code> function which takes a callback that is called after the timer has expired.  In most JS programs having one or more timers setup via <code>setTimeout</code> isn&#8217;t much of an issue.</p>

<p>In Crafty there is already a main event loop that actually performs the same function and it better fits the separation of background and rendering responsibilities.  Remember that in a game you will have hundreds or thousands of background calculation per second but only 40 to 60 rendering calculations.</p>

<p>With that in mind I created two components: a Timer which does everything in the background, and TimePrinter which is a timer and rerenders the current seconds until the timer expires.</p>

<!-- more -->


<h2>Timer</h2>

<figure class='code'><figcaption><span>timer.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">Crafty</span><span class="p">.</span><span class="nx">c</span><span class="p">(</span><span class="s">&#39;Timer&#39;</span><span class="p">,{</span>
</span><span class='line'>  <span class="nv">_stopFunc: </span>   <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">_expireTime: </span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">_secondsLeft: </span><span class="kc">null</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">start: </span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">if</span> <span class="k">this</span><span class="p">.</span><span class="nx">_stopFunc</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">if</span> <span class="k">this</span><span class="p">.</span><span class="nx">_calculateTime</span> <span class="o">&lt;=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">self = </span><span class="k">this</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nv">_stopFunc = </span><span class="nx">Crafty</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s">&#39;EnterFrame&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="c1"># a proxy callback which sets the &quot;this&quot;</span>
</span><span class='line'>      <span class="nx">self</span><span class="p">.</span><span class="nx">_calculateTime</span><span class="p">()</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="k">this</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">stop: </span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">unless</span> <span class="k">this</span><span class="p">.</span><span class="nx">_stopFunc</span>
</span><span class='line'>    <span class="nx">Crafty</span><span class="p">.</span><span class="nx">unbind</span><span class="p">(</span><span class="s">&#39;EnterFrame&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">_stopFunc</span><span class="p">)</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nv">_stopFunc = </span><span class="kc">null</span>
</span><span class='line'>    <span class="k">this</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">expiresIn: </span><span class="nf">(seconds, autoStart = false)-&gt;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nv">_expireTime = </span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">()</span> <span class="o">+</span> <span class="p">(</span><span class="nx">seconds</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">start</span><span class="p">()</span> <span class="k">if</span> <span class="nx">autoStart</span>
</span><span class='line'>    <span class="k">this</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">addSeconds: </span><span class="nf">(seconds, autoStart = false)-&gt;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nv">_expireTime = </span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">()</span> <span class="k">if</span> <span class="k">this</span><span class="p">.</span><span class="nx">_secondsLeft</span> <span class="o">&lt;=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_expireTime</span> <span class="o">+=</span> <span class="p">(</span><span class="nx">seconds</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">start</span><span class="p">()</span> <span class="k">if</span> <span class="nx">autoStart</span>
</span><span class='line'>    <span class="k">this</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">_calculateTime: </span><span class="nf">(event)-&gt;</span>
</span><span class='line'>    <span class="nv">now  = </span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">()</span>
</span><span class='line'>    <span class="nv">left = </span><span class="k">this</span><span class="p">.</span><span class="nx">_expireTime</span> <span class="o">-</span> <span class="nx">now</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nv">_secondsLeft = </span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">left</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">stop</span><span class="p">()</span> <span class="k">if</span> <span class="k">this</span><span class="p">.</span><span class="nx">_secondsLeft</span> <span class="o">&lt;=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_secondsLeft</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>start</code> starts the timer.  It binds to the &#8220;EnterFrame&#8221; event and sets up a proxy callback to ensure the &#8220;this&#8221; variable is maintained during the callback.</p>

<p><code>stop</code> remotes the &#8220;EnterFrame&#8221; callback thereby detacting it from the timer loop.</p>

<p><code>expiresIn</code> sets up a number of seconds to expire the timer in.  There is an optional second paramter to start the timer loop.</p>

<p><code>addSeconds</code> adds seconds to the existing timer, making it take longer to expire.  If the timer has expired then it behaves like <code>expiresIn</code></p>

<p><code>_calculateTime</code> is the work horse.  It calculates the real time and compares it to the expire time and returns the number of seconds until it expires.  If the current time is greater or equal to the expire time then the timer is considered expired and is stopped.  Stopping the timer removes any useless calculations, speeding up the overall game.</p>

<h2>Time Printer</h2>

<p>In order to separate concerns I created a separate component to print the number of seconds until the timer expires.  By separating things out I can have a general purpose timer which is displayed many different ways.</p>

<p>This class simply shows the number of seconds left as a string.</p>

<figure class='code'><figcaption><span>time_printer.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">Crafty</span><span class="p">.</span><span class="nx">c</span><span class="p">(</span><span class="s">&#39;TimePrinter&#39;</span><span class="p">,{</span>
</span><span class='line'>  <span class="nv">init: </span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">requires</span> <span class="s">&#39;2D, DOM, Text, Timer&#39;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">attr</span><span class="p">({</span>
</span><span class='line'>      <span class="nv">x: </span><span class="mi">100</span><span class="p">,</span>
</span><span class='line'>      <span class="nv">y: </span><span class="mi">100</span><span class="p">,</span>
</span><span class='line'>      <span class="nv">w: </span><span class="mi">200</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>    <span class="nv">self = </span><span class="k">this</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s">&#39;RenderScene&#39;</span><span class="p">,</span><span class="o">-&gt;</span>
</span><span class='line'>      <span class="nx">self</span><span class="p">.</span><span class="nx">render</span><span class="p">()</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">render: </span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">text</span> <span class="s">&#39;&#39;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">_secondsLeft</span><span class="o">+</span><span class="s">&#39; seconds&#39;</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>init</code> requires the DOM, 2D, and Text components so that I can render text.  It also requires Timer so that it behaves like a Timer.  It also binds to the &#8220;RenderScene&#8221; event, which just rendering thread.</p>

<p><code>render</code> is the call back called when it is time to render the entity.</p>

<h2>Usage</h2>

<p>A simple usage might look something like this:</p>

<figure class='code'><figcaption><span>scene/loading.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">Crafty</span><span class="p">.</span><span class="nx">scene</span><span class="p">(</span><span class="s">&#39;Loading&#39;</span><span class="p">,</span><span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">printer = </span><span class="nx">Crafty</span><span class="p">.</span><span class="nx">e</span><span class="p">(</span><span class="s">&quot;TimePrinter&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">printer</span><span class="p">.</span><span class="nx">expiresIn</span> <span class="mi">10</span><span class="p">,</span> <span class="kc">true</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>timer.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;lib/crafty.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;src/components/timer.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;src/components/time_printer.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;src/scenes/loading.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script&gt;</span>
</span><span class='line'>      <span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;load&#39;</span><span class="p">,</span><span class="o">-&gt;</span>
</span><span class='line'>        <span class="nx">Crafty</span><span class="p">.</span><span class="nx">init</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">Crafty</span><span class="p">.</span><span class="nx">scene</span><span class="p">(</span><span class="s1">&#39;Loading&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>    <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;style&gt;</span>
</span><span class='line'>        <span class="nt">body</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">padding</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>            <span class="k">margin</span><span class="o">:</span>  <span class="m">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="nt">&lt;/style&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crafty JS]]></title>
    <link href="http://jkamenik.github.com/blog/2014/02/17/crafty-js/"/>
    <updated>2014-02-17T12:53:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2014/02/17/crafty-js</id>
    <content type="html"><![CDATA[<p>Recently I started playing Clash of Clans on the iPhone, which is a City building game.  It is a free app that uses in-app purchases to speed up your progress.  I have tried many of these types of games and there is something addictive about them.</p>

<p>Why not build my own game?  Great idea, but I know nothing about game design.  I am just a programmer.  So a bit of Googling later and I have a small list of required items.  All of which are required to get a game published.  Basically, not useful to me, since I want to learn, not sell.</p>

<p>So instead of building the next award winning game that will make me a millionare I am going to play to my strength of programming and slowly move into the other area that are needed for an engaging game.</p>

<p>That is where Crafty comes in.  <a href="http://craftyjs.com/">Crafty</a> is a Javascript game engine.  Unfortunately their documentation sucks, so I am writing what I understand (though it is probably wrong).</p>

<!-- more -->


<p>I chose Crafty because it was literally the first thing that came up when I googled &#8220;javascript game engine&#8221;.  So I jumped into the <a href="http://buildnewgames.com/introduction-to-crafty/">getting started guild</a>, and followed it in my own <a href="https://github.com/jkamenik/crafty_tutorial">repo</a>.</p>

<p>A game is built by combining various types of objects together.  This is a basic list of the Crafty objects.</p>

<h2>Scenes</h2>

<p>A scene is the groundwork for a distinct part of the game.  One might be the loading screen that shows the user that things are happening.  Another might be the actual game screen.  Another might be a &#8220;game over&#8221; screen.</p>

<p>Scenes are registered with <code>Crafty.scene</code> which takes 3 arguments</p>

<ol>
<li>Name - A string representing the scene name</li>
<li>init function - a function to set up the scene</li>
<li>uninit function - a function called to stop the scene (called after 2D objects are destroyed)</li>
</ol>


<p><code>Crafty.enterScene</code> can be used to enter a new scene (and by extension destroy the current scene).</p>

<h2>Component</h2>

<p>A component encapsulates data and behaviors into reusable parts.  There are already many prebuilt components like <code>SpriteAnimation</code> which allows a sprite to animate itself, and &#8220;Collision&#8221; which allows object to detect if they have hit a convex polygon.</p>

<p>Components are registered with <code>Crafty.c</code> which takes 2 arguments</p>

<ol>
<li>Name - A string representing the component</li>
<li>Object - A JS object representing the data and behaviors of the component</li>
</ol>


<p>There are two special functions:</p>

<ol>
<li>init - is called when the component is included within an entity</li>
<li>remove - is called when the component is removed or an entity is destroyed.  If it is being called because of an entity then it is passed a single &#8220;true&#8221; argument.</li>
</ol>


<p>By convention if you provide a function that has the same name as the component then it is used as a constructor by the entity.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Crafty</span><span class="p">.</span><span class="nx">c</span><span class="p">(</span><span class="s1">&#39;Test&#39;</span><span class="p">,{</span>
</span><span class='line'>    <span class="nx">init</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">test</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">message</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">alert</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Crafty</span><span class="p">.</span><span class="nx">e</span><span class="p">(</span><span class="s1">&#39;Test&#39;</span><span class="p">).</span><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;something&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Entity</h2>

<p>An entity is an individual and distinct object in the game.  They are usually made up of one or more Components, but are not necessarily visible to the user.  Your player character will be an entity that might include a keyboard event component as well as a collision component and sprite component.</p>

<p>Entities are created with <code>Crafty.e</code> which takes a single argument:</p>

<ol>
<li>Components - Either a comma separated list of component names, or a set of strings each being their own components</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Crafty</span><span class="p">.</span><span class="nx">e</span><span class="p">(</span><span class="s1">&#39;Collision, Fourway&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// is the same as</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Crafty</span><span class="p">.</span><span class="nx">e</span><span class="p">(</span><span class="s1">&#39;Collision&#39;</span><span class="p">,</span> <span class="s1">&#39;Fourway&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Events</h2>

<p>Events come in two flavors: Component and Global events.  Component events happen to or on an Entity that has included the Component.  For example the player entity may include the &#8220;Fourway&#8221; component which would add the &#8220;Moved&#8221; event.  Anyone (including the player itself) could listen for that event and know when the player moved.</p>

<p>Global events are registered to and triggered from the global Crafty object.  The tricky part with global events is that they do not have be registered or used, so it is up to you to make sure that you document events that you trigger and correctly bind to those events.</p>

<p>An event is triggered with <code>Crafty.trigger</code> which takes any number of arguments.</p>

<ol>
<li>Name - the name of the event to trigger</li>
<li>data - All the rest of the arguments are blindly passed to any event listener</li>
</ol>


<p>An event is listened for using one of the following.  All of them accept two arguments: the name of the event, and the callback function when the event is triggered.</p>

<ol>
<li><code>bind</code> - listen for event</li>
<li><code>uniqueBind</code> - same as bind, but prevents other event listeners for the same event</li>
<li><code>one</code> - same as bind, but automatically unbinds itself after the first event is triggered</li>
</ol>


<p>Note: in general you should use a named function as the callback.  That way scenes can <code>unbind</code> event listeners when they become inactive (thereby saving the overhead of intercepting events that cannot be acted upon).</p>

<h2>Assets</h2>

<p>An asset is anything data that might need to be loaded before a scene can be played.  This might be images, audio, video, or player data.  Assets are globally registered and can be loaded anyway you see fit, but for convenience there is a loader object which does the heavy lifting.</p>

<p>Assets are loaded with <code>Crafty.load</code> which takes up to 4 arguments</p>

<ol>
<li>assets - an array of the asset URLs to load</li>
<li>onLoad - call after ALL assets are loaded</li>
<li>onProgress - called after each asset is loaded.  It is called with the loaded asset, the total number of assets being loaded, and percentage complete.</li>
<li>onError - called when an asset fails to load.</li>
</ol>


<p>Assets that have been loaded can be acquired using <code>Crafty.asset</code> which takes 1 argument</p>

<ol>
<li>key - the unique name of the asset.  Usually it is the URL used to load the asset.</li>
</ol>


<h2>Sprites</h2>

<p>A sprite is just a component, but it is likely to be one of the most common components of your game that it bares introduction.  Basically a sprite is an image shown to the user.  They could be used for the player, or obstacles on the game board, or for the game board itself.</p>

<p>There is a Sprite component in Crafty, which will almost never be used by itself.  Instead <code>Crafty.sprite</code> will be used to split an image into one or more registered sprite components that you will use.  It takes a variable number of arguments</p>

<ol>
<li>tiles (optional) - the number of tiles in the image.  Each image is assumed to be square so if this number was &#8220;16&#8221; it would assume there are 4 columns and 4 rows.</li>
<li>tileWidth, tileHeight (optional) - The width and height of individual tiles.  Either use this or &#8220;tiles&#8221;, but not both</li>
<li>url - The URL of the loaded image.  This should be preloaded by the <code>Crafty.loader</code></li>
<li>map - map of the sprites to register from this image in the form

<ol>
<li>key - the name of the Sprite component</li>
<li>value - array of offset and size attributes

<ol>
<li>x offset</li>
<li>y offset</li>
<li>width (optional)</li>
<li>height (optional)</li>
</ol>
</li>
</ol>
</li>
<li>paddingX (optional) - horizontal space between tiles</li>
<li>paddingY (optional) - vertical space between tiles</li>
<li>paddingArroundBorder (optional) - if true then there is assumed to be the same amount of padding between the edge of the image and tile as there is between tiles.</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// FlowerSprite is at 0,0 and is 16x32 in size</span>
</span><span class='line'><span class="nx">Crafty</span><span class="p">.</span><span class="nx">sprite</span><span class="p">(</span><span class="s1">&#39;img/spritemap.png&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">FlowerSprite</span><span class="o">:</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">32</span><span class="p">]})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// RoseSprite is at 0,0 and is 50x50</span>
</span><span class='line'><span class="c1">// GrassSprite is at 0,50px and is 150x50px</span>
</span><span class='line'><span class="nx">Crafty</span><span class="p">.</span><span class="nx">sprite</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="s1">&#39;img/spritemap2.png&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">RoseSprite</span><span class="o">:</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">GrassSprite</span><span class="o">:</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[B'More on Rails Meetup - Feb 11, 2014]]></title>
    <link href="http://jkamenik.github.com/blog/2014/02/12/bmore-on-rails-meetup/"/>
    <updated>2014-02-12T09:09:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2014/02/12/bmore-on-rails-meetup</id>
    <content type="html"><![CDATA[<p>Last night I attended the B&#8217;More on rails meetup group&#8217;s monthly presentation.  Always a group crowd.  Always good pizza.  And always good talks.</p>

<p>Last nights talks where about Polymer and the JVM.</p>

<!-- more -->


<h2>Polymer</h2>

<p>Presented by Chris Strom</p>

<p>Before the meeting started we still only had 1 presentor, so Chris whipped together a <a href="http://en.wikipedia.org/wiki/Lightning_talk">lightning talk</a> on Polymer.  He has been blogging about it for some time, and is in the process of writing a book on Polymer.</p>

<p>Polymer is horizontal in scope.  Instead of taking over the entire rendered page like Angular, jQuery, or Backbone, it isolates itself to sub page elements utilizing <a href="http://www.w3.org/TR/shadow-dom/">Shadow Dom</a>.</p>

<p>The simpliest way to think about a Shawdow DOM is like an HTML namespace.  Programming languages have long had namespaces to isolate parts of code and keep things maintainable.  HTML has never had this, so reusable components have been a real headache.</p>

<p>HTML 5 is trying to change that with a lot of advanced techniques, and Polymer is wrapping that in an easier to use library for programmers.</p>

<h2>The JVM</h2>

<p>Presented by Gary Trakhman</p>

<p>The sides are <a href="https://github.com/gtrak/jvmrubyists">here</a></p>

<p>It is nice to see new presentors.  I am not sure if he is new to the group, but I have not seen him present before, so props for that.</p>

<p>The talk itself was an overview of many concepts about the Java Virtual Machine (JVM), but not really about the Java programming language, and not deep in any one area.  Gary (as well as most of us in the Ruby community) find the Java language too verbose to be useful.  There were some Java examples just to give a comparison to Ruby, but his main examples were using Closure.</p>

<p>The JVM uses a Just In Time (JIT) compiler to take bytecode and translate it into platform specific instructions.  The instructions for Linux are different from Windows are different from BSD, but the bytecode is universal.  Java, JRuby, and Closure are just programming languages that produce bytecode.</p>

<p>After the presentation Gary went into a live demo using a Closure console to execute code in real time.  The console simply starts a JVM, pipes it bytecode, and then prints the results in the terminal.  With the JVM running he also open the visiual profiler - which is provided in the Java Development Kit - so we could see the performace metics of the running code.</p>

<h2>Sponsors</h2>

<ul>
<li><a href="http://www.mdlogix.com/">MDLogix</a> hosted the event</li>
<li><a href="http://www.smartlogicsolutions.com/">SmartLogic</a> provided the pizza</li>
<li><a href="http://www.inthebackforty.com/">Back Forty</a> - Honorable mention</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Controller Test in Rails Engines]]></title>
    <link href="http://jkamenik.github.com/blog/2014/02/07/controller-test-in-rails-engines/"/>
    <updated>2014-02-07T14:13:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2014/02/07/controller-test-in-rails-engines</id>
    <content type="html"><![CDATA[<p>Testing a controller that your engine provides is tricky.  But with rspec the easiest way I have found is to follow these 3 steps:</p>

<ol>
<li>Add <code>type: controller</code> to the describe block</li>
<li>Add <code>routes { Your::Engine.routes }</code> block to the top of the tests</li>
<li>Add <code>controller</code> block to the top</li>
</ol>


<!-- more -->


<p>For example</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">YourGem</span><span class="o">::</span><span class="no">UserController</span><span class="p">,</span> <span class="n">type</span><span class="p">:</span> <span class="ss">:controller</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">routes</span> <span class="p">{</span> <span class="no">YourGem</span><span class="o">::</span><span class="no">Engine</span><span class="o">.</span><span class="n">routes</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">controller</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1"># override controller behaviors here</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">current_user</span>
</span><span class='line'>          <span class="vi">@user</span> <span class="o">||=</span> <span class="n">create</span> <span class="ss">:user</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">describe</span> <span class="s1">&#39;GET index&#39;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">it</span> <span class="s1">&#39;should work&#39;</span> <span class="k">do</span>
</span><span class='line'>            <span class="n">get</span> <span class="ss">:index</span>
</span><span class='line'>            <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_success</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Adding <code>type: controller</code> forces Rspec to treat this as a &#8220;controller&#8221; test.  And it will mix in the &#8220;controller&#8221; object, and REST helpers (get, post, put, patch, delete).</p>

<p>Adding <code>routes {...}</code> sets up default routing for the REST helpers, so they can find your controller.  If that is too heavy handed you can pass <code>use_route</code> (see below).</p>

<p>Adding the <code>controller</code> block forces rspec to create an annoyomous controller double.  I use this to provide default function that the <code>ApplicationController</code> from the host app would provide; like <code>current_user</code>.</p>

<h2>use_route</h2>

<p>Instead of <code>routes {...}</code> you could provide the <code>use_route</code> param to the REST helpers.  The value is a symbol that constantizes to your Gem&#8217;s namespace.  You need to provide it every helper (which is why I prefer the <code>routes</code> block).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">YourGem</span><span class="o">::</span><span class="no">UserController</span><span class="p">,</span> <span class="n">type</span><span class="p">:</span> <span class="ss">:controller</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">controller</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1"># override controller behaviors here</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">describe</span> <span class="s1">&#39;GET index&#39;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">it</span> <span class="s1">&#39;should work&#39;</span> <span class="k">do</span>
</span><span class='line'>            <span class="n">get</span> <span class="ss">:index</span><span class="p">,</span> <span class="n">use_route</span><span class="p">:</span> <span class="ss">:your_gem</span>
</span><span class='line'>            <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_success</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">describe</span> <span class="s1">&#39;GET show&#39;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">it</span> <span class="s1">&#39;should work&#39;</span> <span class="k">do</span>
</span><span class='line'>            <span class="n">get</span> <span class="ss">:show</span><span class="p">,</span> <span class="n">use_route</span><span class="p">:</span> <span class="ss">:your_gem</span><span class="p">,</span> <span class="nb">id</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>            <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_success</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Killing the Crunch Mode Antipattern]]></title>
    <link href="http://jkamenik.github.com/blog/2014/01/30/killing-the-crunch-mode-antipattern/"/>
    <updated>2014-01-30T19:45:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2014/01/30/killing-the-crunch-mode-antipattern</id>
    <content type="html"><![CDATA[<p>I have tried to write this article for years, but could never find the right words.  Thankfully Chad Fowler has found those words in his article <a href="http://chadfowler.com/blog/2014/01/22/the-crunch-mode-antipattern/">Killing the Cruch Mode Antipattern</a>.</p>

<!-- more -->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Drafts]]></title>
    <link href="http://jkamenik.github.com/blog/2014/01/21/drafts/"/>
    <updated>2014-01-21T11:38:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2014/01/21/drafts</id>
    <content type="html"><![CDATA[<p>Jekyll supports unpublished posts, but Octopress does not make it clear.  This is how I fixed that for my own blog.</p>

<!-- more -->


<p>Octopress actually does support &#8220;published: false&#8221; in the front matter.  And because it based on Jekyll it means that those posts will be available in &#8220;preview&#8221; but will be ignored when the site is generated/published.</p>

<p>My main care is that I know what I can do with a post in 3 to 4 months.  So I added the the published flag to the generated frontmatter of every new post.</p>

<figure class='code'><figcaption><span>Rakefile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># around line 93, for me</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:new_post</span><span class="p">,</span> <span class="ss">:title</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="p">,</span> <span class="n">args</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># code omitted</span>
</span><span class='line'>  <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;---&quot;</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;layout: post&quot;</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;title: </span><span class="se">\&quot;</span><span class="si">#{</span><span class="n">title</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/&amp;/</span><span class="p">,</span><span class="s1">&#39;&amp;amp;&#39;</span><span class="p">)</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;date: </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y-%m-%d %H:%M&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;comments: true&quot;</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;toc: false&quot;</span>
</span><span class='line'>    <span class="c1"># add published flag to the template</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;published: false&quot;</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;categories: &quot;</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;  - cat1&quot;</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;---&quot;</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;Summary&quot;</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;&lt;!-- more --&gt;&quot;</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;Post text&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I also had to update <code>rake push</code> to regenerate the full site before deployment.  This is because preview works on the same directly that is copied to production.  And since you can preview unpublished posts they will be visible in production, unless you run <code>rake generate</code> first.</p>

<figure class='code'><figcaption><span>Rakefile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># around line 254</span>
</span><span class='line'><span class="n">multitask</span> <span class="ss">:push</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># add the generate rake task first</span>
</span><span class='line'>  <span class="no">Rake</span><span class="o">::</span><span class="no">Task</span><span class="o">[</span><span class="ss">:generate</span><span class="o">].</span><span class="n">invoke</span>
</span><span class='line'>  <span class="c1"># code omitted</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Additionally I want to know visually when a page is a draft.  For that I add &#8220;Draft: &#8221; to the title.</p>

<figure class='code'><figcaption><span>_includes/article.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>
</span><span class='line'># in the <span class="nt">&lt;header&gt;</span> tag
</span><span class='line'>{% if index %}
</span><span class='line'>  # add {% if post.published == false %}Draft: {% endif %}
</span><span class='line'>  <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">&quot;entry-title&quot;</span><span class="nt">&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;{{ root_url }}{{ post.url }}&quot;</span><span class="nt">&gt;</span>{% if post.published == false %}Draft: {% endif %}{% if site.titlecase %}{{ post.title | titlecase }}{% else %}{{ post.title }}{% endif %}<span class="nt">&lt;/a&gt;&lt;/h1&gt;</span>
</span><span class='line'>{% else %}
</span><span class='line'>  # add {% if page.published == false %}Draft: {% endif %}
</span><span class='line'>  <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">&quot;entry-title&quot;</span><span class="nt">&gt;</span>{% if page.published == false %}Draft: {% endif %}{% if site.titlecase %}{{ page.title | titlecase }}{% else %}{{ page.title }}{% endif %}<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>{% endif %}
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Now you will see &#8220;Draft: &#8221; in front of any unpublished posts.</p>

<h2>Manual management</h2>

<p>A few additional things I like to do, but I haven&#8217;t automated yet are:</p>

<ol>
<li>Add &#8220;-draft&#8221; to the file name.</li>
<li>Change the publish date to the day I publish the article

<ol>
<li>This involves changing the file name as well as the front matter</li>
</ol>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RBAC in Ruby]]></title>
    <link href="http://jkamenik.github.com/blog/2014/01/10/rbac-in-ruby/"/>
    <updated>2014-01-10T15:07:00-05:00</updated>
    <id>http://jkamenik.github.com/blog/2014/01/10/rbac-in-ruby</id>
    <content type="html"><![CDATA[<p>RBAC stands for <em>Role Based Access Control</em>.  It is basically a means to programmitically configure access rights without hardcoding.</p>

<p>The full details are <a href="http://en.wikipedia.org/wiki/Role-based_access_control">here</a>, but to be honest I don&#8217;t fully understand it as writen.  What I understand of it is from trial and error.</p>

<p>This entry is an attempt to codify that understanding and apply it using the ruby language.</p>

<!-- more -->


<h2>Basics</h2>

<p>The inputs to the policy are:</p>

<ol>
<li>User or Actor</li>
<li>Action being performed</li>
<li>Resource being acted on</li>
</ol>


<pre>
    +-------------------------------------------------------+
    | +-------+                                +----------+ |
    | |       |            +------+            |          | |
    | |  User |+---------->|Action|+---------->| Resource | |
    | |       |            +------+            |          | |
    | +-------+                                +----------+ |
    +-------------------------------------------------------+
                               +
                               |
                               v
                            +------+
                            |Policy|
                            +------+
                               +
                               |
                               v
                          +---------+
                          |Yes or No|
                          +---------+
</pre>


<h2>Policy</h2>

<p>The policy is where the business logic goes.  It can be as simple as a set of Ruby classes that simply return values, or it can be as complicated as ActiveDirectory.</p>

<p>The players are:</p>

<ol>
<li>Role - collection of permissions bound to a user</li>
<li>Permission - an answer which is limited to a resource and action</li>
</ol>


<p>Here is the basic flow of a permission:</p>

<pre>
    +------+            +------+             +------------+
    | User |+---------->| Role |+----------->| Permission |
    +------+            +------+             |------------|
              Has many            Has many   | Resource   |
                                             | Action     |
                                             | Allowed?   |
                                             +------------+
</pre>


<p>A user can have 1 or more roles.  Each role can have 1 or more permissions.  Each permission associates an action on a resource with an answer.  Either the user is explicitly allowed or explicitly not allowed to access the Resource.</p>

<p><em>Note:</em> I have purposely kept the data model simple.  In more complicated setups there can be several levels of permissions, permissions can have filters, and/or permissions can be directly bound to a user (instead of being bound to a role).  These complications are often introduced to deal with edge cases which are outside the scope of this article.</p>

<h3>Policy logic sample code</h3>

<p>Once the actors are known the logic is easy.  Simply filter in only the permission on a user for the resource and action in question then &#8220;and&#8221; all permissions together.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Policy</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># returns true if the user *can* perform action on resource, false otherwise</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">allowed?</span><span class="p">(</span><span class="n">user</span><span class="p">,</span><span class="n">action</span><span class="p">,</span><span class="n">resource</span><span class="p">)</span>
</span><span class='line'>        <span class="n">reduce_permissions</span> <span class="n">list_permissions</span><span class="p">(</span><span class="n">user</span><span class="p">,</span><span class="n">action</span><span class="p">,</span><span class="n">resource</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># returns an array of filtered permissions</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">list_permissions</span><span class="p">(</span><span class="n">user</span><span class="p">,</span><span class="n">action</span><span class="p">,</span><span class="n">resource</span><span class="p">)</span>
</span><span class='line'>        <span class="n">perm</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="n">roles</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">array</span><span class="p">,</span><span class="n">role</span><span class="o">|</span>
</span><span class='line'>            <span class="n">array</span><span class="o">.</span><span class="n">concat</span> <span class="n">role</span><span class="o">.</span><span class="n">permissions</span><span class="o">.</span><span class="n">for</span><span class="p">(</span><span class="n">resource</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="n">action</span><span class="p">)</span><span class="o">.</span><span class="n">compact</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">reduce_permissions</span><span class="p">(</span><span class="n">perm_array</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">implicit_allow</span> <span class="k">if</span> <span class="n">perm_array</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">perm_array</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="kp">true</span><span class="p">,</span><span class="ss">:&amp;</span><span class="o">&amp;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># &quot;and&quot;, for &quot;or&quot; use &quot;:||&quot;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">reduce_function</span>
</span><span class='line'>        <span class="ss">:&amp;</span><span class="o">&amp;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># default behavior is NOT to give access</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">implicit_allow</span>
</span><span class='line'>        <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TDC Prototype]]></title>
    <link href="http://jkamenik.github.com/blog/2013/09/28/tdc-prototype/"/>
    <updated>2013-09-28T14:58:00-04:00</updated>
    <id>http://jkamenik.github.com/blog/2013/09/28/tdc-prototype</id>
    <content type="html"><![CDATA[<p>In a <a href="http://jkamenik.github.com/blog/2013/09/01/technical-debt-calculator/">previous post</a> I talked about creating a Technical Debt Calculator.  And in an <a href="#">even earlier</a> post I talked about using Keynote to mockup UIs before coding.  Here I revisit the TDC with a Keynote mockup.</p>

<!-- more -->


<h2>Working prototype</h2>

<p>The <a href="http://jkamenik.github.com/assets/Technical%20Debt%20Calculator.pdf">working prototype</a> is a clickable PDF.  You will need Adobe Acrobat Reader or a Mac computer.  From there just download the PDF and play with it.</p>

<p>I used concepts that I gained from working with <a href="http://keynotopia.com/">Keynotopia</a>.  Keynotopdia is an awesome library, which you should own, but at a minimum you should check out their tutorials <a href="">here</a>.</p>

<p>I did not use any assets from their library because their License doesn&#8217;t allow me to share the Keynote files if I do.  However, I wanted to allow people to download my base library and hopefully help me improve my design.  The Keynote file can be found <a href="http://jkamenik.github.com/assets/Technical%20Debt%20Calculator.key">here</a>.</p>

<p>Let me know what you think, in the comments below.  In a later post I will talk about my findings.</p>
]]></content>
  </entry>
  
</feed>
